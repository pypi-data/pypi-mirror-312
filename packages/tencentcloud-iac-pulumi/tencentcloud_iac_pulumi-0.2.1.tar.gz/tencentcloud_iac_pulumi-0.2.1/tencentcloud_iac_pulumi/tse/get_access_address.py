# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAccessAddressResult',
    'AwaitableGetAccessAddressResult',
    'get_access_address',
    'get_access_address_output',
]

@pulumi.output_type
class GetAccessAddressResult:
    """
    A collection of values returned by getAccessAddress.
    """
    def __init__(__self__, console_internet_address=None, console_internet_band_width=None, console_intranet_address=None, engine_region=None, env_address_infos=None, id=None, instance_id=None, internet_address=None, internet_band_width=None, intranet_address=None, limiter_address_infos=None, result_output_file=None, subnet_id=None, vpc_id=None, workload=None):
        if console_internet_address and not isinstance(console_internet_address, str):
            raise TypeError("Expected argument 'console_internet_address' to be a str")
        pulumi.set(__self__, "console_internet_address", console_internet_address)
        if console_internet_band_width and not isinstance(console_internet_band_width, int):
            raise TypeError("Expected argument 'console_internet_band_width' to be a int")
        pulumi.set(__self__, "console_internet_band_width", console_internet_band_width)
        if console_intranet_address and not isinstance(console_intranet_address, str):
            raise TypeError("Expected argument 'console_intranet_address' to be a str")
        pulumi.set(__self__, "console_intranet_address", console_intranet_address)
        if engine_region and not isinstance(engine_region, str):
            raise TypeError("Expected argument 'engine_region' to be a str")
        pulumi.set(__self__, "engine_region", engine_region)
        if env_address_infos and not isinstance(env_address_infos, list):
            raise TypeError("Expected argument 'env_address_infos' to be a list")
        pulumi.set(__self__, "env_address_infos", env_address_infos)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if internet_address and not isinstance(internet_address, str):
            raise TypeError("Expected argument 'internet_address' to be a str")
        pulumi.set(__self__, "internet_address", internet_address)
        if internet_band_width and not isinstance(internet_band_width, int):
            raise TypeError("Expected argument 'internet_band_width' to be a int")
        pulumi.set(__self__, "internet_band_width", internet_band_width)
        if intranet_address and not isinstance(intranet_address, str):
            raise TypeError("Expected argument 'intranet_address' to be a str")
        pulumi.set(__self__, "intranet_address", intranet_address)
        if limiter_address_infos and not isinstance(limiter_address_infos, list):
            raise TypeError("Expected argument 'limiter_address_infos' to be a list")
        pulumi.set(__self__, "limiter_address_infos", limiter_address_infos)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)
        if workload and not isinstance(workload, str):
            raise TypeError("Expected argument 'workload' to be a str")
        pulumi.set(__self__, "workload", workload)

    @property
    @pulumi.getter(name="consoleInternetAddress")
    def console_internet_address(self) -> str:
        """
        Console public network access addressNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "console_internet_address")

    @property
    @pulumi.getter(name="consoleInternetBandWidth")
    def console_internet_band_width(self) -> int:
        """
        Console public network bandwidthNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "console_internet_band_width")

    @property
    @pulumi.getter(name="consoleIntranetAddress")
    def console_intranet_address(self) -> str:
        """
        Console Intranet access addressNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "console_intranet_address")

    @property
    @pulumi.getter(name="engineRegion")
    def engine_region(self) -> Optional[str]:
        return pulumi.get(self, "engine_region")

    @property
    @pulumi.getter(name="envAddressInfos")
    def env_address_infos(self) -> Sequence['outputs.GetAccessAddressEnvAddressInfoResult']:
        """
        Apollo Multi-environment public ip address.
        """
        return pulumi.get(self, "env_address_infos")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="internetAddress")
    def internet_address(self) -> str:
        """
        Public access address.
        """
        return pulumi.get(self, "internet_address")

    @property
    @pulumi.getter(name="internetBandWidth")
    def internet_band_width(self) -> int:
        """
        Client public network bandwidthNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "internet_band_width")

    @property
    @pulumi.getter(name="intranetAddress")
    def intranet_address(self) -> str:
        """
        VPC access IP address listNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "intranet_address")

    @property
    @pulumi.getter(name="limiterAddressInfos")
    def limiter_address_infos(self) -> Sequence['outputs.GetAccessAddressLimiterAddressInfoResult']:
        """
        Access IP address of the Polaris traffic limiting server nodeNote: This field may return null, indicating that a valid value is not available.
        """
        return pulumi.get(self, "limiter_address_infos")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def workload(self) -> Optional[str]:
        return pulumi.get(self, "workload")


class AwaitableGetAccessAddressResult(GetAccessAddressResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccessAddressResult(
            console_internet_address=self.console_internet_address,
            console_internet_band_width=self.console_internet_band_width,
            console_intranet_address=self.console_intranet_address,
            engine_region=self.engine_region,
            env_address_infos=self.env_address_infos,
            id=self.id,
            instance_id=self.instance_id,
            internet_address=self.internet_address,
            internet_band_width=self.internet_band_width,
            intranet_address=self.intranet_address,
            limiter_address_infos=self.limiter_address_infos,
            result_output_file=self.result_output_file,
            subnet_id=self.subnet_id,
            vpc_id=self.vpc_id,
            workload=self.workload)


def get_access_address(engine_region: Optional[str] = None,
                       instance_id: Optional[str] = None,
                       result_output_file: Optional[str] = None,
                       subnet_id: Optional[str] = None,
                       vpc_id: Optional[str] = None,
                       workload: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccessAddressResult:
    """
    Use this data source to query detailed information of tse access_address

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    access_address = tencentcloud.Tse.get_access_address(engine_region="ap-guangzhou",
        instance_id="ins-7eb7eea7")
    ```
    <!--End PulumiCodeChooser -->


    :param str engine_region: Deploy region.
    :param str instance_id: engine instance Id.
    :param str result_output_file: Used to save results.
    :param str subnet_id: Subnet ID, Zookeeper does not need to pass vpcid and subnetid; nacos and Polaris need to pass vpcid and subnetid.
    :param str vpc_id: VPC ID, Zookeeper does not need to pass vpcid and subnetid; nacos and Polaris need to pass vpcid and subnetid.
    :param str workload: Name of other engine components(pushgateway, polaris-limiter).
    """
    __args__ = dict()
    __args__['engineRegion'] = engine_region
    __args__['instanceId'] = instance_id
    __args__['resultOutputFile'] = result_output_file
    __args__['subnetId'] = subnet_id
    __args__['vpcId'] = vpc_id
    __args__['workload'] = workload
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Tse/getAccessAddress:getAccessAddress', __args__, opts=opts, typ=GetAccessAddressResult).value

    return AwaitableGetAccessAddressResult(
        console_internet_address=pulumi.get(__ret__, 'console_internet_address'),
        console_internet_band_width=pulumi.get(__ret__, 'console_internet_band_width'),
        console_intranet_address=pulumi.get(__ret__, 'console_intranet_address'),
        engine_region=pulumi.get(__ret__, 'engine_region'),
        env_address_infos=pulumi.get(__ret__, 'env_address_infos'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        internet_address=pulumi.get(__ret__, 'internet_address'),
        internet_band_width=pulumi.get(__ret__, 'internet_band_width'),
        intranet_address=pulumi.get(__ret__, 'intranet_address'),
        limiter_address_infos=pulumi.get(__ret__, 'limiter_address_infos'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'),
        workload=pulumi.get(__ret__, 'workload'))


@_utilities.lift_output_func(get_access_address)
def get_access_address_output(engine_region: Optional[pulumi.Input[Optional[str]]] = None,
                              instance_id: Optional[pulumi.Input[str]] = None,
                              result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              subnet_id: Optional[pulumi.Input[Optional[str]]] = None,
                              vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                              workload: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccessAddressResult]:
    """
    Use this data source to query detailed information of tse access_address

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    access_address = tencentcloud.Tse.get_access_address(engine_region="ap-guangzhou",
        instance_id="ins-7eb7eea7")
    ```
    <!--End PulumiCodeChooser -->


    :param str engine_region: Deploy region.
    :param str instance_id: engine instance Id.
    :param str result_output_file: Used to save results.
    :param str subnet_id: Subnet ID, Zookeeper does not need to pass vpcid and subnetid; nacos and Polaris need to pass vpcid and subnetid.
    :param str vpc_id: VPC ID, Zookeeper does not need to pass vpcid and subnetid; nacos and Polaris need to pass vpcid and subnetid.
    :param str workload: Name of other engine components(pushgateway, polaris-limiter).
    """
    ...
