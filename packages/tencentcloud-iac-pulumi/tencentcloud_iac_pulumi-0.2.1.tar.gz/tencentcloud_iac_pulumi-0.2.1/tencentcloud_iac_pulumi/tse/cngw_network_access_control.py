# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CngwNetworkAccessControlArgs', 'CngwNetworkAccessControl']

@pulumi.input_type
class CngwNetworkAccessControlArgs:
    def __init__(__self__, *,
                 gateway_id: pulumi.Input[str],
                 group_id: pulumi.Input[str],
                 network_id: pulumi.Input[str],
                 access_control: Optional[pulumi.Input['CngwNetworkAccessControlAccessControlArgs']] = None):
        """
        The set of arguments for constructing a CngwNetworkAccessControl resource.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[str] group_id: gateway group ID.
        :param pulumi.Input[str] network_id: network id.
        :param pulumi.Input['CngwNetworkAccessControlAccessControlArgs'] access_control: access control policy.
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "network_id", network_id)
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[str]:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        gateway group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[str]:
        """
        network id.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[pulumi.Input['CngwNetworkAccessControlAccessControlArgs']]:
        """
        access control policy.
        """
        return pulumi.get(self, "access_control")

    @access_control.setter
    def access_control(self, value: Optional[pulumi.Input['CngwNetworkAccessControlAccessControlArgs']]):
        pulumi.set(self, "access_control", value)


@pulumi.input_type
class _CngwNetworkAccessControlState:
    def __init__(__self__, *,
                 access_control: Optional[pulumi.Input['CngwNetworkAccessControlAccessControlArgs']] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CngwNetworkAccessControl resources.
        :param pulumi.Input['CngwNetworkAccessControlAccessControlArgs'] access_control: access control policy.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[str] group_id: gateway group ID.
        :param pulumi.Input[str] network_id: network id.
        """
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[pulumi.Input['CngwNetworkAccessControlAccessControlArgs']]:
        """
        access control policy.
        """
        return pulumi.get(self, "access_control")

    @access_control.setter
    def access_control(self, value: Optional[pulumi.Input['CngwNetworkAccessControlAccessControlArgs']]):
        pulumi.set(self, "access_control", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        gateway group ID.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        """
        network id.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)


class CngwNetworkAccessControl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_control: Optional[pulumi.Input[pulumi.InputType['CngwNetworkAccessControlAccessControlArgs']]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tse cngw_network_access_control

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cngw_network_access_control = tencentcloud.tse.CngwNetworkAccessControl("cngwNetworkAccessControl",
            access_control=tencentcloud.tse.CngwNetworkAccessControlAccessControlArgs(
                cidr_white_lists=["1.1.1.0"],
                mode="Whitelist",
            ),
            gateway_id="gateway-cf8c99c3",
            group_id="group-a160d123",
            network_id="network-372b1e84")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tse cngw_route_rate_limit can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tse/cngwNetworkAccessControl:CngwNetworkAccessControl cngw_network_access_control gatewayId#groupId#networkId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CngwNetworkAccessControlAccessControlArgs']] access_control: access control policy.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[str] group_id: gateway group ID.
        :param pulumi.Input[str] network_id: network id.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CngwNetworkAccessControlArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tse cngw_network_access_control

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        cngw_network_access_control = tencentcloud.tse.CngwNetworkAccessControl("cngwNetworkAccessControl",
            access_control=tencentcloud.tse.CngwNetworkAccessControlAccessControlArgs(
                cidr_white_lists=["1.1.1.0"],
                mode="Whitelist",
            ),
            gateway_id="gateway-cf8c99c3",
            group_id="group-a160d123",
            network_id="network-372b1e84")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        tse cngw_route_rate_limit can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Tse/cngwNetworkAccessControl:CngwNetworkAccessControl cngw_network_access_control gatewayId#groupId#networkId
        ```

        :param str resource_name: The name of the resource.
        :param CngwNetworkAccessControlArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CngwNetworkAccessControlArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_control: Optional[pulumi.Input[pulumi.InputType['CngwNetworkAccessControlAccessControlArgs']]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CngwNetworkAccessControlArgs.__new__(CngwNetworkAccessControlArgs)

            __props__.__dict__["access_control"] = access_control
            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
        super(CngwNetworkAccessControl, __self__).__init__(
            'tencentcloud:Tse/cngwNetworkAccessControl:CngwNetworkAccessControl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_control: Optional[pulumi.Input[pulumi.InputType['CngwNetworkAccessControlAccessControlArgs']]] = None,
            gateway_id: Optional[pulumi.Input[str]] = None,
            group_id: Optional[pulumi.Input[str]] = None,
            network_id: Optional[pulumi.Input[str]] = None) -> 'CngwNetworkAccessControl':
        """
        Get an existing CngwNetworkAccessControl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['CngwNetworkAccessControlAccessControlArgs']] access_control: access control policy.
        :param pulumi.Input[str] gateway_id: gateway ID.
        :param pulumi.Input[str] group_id: gateway group ID.
        :param pulumi.Input[str] network_id: network id.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CngwNetworkAccessControlState.__new__(_CngwNetworkAccessControlState)

        __props__.__dict__["access_control"] = access_control
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["network_id"] = network_id
        return CngwNetworkAccessControl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> pulumi.Output[Optional['outputs.CngwNetworkAccessControlAccessControl']]:
        """
        access control policy.
        """
        return pulumi.get(self, "access_control")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[str]:
        """
        gateway ID.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[str]:
        """
        gateway group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[str]:
        """
        network id.
        """
        return pulumi.get(self, "network_id")

