# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AccessGroupArgs', 'AccessGroup']

@pulumi.input_type
class AccessGroupArgs:
    def __init__(__self__, *,
                 access_group_name: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 vpc_type: pulumi.Input[int],
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AccessGroup resource.
        :param pulumi.Input[str] access_group_name: Permission group name.
        :param pulumi.Input[str] vpc_id: VPC ID.
        :param pulumi.Input[int] vpc_type: vpc network type(1:CVM, 2:BM 1.0).
        :param pulumi.Input[str] description: Permission group description, default empty.
        """
        pulumi.set(__self__, "access_group_name", access_group_name)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vpc_type", vpc_type)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="accessGroupName")
    def access_group_name(self) -> pulumi.Input[str]:
        """
        Permission group name.
        """
        return pulumi.get(self, "access_group_name")

    @access_group_name.setter
    def access_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_group_name", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vpcType")
    def vpc_type(self) -> pulumi.Input[int]:
        """
        vpc network type(1:CVM, 2:BM 1.0).
        """
        return pulumi.get(self, "vpc_type")

    @vpc_type.setter
    def vpc_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "vpc_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Permission group description, default empty.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _AccessGroupState:
    def __init__(__self__, *,
                 access_group_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpc_type: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering AccessGroup resources.
        :param pulumi.Input[str] access_group_name: Permission group name.
        :param pulumi.Input[str] description: Permission group description, default empty.
        :param pulumi.Input[str] vpc_id: VPC ID.
        :param pulumi.Input[int] vpc_type: vpc network type(1:CVM, 2:BM 1.0).
        """
        if access_group_name is not None:
            pulumi.set(__self__, "access_group_name", access_group_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpc_type is not None:
            pulumi.set(__self__, "vpc_type", vpc_type)

    @property
    @pulumi.getter(name="accessGroupName")
    def access_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Permission group name.
        """
        return pulumi.get(self, "access_group_name")

    @access_group_name.setter
    def access_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_group_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Permission group description, default empty.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vpcType")
    def vpc_type(self) -> Optional[pulumi.Input[int]]:
        """
        vpc network type(1:CVM, 2:BM 1.0).
        """
        return pulumi.get(self, "vpc_type")

    @vpc_type.setter
    def vpc_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vpc_type", value)


class AccessGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_group_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpc_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a chdfs access_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        access_group = tencentcloud.chdfs.AccessGroup("accessGroup",
            access_group_name="testAccessGroup",
            description="test access group",
            vpc_id="vpc-4owdpnwr",
            vpc_type=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        chdfs access_group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Chdfs/accessGroup:AccessGroup access_group access_group_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_group_name: Permission group name.
        :param pulumi.Input[str] description: Permission group description, default empty.
        :param pulumi.Input[str] vpc_id: VPC ID.
        :param pulumi.Input[int] vpc_type: vpc network type(1:CVM, 2:BM 1.0).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccessGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a chdfs access_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        access_group = tencentcloud.chdfs.AccessGroup("accessGroup",
            access_group_name="testAccessGroup",
            description="test access group",
            vpc_id="vpc-4owdpnwr",
            vpc_type=1)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        chdfs access_group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Chdfs/accessGroup:AccessGroup access_group access_group_id
        ```

        :param str resource_name: The name of the resource.
        :param AccessGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccessGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_group_name: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpc_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccessGroupArgs.__new__(AccessGroupArgs)

            if access_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'access_group_name'")
            __props__.__dict__["access_group_name"] = access_group_name
            __props__.__dict__["description"] = description
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            if vpc_type is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_type'")
            __props__.__dict__["vpc_type"] = vpc_type
        super(AccessGroup, __self__).__init__(
            'tencentcloud:Chdfs/accessGroup:AccessGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_group_name: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            vpc_type: Optional[pulumi.Input[int]] = None) -> 'AccessGroup':
        """
        Get an existing AccessGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_group_name: Permission group name.
        :param pulumi.Input[str] description: Permission group description, default empty.
        :param pulumi.Input[str] vpc_id: VPC ID.
        :param pulumi.Input[int] vpc_type: vpc network type(1:CVM, 2:BM 1.0).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccessGroupState.__new__(_AccessGroupState)

        __props__.__dict__["access_group_name"] = access_group_name
        __props__.__dict__["description"] = description
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vpc_type"] = vpc_type
        return AccessGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessGroupName")
    def access_group_name(self) -> pulumi.Output[str]:
        """
        Permission group name.
        """
        return pulumi.get(self, "access_group_name")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Permission group description, default empty.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcType")
    def vpc_type(self) -> pulumi.Output[int]:
        """
        vpc network type(1:CVM, 2:BM 1.0).
        """
        return pulumi.get(self, "vpc_type")

