# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LifeCycleRuleArgs', 'LifeCycleRule']

@pulumi.input_type
class LifeCycleRuleArgs:
    def __init__(__self__, *,
                 file_system_id: pulumi.Input[str],
                 life_cycle_rule: pulumi.Input['LifeCycleRuleLifeCycleRuleArgs']):
        """
        The set of arguments for constructing a LifeCycleRule resource.
        :param pulumi.Input[str] file_system_id: file system id.
        :param pulumi.Input['LifeCycleRuleLifeCycleRuleArgs'] life_cycle_rule: life cycle rule.
        """
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "life_cycle_rule", life_cycle_rule)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> pulumi.Input[str]:
        """
        file system id.
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="lifeCycleRule")
    def life_cycle_rule(self) -> pulumi.Input['LifeCycleRuleLifeCycleRuleArgs']:
        """
        life cycle rule.
        """
        return pulumi.get(self, "life_cycle_rule")

    @life_cycle_rule.setter
    def life_cycle_rule(self, value: pulumi.Input['LifeCycleRuleLifeCycleRuleArgs']):
        pulumi.set(self, "life_cycle_rule", value)


@pulumi.input_type
class _LifeCycleRuleState:
    def __init__(__self__, *,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 life_cycle_rule: Optional[pulumi.Input['LifeCycleRuleLifeCycleRuleArgs']] = None):
        """
        Input properties used for looking up and filtering LifeCycleRule resources.
        :param pulumi.Input[str] file_system_id: file system id.
        :param pulumi.Input['LifeCycleRuleLifeCycleRuleArgs'] life_cycle_rule: life cycle rule.
        """
        if file_system_id is not None:
            pulumi.set(__self__, "file_system_id", file_system_id)
        if life_cycle_rule is not None:
            pulumi.set(__self__, "life_cycle_rule", life_cycle_rule)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[pulumi.Input[str]]:
        """
        file system id.
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="lifeCycleRule")
    def life_cycle_rule(self) -> Optional[pulumi.Input['LifeCycleRuleLifeCycleRuleArgs']]:
        """
        life cycle rule.
        """
        return pulumi.get(self, "life_cycle_rule")

    @life_cycle_rule.setter
    def life_cycle_rule(self, value: Optional[pulumi.Input['LifeCycleRuleLifeCycleRuleArgs']]):
        pulumi.set(self, "life_cycle_rule", value)


class LifeCycleRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 life_cycle_rule: Optional[pulumi.Input[pulumi.InputType['LifeCycleRuleLifeCycleRuleArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a chdfs life_cycle_rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        life_cycle_rule = tencentcloud.chdfs.LifeCycleRule("lifeCycleRule",
            file_system_id="f14mpfy5lh4e",
            life_cycle_rule=tencentcloud.chdfs.LifeCycleRuleLifeCycleRuleArgs(
                life_cycle_rule_name="terraform-test",
                path="/test",
                status=1,
                transitions=[tencentcloud.chdfs.LifeCycleRuleLifeCycleRuleTransitionArgs(
                    days=30,
                    type=1,
                )],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        chdfs life_cycle_rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Chdfs/lifeCycleRule:LifeCycleRule life_cycle_rule file_system_id#life_cycle_rule_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] file_system_id: file system id.
        :param pulumi.Input[pulumi.InputType['LifeCycleRuleLifeCycleRuleArgs']] life_cycle_rule: life cycle rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LifeCycleRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a chdfs life_cycle_rule

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        life_cycle_rule = tencentcloud.chdfs.LifeCycleRule("lifeCycleRule",
            file_system_id="f14mpfy5lh4e",
            life_cycle_rule=tencentcloud.chdfs.LifeCycleRuleLifeCycleRuleArgs(
                life_cycle_rule_name="terraform-test",
                path="/test",
                status=1,
                transitions=[tencentcloud.chdfs.LifeCycleRuleLifeCycleRuleTransitionArgs(
                    days=30,
                    type=1,
                )],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        chdfs life_cycle_rule can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Chdfs/lifeCycleRule:LifeCycleRule life_cycle_rule file_system_id#life_cycle_rule_id
        ```

        :param str resource_name: The name of the resource.
        :param LifeCycleRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LifeCycleRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 file_system_id: Optional[pulumi.Input[str]] = None,
                 life_cycle_rule: Optional[pulumi.Input[pulumi.InputType['LifeCycleRuleLifeCycleRuleArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LifeCycleRuleArgs.__new__(LifeCycleRuleArgs)

            if file_system_id is None and not opts.urn:
                raise TypeError("Missing required property 'file_system_id'")
            __props__.__dict__["file_system_id"] = file_system_id
            if life_cycle_rule is None and not opts.urn:
                raise TypeError("Missing required property 'life_cycle_rule'")
            __props__.__dict__["life_cycle_rule"] = life_cycle_rule
        super(LifeCycleRule, __self__).__init__(
            'tencentcloud:Chdfs/lifeCycleRule:LifeCycleRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            file_system_id: Optional[pulumi.Input[str]] = None,
            life_cycle_rule: Optional[pulumi.Input[pulumi.InputType['LifeCycleRuleLifeCycleRuleArgs']]] = None) -> 'LifeCycleRule':
        """
        Get an existing LifeCycleRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] file_system_id: file system id.
        :param pulumi.Input[pulumi.InputType['LifeCycleRuleLifeCycleRuleArgs']] life_cycle_rule: life cycle rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LifeCycleRuleState.__new__(_LifeCycleRuleState)

        __props__.__dict__["file_system_id"] = file_system_id
        __props__.__dict__["life_cycle_rule"] = life_cycle_rule
        return LifeCycleRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> pulumi.Output[str]:
        """
        file system id.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="lifeCycleRule")
    def life_cycle_rule(self) -> pulumi.Output['outputs.LifeCycleRuleLifeCycleRule']:
        """
        life cycle rule.
        """
        return pulumi.get(self, "life_cycle_rule")

