# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAccessGroupsResult',
    'AwaitableGetAccessGroupsResult',
    'get_access_groups',
    'get_access_groups_output',
]

@pulumi.output_type
class GetAccessGroupsResult:
    """
    A collection of values returned by getAccessGroups.
    """
    def __init__(__self__, access_groups=None, id=None, owner_uin=None, result_output_file=None, vpc_id=None):
        if access_groups and not isinstance(access_groups, list):
            raise TypeError("Expected argument 'access_groups' to be a list")
        pulumi.set(__self__, "access_groups", access_groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if owner_uin and not isinstance(owner_uin, int):
            raise TypeError("Expected argument 'owner_uin' to be a int")
        pulumi.set(__self__, "owner_uin", owner_uin)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="accessGroups")
    def access_groups(self) -> Sequence['outputs.GetAccessGroupsAccessGroupResult']:
        """
        access group list.
        """
        return pulumi.get(self, "access_groups")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ownerUin")
    def owner_uin(self) -> Optional[int]:
        return pulumi.get(self, "owner_uin")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        VPC ID.
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetAccessGroupsResult(GetAccessGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccessGroupsResult(
            access_groups=self.access_groups,
            id=self.id,
            owner_uin=self.owner_uin,
            result_output_file=self.result_output_file,
            vpc_id=self.vpc_id)


def get_access_groups(owner_uin: Optional[int] = None,
                      result_output_file: Optional[str] = None,
                      vpc_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccessGroupsResult:
    """
    Use this data source to query detailed information of chdfs access_groups

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    access_groups = tencentcloud.Chdfs.get_access_groups(vpc_id="vpc-pewdpc0d")
    ```
    <!--End PulumiCodeChooser -->


    :param int owner_uin: get groups belongs to the owner uin, must set but only can use one of VpcId and OwnerUin to get the groups.
    :param str result_output_file: Used to save results.
    :param str vpc_id: get groups belongs to the vpc id, must set but only can use one of VpcId and OwnerUin to get the groups.
    """
    __args__ = dict()
    __args__['ownerUin'] = owner_uin
    __args__['resultOutputFile'] = result_output_file
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Chdfs/getAccessGroups:getAccessGroups', __args__, opts=opts, typ=GetAccessGroupsResult).value

    return AwaitableGetAccessGroupsResult(
        access_groups=pulumi.get(__ret__, 'access_groups'),
        id=pulumi.get(__ret__, 'id'),
        owner_uin=pulumi.get(__ret__, 'owner_uin'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))


@_utilities.lift_output_func(get_access_groups)
def get_access_groups_output(owner_uin: Optional[pulumi.Input[Optional[int]]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccessGroupsResult]:
    """
    Use this data source to query detailed information of chdfs access_groups

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    access_groups = tencentcloud.Chdfs.get_access_groups(vpc_id="vpc-pewdpc0d")
    ```
    <!--End PulumiCodeChooser -->


    :param int owner_uin: get groups belongs to the owner uin, must set but only can use one of VpcId and OwnerUin to get the groups.
    :param str result_output_file: Used to save results.
    :param str vpc_id: get groups belongs to the vpc id, must set but only can use one of VpcId and OwnerUin to get the groups.
    """
    ...
