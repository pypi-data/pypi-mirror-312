# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AccessRuleAccessRuleArgs',
    'LifeCycleRuleLifeCycleRuleArgs',
    'LifeCycleRuleLifeCycleRuleTransitionArgs',
]

@pulumi.input_type
class AccessRuleAccessRuleArgs:
    def __init__(__self__, *,
                 access_mode: Optional[pulumi.Input[int]] = None,
                 access_rule_id: Optional[pulumi.Input[int]] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] access_mode: rule access mode, 1: read only, 2: read &amp; wirte.
        :param pulumi.Input[int] access_rule_id: single rule id.
        :param pulumi.Input[str] address: rule address, IP OR IP SEG.
        :param pulumi.Input[str] create_time: rule create time.
        :param pulumi.Input[int] priority: rule priority, range 1 - 100, value less higher priority.
        """
        if access_mode is not None:
            pulumi.set(__self__, "access_mode", access_mode)
        if access_rule_id is not None:
            pulumi.set(__self__, "access_rule_id", access_rule_id)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="accessMode")
    def access_mode(self) -> Optional[pulumi.Input[int]]:
        """
        rule access mode, 1: read only, 2: read &amp; wirte.
        """
        return pulumi.get(self, "access_mode")

    @access_mode.setter
    def access_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "access_mode", value)

    @property
    @pulumi.getter(name="accessRuleId")
    def access_rule_id(self) -> Optional[pulumi.Input[int]]:
        """
        single rule id.
        """
        return pulumi.get(self, "access_rule_id")

    @access_rule_id.setter
    def access_rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "access_rule_id", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        rule address, IP OR IP SEG.
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        rule create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        """
        rule priority, range 1 - 100, value less higher priority.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class LifeCycleRuleLifeCycleRuleArgs:
    def __init__(__self__, *,
                 create_time: Optional[pulumi.Input[str]] = None,
                 life_cycle_rule_id: Optional[pulumi.Input[int]] = None,
                 life_cycle_rule_name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[int]] = None,
                 transitions: Optional[pulumi.Input[Sequence[pulumi.Input['LifeCycleRuleLifeCycleRuleTransitionArgs']]]] = None):
        """
        :param pulumi.Input[str] create_time: rule create time.
        :param pulumi.Input[int] life_cycle_rule_id: single rule id.
        :param pulumi.Input[str] life_cycle_rule_name: rule name.
        :param pulumi.Input[str] path: rule op path.
        :param pulumi.Input[int] status: rule status, 1:open, 2:close.
        :param pulumi.Input[Sequence[pulumi.Input['LifeCycleRuleLifeCycleRuleTransitionArgs']]] transitions: life cycle rule transition list.
        """
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if life_cycle_rule_id is not None:
            pulumi.set(__self__, "life_cycle_rule_id", life_cycle_rule_id)
        if life_cycle_rule_name is not None:
            pulumi.set(__self__, "life_cycle_rule_name", life_cycle_rule_name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if transitions is not None:
            pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        rule create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="lifeCycleRuleId")
    def life_cycle_rule_id(self) -> Optional[pulumi.Input[int]]:
        """
        single rule id.
        """
        return pulumi.get(self, "life_cycle_rule_id")

    @life_cycle_rule_id.setter
    def life_cycle_rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "life_cycle_rule_id", value)

    @property
    @pulumi.getter(name="lifeCycleRuleName")
    def life_cycle_rule_name(self) -> Optional[pulumi.Input[str]]:
        """
        rule name.
        """
        return pulumi.get(self, "life_cycle_rule_name")

    @life_cycle_rule_name.setter
    def life_cycle_rule_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "life_cycle_rule_name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        rule op path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[int]]:
        """
        rule status, 1:open, 2:close.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def transitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LifeCycleRuleLifeCycleRuleTransitionArgs']]]]:
        """
        life cycle rule transition list.
        """
        return pulumi.get(self, "transitions")

    @transitions.setter
    def transitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LifeCycleRuleLifeCycleRuleTransitionArgs']]]]):
        pulumi.set(self, "transitions", value)


@pulumi.input_type
class LifeCycleRuleLifeCycleRuleTransitionArgs:
    def __init__(__self__, *,
                 days: pulumi.Input[int],
                 type: pulumi.Input[int]):
        """
        :param pulumi.Input[int] days: trigger days(n day).
        :param pulumi.Input[int] type: transition type, 1: archive, 2: delete, 3: low rate.
        """
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def days(self) -> pulumi.Input[int]:
        """
        trigger days(n day).
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: pulumi.Input[int]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[int]:
        """
        transition type, 1: archive, 2: delete, 3: low rate.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[int]):
        pulumi.set(self, "type", value)


