# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 span_daily_counters: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 trace_duration: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] description: Description Of Instance.
        :param pulumi.Input[str] name: Name Of Instance.
        :param pulumi.Input[int] pay_mode: Modify the billing mode: `1` means prepaid, `0` means pay-as-you-go, the default value is `0`.
        :param pulumi.Input[int] span_daily_counters: Quota Of Instance Reporting.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] trace_duration: Duration Of Trace Data.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pay_mode is not None:
            pulumi.set(__self__, "pay_mode", pay_mode)
        if span_daily_counters is not None:
            pulumi.set(__self__, "span_daily_counters", span_daily_counters)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if trace_duration is not None:
            pulumi.set(__self__, "trace_duration", trace_duration)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description Of Instance.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name Of Instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Modify the billing mode: `1` means prepaid, `0` means pay-as-you-go, the default value is `0`.
        """
        return pulumi.get(self, "pay_mode")

    @pay_mode.setter
    def pay_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_mode", value)

    @property
    @pulumi.getter(name="spanDailyCounters")
    def span_daily_counters(self) -> Optional[pulumi.Input[int]]:
        """
        Quota Of Instance Reporting.
        """
        return pulumi.get(self, "span_daily_counters")

    @span_daily_counters.setter
    def span_daily_counters(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "span_daily_counters", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="traceDuration")
    def trace_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Duration Of Trace Data.
        """
        return pulumi.get(self, "trace_duration")

    @trace_duration.setter
    def trace_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trace_duration", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 span_daily_counters: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 trace_duration: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[str] description: Description Of Instance.
        :param pulumi.Input[str] name: Name Of Instance.
        :param pulumi.Input[int] pay_mode: Modify the billing mode: `1` means prepaid, `0` means pay-as-you-go, the default value is `0`.
        :param pulumi.Input[int] span_daily_counters: Quota Of Instance Reporting.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] trace_duration: Duration Of Trace Data.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pay_mode is not None:
            pulumi.set(__self__, "pay_mode", pay_mode)
        if span_daily_counters is not None:
            pulumi.set(__self__, "span_daily_counters", span_daily_counters)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if trace_duration is not None:
            pulumi.set(__self__, "trace_duration", trace_duration)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description Of Instance.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name Of Instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Modify the billing mode: `1` means prepaid, `0` means pay-as-you-go, the default value is `0`.
        """
        return pulumi.get(self, "pay_mode")

    @pay_mode.setter
    def pay_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_mode", value)

    @property
    @pulumi.getter(name="spanDailyCounters")
    def span_daily_counters(self) -> Optional[pulumi.Input[int]]:
        """
        Quota Of Instance Reporting.
        """
        return pulumi.get(self, "span_daily_counters")

    @span_daily_counters.setter
    def span_daily_counters(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "span_daily_counters", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="traceDuration")
    def trace_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Duration Of Trace Data.
        """
        return pulumi.get(self, "trace_duration")

    @trace_duration.setter
    def trace_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trace_duration", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 span_daily_counters: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 trace_duration: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a apm instance

        > **NOTE:** To use the field `pay_mode`, you need to contact official customer service to join the whitelist.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.apm.Instance("example",
            description="desc.",
            span_daily_counters=0,
            tags={
                "createdBy": "terraform",
            },
            trace_duration=15)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        apm instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Apm/instance:Instance example apm-IMVrxXl1K
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description Of Instance.
        :param pulumi.Input[str] name: Name Of Instance.
        :param pulumi.Input[int] pay_mode: Modify the billing mode: `1` means prepaid, `0` means pay-as-you-go, the default value is `0`.
        :param pulumi.Input[int] span_daily_counters: Quota Of Instance Reporting.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] trace_duration: Duration Of Trace Data.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[InstanceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a apm instance

        > **NOTE:** To use the field `pay_mode`, you need to contact official customer service to join the whitelist.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.apm.Instance("example",
            description="desc.",
            span_daily_counters=0,
            tags={
                "createdBy": "terraform",
            },
            trace_duration=15)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        apm instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Apm/instance:Instance example apm-IMVrxXl1K
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pay_mode: Optional[pulumi.Input[int]] = None,
                 span_daily_counters: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 trace_duration: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["pay_mode"] = pay_mode
            __props__.__dict__["span_daily_counters"] = span_daily_counters
            __props__.__dict__["tags"] = tags
            __props__.__dict__["trace_duration"] = trace_duration
        super(Instance, __self__).__init__(
            'tencentcloud:Apm/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pay_mode: Optional[pulumi.Input[int]] = None,
            span_daily_counters: Optional[pulumi.Input[int]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            trace_duration: Optional[pulumi.Input[int]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description Of Instance.
        :param pulumi.Input[str] name: Name Of Instance.
        :param pulumi.Input[int] pay_mode: Modify the billing mode: `1` means prepaid, `0` means pay-as-you-go, the default value is `0`.
        :param pulumi.Input[int] span_daily_counters: Quota Of Instance Reporting.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[int] trace_duration: Duration Of Trace Data.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["pay_mode"] = pay_mode
        __props__.__dict__["span_daily_counters"] = span_daily_counters
        __props__.__dict__["tags"] = tags
        __props__.__dict__["trace_duration"] = trace_duration
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description Of Instance.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name Of Instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> pulumi.Output[Optional[int]]:
        """
        Modify the billing mode: `1` means prepaid, `0` means pay-as-you-go, the default value is `0`.
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter(name="spanDailyCounters")
    def span_daily_counters(self) -> pulumi.Output[Optional[int]]:
        """
        Quota Of Instance Reporting.
        """
        return pulumi.get(self, "span_daily_counters")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="traceDuration")
    def trace_duration(self) -> pulumi.Output[Optional[int]]:
        """
        Duration Of Trace Data.
        """
        return pulumi.get(self, "trace_duration")

