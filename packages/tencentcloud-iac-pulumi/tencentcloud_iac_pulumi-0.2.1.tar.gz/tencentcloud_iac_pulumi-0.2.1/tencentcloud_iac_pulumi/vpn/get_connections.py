# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetConnectionsResult',
    'AwaitableGetConnectionsResult',
    'get_connections',
    'get_connections_output',
]

@pulumi.output_type
class GetConnectionsResult:
    """
    A collection of values returned by getConnections.
    """
    def __init__(__self__, connection_lists=None, customer_gateway_id=None, id=None, name=None, result_output_file=None, tags=None, vpc_id=None, vpn_gateway_id=None):
        if connection_lists and not isinstance(connection_lists, list):
            raise TypeError("Expected argument 'connection_lists' to be a list")
        pulumi.set(__self__, "connection_lists", connection_lists)
        if customer_gateway_id and not isinstance(customer_gateway_id, str):
            raise TypeError("Expected argument 'customer_gateway_id' to be a str")
        pulumi.set(__self__, "customer_gateway_id", customer_gateway_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)
        if vpn_gateway_id and not isinstance(vpn_gateway_id, str):
            raise TypeError("Expected argument 'vpn_gateway_id' to be a str")
        pulumi.set(__self__, "vpn_gateway_id", vpn_gateway_id)

    @property
    @pulumi.getter(name="connectionLists")
    def connection_lists(self) -> Sequence['outputs.GetConnectionsConnectionListResult']:
        """
        Information list of the dedicated connections.
        """
        return pulumi.get(self, "connection_lists")

    @property
    @pulumi.getter(name="customerGatewayId")
    def customer_gateway_id(self) -> Optional[str]:
        """
        ID of the customer gateway.
        """
        return pulumi.get(self, "customer_gateway_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        ID of the VPN connection.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the VPN connection.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, Any]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        ID of the VPC.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpnGatewayId")
    def vpn_gateway_id(self) -> Optional[str]:
        """
        ID of the VPN gateway.
        """
        return pulumi.get(self, "vpn_gateway_id")


class AwaitableGetConnectionsResult(GetConnectionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConnectionsResult(
            connection_lists=self.connection_lists,
            customer_gateway_id=self.customer_gateway_id,
            id=self.id,
            name=self.name,
            result_output_file=self.result_output_file,
            tags=self.tags,
            vpc_id=self.vpc_id,
            vpn_gateway_id=self.vpn_gateway_id)


def get_connections(customer_gateway_id: Optional[str] = None,
                    id: Optional[str] = None,
                    name: Optional[str] = None,
                    result_output_file: Optional[str] = None,
                    tags: Optional[Mapping[str, Any]] = None,
                    vpc_id: Optional[str] = None,
                    vpn_gateway_id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConnectionsResult:
    """
    Use this data source to query detailed information of VPN connections.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    foo = tencentcloud.Vpn.get_connections(customer_gateway_id="",
        id="vpnx-xfqag",
        name="main",
        tags={
            "test": "tf",
        },
        vpc_id="cgw-xfqag",
        vpn_gateway_id="vpngw-8ccsnclt")
    ```
    <!--End PulumiCodeChooser -->


    :param str customer_gateway_id: Customer gateway ID of the VPN connection.
    :param str id: ID of the VPN connection.
    :param str name: Name of the VPN connection. The length of character is limited to 1-60.
    :param str result_output_file: Used to save results.
    :param Mapping[str, Any] tags: Tags of the VPN connection to be queried.
    :param str vpc_id: ID of the VPC.
    :param str vpn_gateway_id: VPN gateway ID of the VPN connection.
    """
    __args__ = dict()
    __args__['customerGatewayId'] = customer_gateway_id
    __args__['id'] = id
    __args__['name'] = name
    __args__['resultOutputFile'] = result_output_file
    __args__['tags'] = tags
    __args__['vpcId'] = vpc_id
    __args__['vpnGatewayId'] = vpn_gateway_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Vpn/getConnections:getConnections', __args__, opts=opts, typ=GetConnectionsResult).value

    return AwaitableGetConnectionsResult(
        connection_lists=pulumi.get(__ret__, 'connection_lists'),
        customer_gateway_id=pulumi.get(__ret__, 'customer_gateway_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        tags=pulumi.get(__ret__, 'tags'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'),
        vpn_gateway_id=pulumi.get(__ret__, 'vpn_gateway_id'))


@_utilities.lift_output_func(get_connections)
def get_connections_output(customer_gateway_id: Optional[pulumi.Input[Optional[str]]] = None,
                           id: Optional[pulumi.Input[Optional[str]]] = None,
                           name: Optional[pulumi.Input[Optional[str]]] = None,
                           result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           tags: Optional[pulumi.Input[Optional[Mapping[str, Any]]]] = None,
                           vpc_id: Optional[pulumi.Input[Optional[str]]] = None,
                           vpn_gateway_id: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConnectionsResult]:
    """
    Use this data source to query detailed information of VPN connections.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    foo = tencentcloud.Vpn.get_connections(customer_gateway_id="",
        id="vpnx-xfqag",
        name="main",
        tags={
            "test": "tf",
        },
        vpc_id="cgw-xfqag",
        vpn_gateway_id="vpngw-8ccsnclt")
    ```
    <!--End PulumiCodeChooser -->


    :param str customer_gateway_id: Customer gateway ID of the VPN connection.
    :param str id: ID of the VPN connection.
    :param str name: Name of the VPN connection. The length of character is limited to 1-60.
    :param str result_output_file: Used to save results.
    :param Mapping[str, Any] tags: Tags of the VPN connection to be queried.
    :param str vpc_id: ID of the VPC.
    :param str vpn_gateway_id: VPN gateway ID of the VPN connection.
    """
    ...
