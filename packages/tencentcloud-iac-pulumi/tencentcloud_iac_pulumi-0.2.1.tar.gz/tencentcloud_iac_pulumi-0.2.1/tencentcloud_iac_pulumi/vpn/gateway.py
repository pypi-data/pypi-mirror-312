# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GatewayArgs', 'Gateway']

@pulumi.input_type
class GatewayArgs:
    def __init__(__self__, *,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 max_connection: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Gateway resource.
        :param pulumi.Input[int] bandwidth: The maximum public network output bandwidth of VPN gateway (unit: Mbps), the available values include: 5,10,20,50,100,200,500,1000. Default is 5. When charge type is `PREPAID`, bandwidth degradation operation is unsupported.
        :param pulumi.Input[str] cdc_id: CDC instance ID.
        :param pulumi.Input[str] charge_type: Charge Type of the VPN gateway. Valid value: `PREPAID`, `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
        :param pulumi.Input[int] max_connection: Maximum number of connected clients allowed for the SSL VPN gateway. Valid values: [5, 10, 20, 50, 100]. This parameter is only required for SSL VPN gateways.
        :param pulumi.Input[str] name: Name of the VPN gateway. The length of character is limited to 1-60.
        :param pulumi.Input[int] prepaid_period: Period of instance to be prepaid. Valid value: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `9`, `12`, `24`, `36`. The unit is month. Caution: when this para and renew_flag para are valid, the request means to renew several months more pre-paid period. This para can only be changed on `IPSEC` vpn gateway.
        :param pulumi.Input[str] prepaid_renew_flag: Flag indicates whether to renew or not. Valid value: `NOTIFY_AND_AUTO_RENEW`, `NOTIFY_AND_MANUAL_RENEW`.
        :param pulumi.Input[Mapping[str, Any]] tags: A list of tags used to associate different resources.
        :param pulumi.Input[str] type: Type of gateway instance, Default is `IPSEC`. Valid value: `IPSEC`, `SSL`, `CCN` and `SSL_CCN`.
        :param pulumi.Input[str] vpc_id: ID of the VPC. Required if vpn gateway is not in `CCN` or `SSL_CCN` type, and doesn't make sense for `CCN` or `SSL_CCN` vpn gateway.
        :param pulumi.Input[str] zone: Zone of the VPN gateway.
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if max_connection is not None:
            pulumi.set(__self__, "max_connection", max_connection)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if prepaid_renew_flag is not None:
            pulumi.set(__self__, "prepaid_renew_flag", prepaid_renew_flag)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum public network output bandwidth of VPN gateway (unit: Mbps), the available values include: 5,10,20,50,100,200,500,1000. Default is 5. When charge type is `PREPAID`, bandwidth degradation operation is unsupported.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        CDC instance ID.
        """
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge Type of the VPN gateway. Valid value: `PREPAID`, `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="maxConnection")
    def max_connection(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of connected clients allowed for the SSL VPN gateway. Valid values: [5, 10, 20, 50, 100]. This parameter is only required for SSL VPN gateways.
        """
        return pulumi.get(self, "max_connection")

    @max_connection.setter
    def max_connection(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connection", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the VPN gateway. The length of character is limited to 1-60.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period of instance to be prepaid. Valid value: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `9`, `12`, `24`, `36`. The unit is month. Caution: when this para and renew_flag para are valid, the request means to renew several months more pre-paid period. This para can only be changed on `IPSEC` vpn gateway.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="prepaidRenewFlag")
    def prepaid_renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Flag indicates whether to renew or not. Valid value: `NOTIFY_AND_AUTO_RENEW`, `NOTIFY_AND_MANUAL_RENEW`.
        """
        return pulumi.get(self, "prepaid_renew_flag")

    @prepaid_renew_flag.setter
    def prepaid_renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prepaid_renew_flag", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of gateway instance, Default is `IPSEC`. Valid value: `IPSEC`, `SSL`, `CCN` and `SSL_CCN`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the VPC. Required if vpn gateway is not in `CCN` or `SSL_CCN` type, and doesn't make sense for `CCN` or `SSL_CCN` vpn gateway.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone of the VPN gateway.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class _GatewayState:
    def __init__(__self__, *,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 expired_time: Optional[pulumi.Input[str]] = None,
                 is_address_blocked: Optional[pulumi.Input[bool]] = None,
                 max_connection: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 new_purchase_plan: Optional[pulumi.Input[str]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 public_ip_address: Optional[pulumi.Input[str]] = None,
                 restrict_state: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Gateway resources.
        :param pulumi.Input[int] bandwidth: The maximum public network output bandwidth of VPN gateway (unit: Mbps), the available values include: 5,10,20,50,100,200,500,1000. Default is 5. When charge type is `PREPAID`, bandwidth degradation operation is unsupported.
        :param pulumi.Input[str] cdc_id: CDC instance ID.
        :param pulumi.Input[str] charge_type: Charge Type of the VPN gateway. Valid value: `PREPAID`, `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
        :param pulumi.Input[str] create_time: Create time of the VPN gateway.
        :param pulumi.Input[str] expired_time: Expired time of the VPN gateway when charge type is `PREPAID`.
        :param pulumi.Input[bool] is_address_blocked: Indicates whether ip address is blocked.
        :param pulumi.Input[int] max_connection: Maximum number of connected clients allowed for the SSL VPN gateway. Valid values: [5, 10, 20, 50, 100]. This parameter is only required for SSL VPN gateways.
        :param pulumi.Input[str] name: Name of the VPN gateway. The length of character is limited to 1-60.
        :param pulumi.Input[str] new_purchase_plan: The plan of new purchase. Valid value: `PREPAID_TO_POSTPAID`.
        :param pulumi.Input[int] prepaid_period: Period of instance to be prepaid. Valid value: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `9`, `12`, `24`, `36`. The unit is month. Caution: when this para and renew_flag para are valid, the request means to renew several months more pre-paid period. This para can only be changed on `IPSEC` vpn gateway.
        :param pulumi.Input[str] prepaid_renew_flag: Flag indicates whether to renew or not. Valid value: `NOTIFY_AND_AUTO_RENEW`, `NOTIFY_AND_MANUAL_RENEW`.
        :param pulumi.Input[str] public_ip_address: Public IP of the VPN gateway.
        :param pulumi.Input[str] restrict_state: Restrict state of gateway. Valid value: `PRETECIVELY_ISOLATED`, `NORMAL`.
        :param pulumi.Input[str] state: State of the VPN gateway. Valid value: `PENDING`, `DELETING`, `AVAILABLE`.
        :param pulumi.Input[Mapping[str, Any]] tags: A list of tags used to associate different resources.
        :param pulumi.Input[str] type: Type of gateway instance, Default is `IPSEC`. Valid value: `IPSEC`, `SSL`, `CCN` and `SSL_CCN`.
        :param pulumi.Input[str] vpc_id: ID of the VPC. Required if vpn gateway is not in `CCN` or `SSL_CCN` type, and doesn't make sense for `CCN` or `SSL_CCN` vpn gateway.
        :param pulumi.Input[str] zone: Zone of the VPN gateway.
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if cdc_id is not None:
            pulumi.set(__self__, "cdc_id", cdc_id)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if expired_time is not None:
            pulumi.set(__self__, "expired_time", expired_time)
        if is_address_blocked is not None:
            pulumi.set(__self__, "is_address_blocked", is_address_blocked)
        if max_connection is not None:
            pulumi.set(__self__, "max_connection", max_connection)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if new_purchase_plan is not None:
            pulumi.set(__self__, "new_purchase_plan", new_purchase_plan)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if prepaid_renew_flag is not None:
            pulumi.set(__self__, "prepaid_renew_flag", prepaid_renew_flag)
        if public_ip_address is not None:
            pulumi.set(__self__, "public_ip_address", public_ip_address)
        if restrict_state is not None:
            pulumi.set(__self__, "restrict_state", restrict_state)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum public network output bandwidth of VPN gateway (unit: Mbps), the available values include: 5,10,20,50,100,200,500,1000. Default is 5. When charge type is `PREPAID`, bandwidth degradation operation is unsupported.
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> Optional[pulumi.Input[str]]:
        """
        CDC instance ID.
        """
        return pulumi.get(self, "cdc_id")

    @cdc_id.setter
    def cdc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cdc_id", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Charge Type of the VPN gateway. Valid value: `PREPAID`, `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        Create time of the VPN gateway.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> Optional[pulumi.Input[str]]:
        """
        Expired time of the VPN gateway when charge type is `PREPAID`.
        """
        return pulumi.get(self, "expired_time")

    @expired_time.setter
    def expired_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expired_time", value)

    @property
    @pulumi.getter(name="isAddressBlocked")
    def is_address_blocked(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether ip address is blocked.
        """
        return pulumi.get(self, "is_address_blocked")

    @is_address_blocked.setter
    def is_address_blocked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_address_blocked", value)

    @property
    @pulumi.getter(name="maxConnection")
    def max_connection(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of connected clients allowed for the SSL VPN gateway. Valid values: [5, 10, 20, 50, 100]. This parameter is only required for SSL VPN gateways.
        """
        return pulumi.get(self, "max_connection")

    @max_connection.setter
    def max_connection(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_connection", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the VPN gateway. The length of character is limited to 1-60.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="newPurchasePlan")
    def new_purchase_plan(self) -> Optional[pulumi.Input[str]]:
        """
        The plan of new purchase. Valid value: `PREPAID_TO_POSTPAID`.
        """
        return pulumi.get(self, "new_purchase_plan")

    @new_purchase_plan.setter
    def new_purchase_plan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "new_purchase_plan", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period of instance to be prepaid. Valid value: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `9`, `12`, `24`, `36`. The unit is month. Caution: when this para and renew_flag para are valid, the request means to renew several months more pre-paid period. This para can only be changed on `IPSEC` vpn gateway.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="prepaidRenewFlag")
    def prepaid_renew_flag(self) -> Optional[pulumi.Input[str]]:
        """
        Flag indicates whether to renew or not. Valid value: `NOTIFY_AND_AUTO_RENEW`, `NOTIFY_AND_MANUAL_RENEW`.
        """
        return pulumi.get(self, "prepaid_renew_flag")

    @prepaid_renew_flag.setter
    def prepaid_renew_flag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prepaid_renew_flag", value)

    @property
    @pulumi.getter(name="publicIpAddress")
    def public_ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        Public IP of the VPN gateway.
        """
        return pulumi.get(self, "public_ip_address")

    @public_ip_address.setter
    def public_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip_address", value)

    @property
    @pulumi.getter(name="restrictState")
    def restrict_state(self) -> Optional[pulumi.Input[str]]:
        """
        Restrict state of gateway. Valid value: `PRETECIVELY_ISOLATED`, `NORMAL`.
        """
        return pulumi.get(self, "restrict_state")

    @restrict_state.setter
    def restrict_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restrict_state", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the VPN gateway. Valid value: `PENDING`, `DELETING`, `AVAILABLE`.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of gateway instance, Default is `IPSEC`. Valid value: `IPSEC`, `SSL`, `CCN` and `SSL_CCN`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the VPC. Required if vpn gateway is not in `CCN` or `SSL_CCN` type, and doesn't make sense for `CCN` or `SSL_CCN` vpn gateway.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone of the VPN gateway.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class Gateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 max_connection: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ### VPC SSL VPN gateway

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        my_cgw = tencentcloud.vpn.Gateway("myCgw",
            bandwidth=5,
            tags={
                "test": "test",
            },
            type="SSL",
            vpc_id="vpc-86v957zb",
            zone="ap-guangzhou-3")
        ```
        <!--End PulumiCodeChooser -->

        ### CCN IPSEC VPN gateway

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        my_cgw = tencentcloud.vpn.Gateway("myCgw",
            bandwidth=5,
            tags={
                "test": "test",
            },
            type="IPSEC",
            zone="ap-guangzhou-3")
        ```
        <!--End PulumiCodeChooser -->

        ### CCN SSL VPN gateway

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        my_cgw = tencentcloud.vpn.Gateway("myCgw",
            bandwidth=5,
            tags={
                "test": "test",
            },
            type="SSL_CCN",
            zone="ap-guangzhou-3")
        ```
        <!--End PulumiCodeChooser -->

        ### POSTPAID_BY_HOUR VPN gateway

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        my_cgw = tencentcloud.vpn.Gateway("myCgw",
            bandwidth=5,
            tags={
                "test": "test",
            },
            vpc_id="vpc-dk8zmwuf",
            zone="ap-guangzhou-3")
        ```
        <!--End PulumiCodeChooser -->

        ### PREPAID VPN gateway

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        my_cgw = tencentcloud.vpn.Gateway("myCgw",
            bandwidth=5,
            charge_type="PREPAID",
            prepaid_period=1,
            tags={
                "test": "test",
            },
            vpc_id="vpc-dk8zmwuf",
            zone="ap-guangzhou-3")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        VPN gateway can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpn/gateway:Gateway foo vpngw-8ccsnclt
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] bandwidth: The maximum public network output bandwidth of VPN gateway (unit: Mbps), the available values include: 5,10,20,50,100,200,500,1000. Default is 5. When charge type is `PREPAID`, bandwidth degradation operation is unsupported.
        :param pulumi.Input[str] cdc_id: CDC instance ID.
        :param pulumi.Input[str] charge_type: Charge Type of the VPN gateway. Valid value: `PREPAID`, `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
        :param pulumi.Input[int] max_connection: Maximum number of connected clients allowed for the SSL VPN gateway. Valid values: [5, 10, 20, 50, 100]. This parameter is only required for SSL VPN gateways.
        :param pulumi.Input[str] name: Name of the VPN gateway. The length of character is limited to 1-60.
        :param pulumi.Input[int] prepaid_period: Period of instance to be prepaid. Valid value: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `9`, `12`, `24`, `36`. The unit is month. Caution: when this para and renew_flag para are valid, the request means to renew several months more pre-paid period. This para can only be changed on `IPSEC` vpn gateway.
        :param pulumi.Input[str] prepaid_renew_flag: Flag indicates whether to renew or not. Valid value: `NOTIFY_AND_AUTO_RENEW`, `NOTIFY_AND_MANUAL_RENEW`.
        :param pulumi.Input[Mapping[str, Any]] tags: A list of tags used to associate different resources.
        :param pulumi.Input[str] type: Type of gateway instance, Default is `IPSEC`. Valid value: `IPSEC`, `SSL`, `CCN` and `SSL_CCN`.
        :param pulumi.Input[str] vpc_id: ID of the VPC. Required if vpn gateway is not in `CCN` or `SSL_CCN` type, and doesn't make sense for `CCN` or `SSL_CCN` vpn gateway.
        :param pulumi.Input[str] zone: Zone of the VPN gateway.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[GatewayArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ### VPC SSL VPN gateway

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        my_cgw = tencentcloud.vpn.Gateway("myCgw",
            bandwidth=5,
            tags={
                "test": "test",
            },
            type="SSL",
            vpc_id="vpc-86v957zb",
            zone="ap-guangzhou-3")
        ```
        <!--End PulumiCodeChooser -->

        ### CCN IPSEC VPN gateway

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        my_cgw = tencentcloud.vpn.Gateway("myCgw",
            bandwidth=5,
            tags={
                "test": "test",
            },
            type="IPSEC",
            zone="ap-guangzhou-3")
        ```
        <!--End PulumiCodeChooser -->

        ### CCN SSL VPN gateway

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        my_cgw = tencentcloud.vpn.Gateway("myCgw",
            bandwidth=5,
            tags={
                "test": "test",
            },
            type="SSL_CCN",
            zone="ap-guangzhou-3")
        ```
        <!--End PulumiCodeChooser -->

        ### POSTPAID_BY_HOUR VPN gateway

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        my_cgw = tencentcloud.vpn.Gateway("myCgw",
            bandwidth=5,
            tags={
                "test": "test",
            },
            vpc_id="vpc-dk8zmwuf",
            zone="ap-guangzhou-3")
        ```
        <!--End PulumiCodeChooser -->

        ### PREPAID VPN gateway

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        my_cgw = tencentcloud.vpn.Gateway("myCgw",
            bandwidth=5,
            charge_type="PREPAID",
            prepaid_period=1,
            tags={
                "test": "test",
            },
            vpc_id="vpc-dk8zmwuf",
            zone="ap-guangzhou-3")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        VPN gateway can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Vpn/gateway:Gateway foo vpngw-8ccsnclt
        ```

        :param str resource_name: The name of the resource.
        :param GatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bandwidth: Optional[pulumi.Input[int]] = None,
                 cdc_id: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 max_connection: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GatewayArgs.__new__(GatewayArgs)

            __props__.__dict__["bandwidth"] = bandwidth
            __props__.__dict__["cdc_id"] = cdc_id
            __props__.__dict__["charge_type"] = charge_type
            __props__.__dict__["max_connection"] = max_connection
            __props__.__dict__["name"] = name
            __props__.__dict__["prepaid_period"] = prepaid_period
            __props__.__dict__["prepaid_renew_flag"] = prepaid_renew_flag
            __props__.__dict__["tags"] = tags
            __props__.__dict__["type"] = type
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["zone"] = zone
            __props__.__dict__["create_time"] = None
            __props__.__dict__["expired_time"] = None
            __props__.__dict__["is_address_blocked"] = None
            __props__.__dict__["new_purchase_plan"] = None
            __props__.__dict__["public_ip_address"] = None
            __props__.__dict__["restrict_state"] = None
            __props__.__dict__["state"] = None
        super(Gateway, __self__).__init__(
            'tencentcloud:Vpn/gateway:Gateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bandwidth: Optional[pulumi.Input[int]] = None,
            cdc_id: Optional[pulumi.Input[str]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            expired_time: Optional[pulumi.Input[str]] = None,
            is_address_blocked: Optional[pulumi.Input[bool]] = None,
            max_connection: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            new_purchase_plan: Optional[pulumi.Input[str]] = None,
            prepaid_period: Optional[pulumi.Input[int]] = None,
            prepaid_renew_flag: Optional[pulumi.Input[str]] = None,
            public_ip_address: Optional[pulumi.Input[str]] = None,
            restrict_state: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'Gateway':
        """
        Get an existing Gateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] bandwidth: The maximum public network output bandwidth of VPN gateway (unit: Mbps), the available values include: 5,10,20,50,100,200,500,1000. Default is 5. When charge type is `PREPAID`, bandwidth degradation operation is unsupported.
        :param pulumi.Input[str] cdc_id: CDC instance ID.
        :param pulumi.Input[str] charge_type: Charge Type of the VPN gateway. Valid value: `PREPAID`, `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
        :param pulumi.Input[str] create_time: Create time of the VPN gateway.
        :param pulumi.Input[str] expired_time: Expired time of the VPN gateway when charge type is `PREPAID`.
        :param pulumi.Input[bool] is_address_blocked: Indicates whether ip address is blocked.
        :param pulumi.Input[int] max_connection: Maximum number of connected clients allowed for the SSL VPN gateway. Valid values: [5, 10, 20, 50, 100]. This parameter is only required for SSL VPN gateways.
        :param pulumi.Input[str] name: Name of the VPN gateway. The length of character is limited to 1-60.
        :param pulumi.Input[str] new_purchase_plan: The plan of new purchase. Valid value: `PREPAID_TO_POSTPAID`.
        :param pulumi.Input[int] prepaid_period: Period of instance to be prepaid. Valid value: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `9`, `12`, `24`, `36`. The unit is month. Caution: when this para and renew_flag para are valid, the request means to renew several months more pre-paid period. This para can only be changed on `IPSEC` vpn gateway.
        :param pulumi.Input[str] prepaid_renew_flag: Flag indicates whether to renew or not. Valid value: `NOTIFY_AND_AUTO_RENEW`, `NOTIFY_AND_MANUAL_RENEW`.
        :param pulumi.Input[str] public_ip_address: Public IP of the VPN gateway.
        :param pulumi.Input[str] restrict_state: Restrict state of gateway. Valid value: `PRETECIVELY_ISOLATED`, `NORMAL`.
        :param pulumi.Input[str] state: State of the VPN gateway. Valid value: `PENDING`, `DELETING`, `AVAILABLE`.
        :param pulumi.Input[Mapping[str, Any]] tags: A list of tags used to associate different resources.
        :param pulumi.Input[str] type: Type of gateway instance, Default is `IPSEC`. Valid value: `IPSEC`, `SSL`, `CCN` and `SSL_CCN`.
        :param pulumi.Input[str] vpc_id: ID of the VPC. Required if vpn gateway is not in `CCN` or `SSL_CCN` type, and doesn't make sense for `CCN` or `SSL_CCN` vpn gateway.
        :param pulumi.Input[str] zone: Zone of the VPN gateway.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GatewayState.__new__(_GatewayState)

        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["cdc_id"] = cdc_id
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["expired_time"] = expired_time
        __props__.__dict__["is_address_blocked"] = is_address_blocked
        __props__.__dict__["max_connection"] = max_connection
        __props__.__dict__["name"] = name
        __props__.__dict__["new_purchase_plan"] = new_purchase_plan
        __props__.__dict__["prepaid_period"] = prepaid_period
        __props__.__dict__["prepaid_renew_flag"] = prepaid_renew_flag
        __props__.__dict__["public_ip_address"] = public_ip_address
        __props__.__dict__["restrict_state"] = restrict_state
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["type"] = type
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["zone"] = zone
        return Gateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[Optional[int]]:
        """
        The maximum public network output bandwidth of VPN gateway (unit: Mbps), the available values include: 5,10,20,50,100,200,500,1000. Default is 5. When charge type is `PREPAID`, bandwidth degradation operation is unsupported.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="cdcId")
    def cdc_id(self) -> pulumi.Output[str]:
        """
        CDC instance ID.
        """
        return pulumi.get(self, "cdc_id")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        Charge Type of the VPN gateway. Valid value: `PREPAID`, `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        Create time of the VPN gateway.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> pulumi.Output[str]:
        """
        Expired time of the VPN gateway when charge type is `PREPAID`.
        """
        return pulumi.get(self, "expired_time")

    @property
    @pulumi.getter(name="isAddressBlocked")
    def is_address_blocked(self) -> pulumi.Output[bool]:
        """
        Indicates whether ip address is blocked.
        """
        return pulumi.get(self, "is_address_blocked")

    @property
    @pulumi.getter(name="maxConnection")
    def max_connection(self) -> pulumi.Output[int]:
        """
        Maximum number of connected clients allowed for the SSL VPN gateway. Valid values: [5, 10, 20, 50, 100]. This parameter is only required for SSL VPN gateways.
        """
        return pulumi.get(self, "max_connection")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the VPN gateway. The length of character is limited to 1-60.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="newPurchasePlan")
    def new_purchase_plan(self) -> pulumi.Output[str]:
        """
        The plan of new purchase. Valid value: `PREPAID_TO_POSTPAID`.
        """
        return pulumi.get(self, "new_purchase_plan")

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> pulumi.Output[Optional[int]]:
        """
        Period of instance to be prepaid. Valid value: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `9`, `12`, `24`, `36`. The unit is month. Caution: when this para and renew_flag para are valid, the request means to renew several months more pre-paid period. This para can only be changed on `IPSEC` vpn gateway.
        """
        return pulumi.get(self, "prepaid_period")

    @property
    @pulumi.getter(name="prepaidRenewFlag")
    def prepaid_renew_flag(self) -> pulumi.Output[Optional[str]]:
        """
        Flag indicates whether to renew or not. Valid value: `NOTIFY_AND_AUTO_RENEW`, `NOTIFY_AND_MANUAL_RENEW`.
        """
        return pulumi.get(self, "prepaid_renew_flag")

    @property
    @pulumi.getter(name="publicIpAddress")
    def public_ip_address(self) -> pulumi.Output[str]:
        """
        Public IP of the VPN gateway.
        """
        return pulumi.get(self, "public_ip_address")

    @property
    @pulumi.getter(name="restrictState")
    def restrict_state(self) -> pulumi.Output[str]:
        """
        Restrict state of gateway. Valid value: `PRETECIVELY_ISOLATED`, `NORMAL`.
        """
        return pulumi.get(self, "restrict_state")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        State of the VPN gateway. Valid value: `PENDING`, `DELETING`, `AVAILABLE`.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        A list of tags used to associate different resources.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Type of gateway instance, Default is `IPSEC`. Valid value: `IPSEC`, `SSL`, `CCN` and `SSL_CCN`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the VPC. Required if vpn gateway is not in `CCN` or `SSL_CCN` type, and doesn't make sense for `CCN` or `SSL_CCN` vpn gateway.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        Zone of the VPN gateway.
        """
        return pulumi.get(self, "zone")

