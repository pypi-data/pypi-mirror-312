# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMachinesSimpleFilterResult',
    'GetMachinesSimpleMachineResult',
    'GetMachinesSimpleMachineCloudTagResult',
    'GetMachinesSimpleMachineLicenseOrderResult',
    'GetMachinesSimpleMachineRegionInfoResult',
    'GetMachinesSimpleMachineTagResult',
]

@pulumi.output_type
class GetMachinesSimpleFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str],
                 exact_match: Optional[bool] = None):
        """
        :param str name: Only supported Keywords, Version and TagId.
        :param Sequence[str] values: If `name` is `Keywords`: enter keyword query; If `name` is `Version`: enter PRO_VERSION: Professional Edition | BASIC_VERSION: Basic | Flagship: Flagship | ProtectedMachines: Professional+Flagship | UnFlagship: Non Flagship | PRO_POST_PAY: Professional Edition Pay by Volume | PRO_PRE_PAY: Professional Edition Monthly Package query; If `name` is `TagId`: enter tag ID query.
        :param bool exact_match: exact match. true or false.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Only supported Keywords, Version and TagId.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        If `name` is `Keywords`: enter keyword query; If `name` is `Version`: enter PRO_VERSION: Professional Edition | BASIC_VERSION: Basic | Flagship: Flagship | ProtectedMachines: Professional+Flagship | UnFlagship: Non Flagship | PRO_POST_PAY: Professional Edition Pay by Volume | PRO_PRE_PAY: Professional Edition Monthly Package query; If `name` is `TagId`: enter tag ID query.
        """
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[bool]:
        """
        exact match. true or false.
        """
        return pulumi.get(self, "exact_match")


@pulumi.output_type
class GetMachinesSimpleMachineResult(dict):
    def __init__(__self__, *,
                 cloud_tags: Sequence['outputs.GetMachinesSimpleMachineCloudTagResult'],
                 instance_id: str,
                 instance_state: str,
                 is_pro_version: bool,
                 kernel_version: str,
                 license_orders: Sequence['outputs.GetMachinesSimpleMachineLicenseOrderResult'],
                 machine_ip: str,
                 machine_name: str,
                 machine_os: str,
                 machine_type: str,
                 machine_wan_ip: str,
                 pay_mode: str,
                 project_id: int,
                 protect_type: str,
                 quuid: str,
                 region_infos: Sequence['outputs.GetMachinesSimpleMachineRegionInfoResult'],
                 tags: Sequence['outputs.GetMachinesSimpleMachineTagResult'],
                 uuid: str):
        """
        :param Sequence['GetMachinesSimpleMachineCloudTagArgs'] cloud_tags: Cloud tags detailNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str instance_id: Instance IDNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str instance_state: Instance status.
        :param bool is_pro_version: Paid version or not. true: yes; false: no.
        :param str kernel_version: Core Version.
        :param Sequence['GetMachinesSimpleMachineLicenseOrderArgs'] license_orders: License Order ObjectNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str machine_ip: Machine Internal net IP.
        :param str machine_name: Machine name.
        :param str machine_os: Machine OS System.
        :param str machine_type: Service types. -CVM: Cloud Virtual Machine; -ECM: Edge Computing Machine; -LH: Lighthouse; -Other: Mixed cloud; -ALL: All server types.
        :param str machine_wan_ip: Machine Outer net IP.
        :param str pay_mode: Payment model. POSTPAY: Pay as you go; PREPAY: Monthly subscription.
        :param int project_id: Project ID.
        :param str protect_type: Protection Version. -BASIC_VERSION: Basic Version; -PRO_VERSION: Pro Version -Flagship: Flagship Version; -GENERAL_DISCOUNT: CWP-LH Version.
        :param str quuid: Cloud server sole UUID.
        :param Sequence['GetMachinesSimpleMachineRegionInfoArgs'] region_infos: Region detail.
        :param Sequence['GetMachinesSimpleMachineTagArgs'] tags: Tag.
        :param str uuid: Cwp client sole UUID.
        """
        pulumi.set(__self__, "cloud_tags", cloud_tags)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_state", instance_state)
        pulumi.set(__self__, "is_pro_version", is_pro_version)
        pulumi.set(__self__, "kernel_version", kernel_version)
        pulumi.set(__self__, "license_orders", license_orders)
        pulumi.set(__self__, "machine_ip", machine_ip)
        pulumi.set(__self__, "machine_name", machine_name)
        pulumi.set(__self__, "machine_os", machine_os)
        pulumi.set(__self__, "machine_type", machine_type)
        pulumi.set(__self__, "machine_wan_ip", machine_wan_ip)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "protect_type", protect_type)
        pulumi.set(__self__, "quuid", quuid)
        pulumi.set(__self__, "region_infos", region_infos)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="cloudTags")
    def cloud_tags(self) -> Sequence['outputs.GetMachinesSimpleMachineCloudTagResult']:
        """
        Cloud tags detailNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "cloud_tags")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance IDNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceState")
    def instance_state(self) -> str:
        """
        Instance status.
        """
        return pulumi.get(self, "instance_state")

    @property
    @pulumi.getter(name="isProVersion")
    def is_pro_version(self) -> bool:
        """
        Paid version or not. true: yes; false: no.
        """
        return pulumi.get(self, "is_pro_version")

    @property
    @pulumi.getter(name="kernelVersion")
    def kernel_version(self) -> str:
        """
        Core Version.
        """
        return pulumi.get(self, "kernel_version")

    @property
    @pulumi.getter(name="licenseOrders")
    def license_orders(self) -> Sequence['outputs.GetMachinesSimpleMachineLicenseOrderResult']:
        """
        License Order ObjectNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "license_orders")

    @property
    @pulumi.getter(name="machineIp")
    def machine_ip(self) -> str:
        """
        Machine Internal net IP.
        """
        return pulumi.get(self, "machine_ip")

    @property
    @pulumi.getter(name="machineName")
    def machine_name(self) -> str:
        """
        Machine name.
        """
        return pulumi.get(self, "machine_name")

    @property
    @pulumi.getter(name="machineOs")
    def machine_os(self) -> str:
        """
        Machine OS System.
        """
        return pulumi.get(self, "machine_os")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> str:
        """
        Service types. -CVM: Cloud Virtual Machine; -ECM: Edge Computing Machine; -LH: Lighthouse; -Other: Mixed cloud; -ALL: All server types.
        """
        return pulumi.get(self, "machine_type")

    @property
    @pulumi.getter(name="machineWanIp")
    def machine_wan_ip(self) -> str:
        """
        Machine Outer net IP.
        """
        return pulumi.get(self, "machine_wan_ip")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> str:
        """
        Payment model. POSTPAY: Pay as you go; PREPAY: Monthly subscription.
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="protectType")
    def protect_type(self) -> str:
        """
        Protection Version. -BASIC_VERSION: Basic Version; -PRO_VERSION: Pro Version -Flagship: Flagship Version; -GENERAL_DISCOUNT: CWP-LH Version.
        """
        return pulumi.get(self, "protect_type")

    @property
    @pulumi.getter
    def quuid(self) -> str:
        """
        Cloud server sole UUID.
        """
        return pulumi.get(self, "quuid")

    @property
    @pulumi.getter(name="regionInfos")
    def region_infos(self) -> Sequence['outputs.GetMachinesSimpleMachineRegionInfoResult']:
        """
        Region detail.
        """
        return pulumi.get(self, "region_infos")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetMachinesSimpleMachineTagResult']:
        """
        Tag.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        Cwp client sole UUID.
        """
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetMachinesSimpleMachineCloudTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: Tag key.
        :param str tag_value: Tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        Tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        Tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetMachinesSimpleMachineLicenseOrderResult(dict):
    def __init__(__self__, *,
                 license_id: int,
                 license_type: int,
                 resource_id: str,
                 source_type: int,
                 status: int):
        """
        :param int license_id: License ID.
        :param int license_type: License Types.
        :param str resource_id: Resource ID.
        :param int source_type: Order types.
        :param int status: License Order Status.
        """
        pulumi.set(__self__, "license_id", license_id)
        pulumi.set(__self__, "license_type", license_type)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="licenseId")
    def license_id(self) -> int:
        """
        License ID.
        """
        return pulumi.get(self, "license_id")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> int:
        """
        License Types.
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        Resource ID.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> int:
        """
        Order types.
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        License Order Status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetMachinesSimpleMachineRegionInfoResult(dict):
    def __init__(__self__, *,
                 region: str,
                 region_code: str,
                 region_id: int,
                 region_name: str,
                 region_name_en: str):
        """
        :param str region: Region, Such as ap-guangzhou, ap-shanghai, ap-beijing.
        :param str region_code: Region Code.
        :param int region_id: Region ID.
        :param str region_name: Regional Chinese name.
        :param str region_name_en: Regional English name.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "region_code", region_code)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "region_name_en", region_name_en)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region, Such as ap-guangzhou, ap-shanghai, ap-beijing.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="regionCode")
    def region_code(self) -> str:
        """
        Region Code.
        """
        return pulumi.get(self, "region_code")

    @property
    @pulumi.getter(name="regionId")
    def region_id(self) -> int:
        """
        Region ID.
        """
        return pulumi.get(self, "region_id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        Regional Chinese name.
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="regionNameEn")
    def region_name_en(self) -> str:
        """
        Regional English name.
        """
        return pulumi.get(self, "region_name_en")


@pulumi.output_type
class GetMachinesSimpleMachineTagResult(dict):
    def __init__(__self__, *,
                 name: str,
                 rid: int,
                 tag_id: int):
        """
        :param str name: Only supported Keywords, Version and TagId.
        :param int rid: Relevance tag id.
        :param int tag_id: Tag ID.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rid", rid)
        pulumi.set(__self__, "tag_id", tag_id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Only supported Keywords, Version and TagId.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rid(self) -> int:
        """
        Relevance tag id.
        """
        return pulumi.get(self, "rid")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> int:
        """
        Tag ID.
        """
        return pulumi.get(self, "tag_id")


