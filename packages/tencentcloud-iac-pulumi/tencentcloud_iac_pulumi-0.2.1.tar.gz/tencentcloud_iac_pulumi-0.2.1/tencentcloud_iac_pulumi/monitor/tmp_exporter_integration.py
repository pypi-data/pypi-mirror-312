# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['TmpExporterIntegrationArgs', 'TmpExporterIntegration']

@pulumi.input_type
class TmpExporterIntegrationArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 content: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 kube_type: pulumi.Input[int]):
        """
        The set of arguments for constructing a TmpExporterIntegration resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] content: Integration config.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[str] kind: Type.
        :param pulumi.Input[int] kube_type: Integration config.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "kube_type", kube_type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        Integration config.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Type.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="kubeType")
    def kube_type(self) -> pulumi.Input[int]:
        """
        Integration config.
        """
        return pulumi.get(self, "kube_type")

    @kube_type.setter
    def kube_type(self, value: pulumi.Input[int]):
        pulumi.set(self, "kube_type", value)


@pulumi.input_type
class _TmpExporterIntegrationState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 kube_type: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering TmpExporterIntegration resources.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] content: Integration config.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[str] kind: Type.
        :param pulumi.Input[int] kube_type: Integration config.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if kube_type is not None:
            pulumi.set(__self__, "kube_type", kube_type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Integration config.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Type.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="kubeType")
    def kube_type(self) -> Optional[pulumi.Input[int]]:
        """
        Integration config.
        """
        return pulumi.get(self, "kube_type")

    @kube_type.setter
    def kube_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "kube_type", value)


class TmpExporterIntegration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 kube_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a monitor tmpExporterIntegration

        > **NOTE:** If you only want to upgrade the exporter version with same config, you can set `version` under `instanceSpec` with any value to trigger the change.

        ## Example Usage

        ### Use blackbox-exporter

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        tmp_exporter_integration = tencentcloud.monitor.TmpExporterIntegration("tmpExporterIntegration",
            cluster_id="cls-bmuaukfu",
            content="{\\"name\\":\\"test\\",\\"kind\\":\\"blackbox-exporter\\",\\"spec\\":{\\"instanceSpec\\":{\\"module\\":\\"http_get\\",\\"urls\\":[\\"xx\\"]}}}",
            instance_id="prom-dko9d0nu",
            kind="blackbox-exporter",
            kube_type=1)
        ```
        <!--End PulumiCodeChooser -->

        ### Use es-exporter

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        tmp_exporter_integration_es = tencentcloud.monitor.TmpExporterIntegration("tmpExporterIntegrationEs",
            instance_id=tencentcloud_monitor_tmp_instance["tmpInstance"]["id"],
            kind="es-exporter",
            content=json.dumps({
                "name": "ex-exporter-example",
                "kind": "es-exporter",
                "spec": {
                    "instanceSpec": {
                        "url": "http://127.0.0.1:9123",
                        "labels": {
                            "instance": "es-abcd",
                        },
                        "version": "1.70.1",
                        "user": "fugiat Duis minim",
                        "password": "exercitation cillum velit",
                    },
                    "exporterSpec": {
                        "all": True,
                        "indicesSettings": False,
                        "snapshots": False,
                        "indices": True,
                        "shards": False,
                    },
                },
            }),
            cluster_id="",
            kube_type=3)
        ```
        <!--End PulumiCodeChooser -->

        ### Integration Center: CVM Scrape Job

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.2.0.0/16")
        sub = tencentcloud.subnet.Instance("sub",
            vpc_id=vpc.id,
            cidr_block="10.2.11.0/24",
            availability_zone="ap-guangzhou-3")
        tmp_instance = tencentcloud.monitor.TmpInstance("tmpInstance",
            instance_name="tf-test-tmp",
            vpc_id=vpc.id,
            subnet_id=sub.id,
            data_retention_time=15,
            zone="ap-guangzhou-3",
            tags={
                "createdBy": "terraform",
            })
        # Integration Center: CVM Scrape Job
        tmp_exporter_integration = tencentcloud.monitor.TmpExporterIntegration("tmpExporterIntegration",
            instance_id=tmp_instance.id,
            kind="cvm-http-sd-exporter",
            content=json.dumps({
                "kind": "cvm-http-sd-exporter",
                "spec": {
                    "job": \"\"\"job_name: example-cvm-job-name
        metrics_path: /metrics
        cvm_sd_configs:
        - region: ap-guangzhou
          ports:
            - 9100
          filters:         
            - name: tag:YOUR_TAG_KEY
              values: 
              - YOUR_TAG_VALUE
        relabel_configs: 
          - source_labels: [__meta_cvm_instance_state]
            regex: RUNNING
            action: keep
          - regex: __meta_cvm_tag_(.*)
            replacement: $1
            action: labelmap
          - source_labels: [__meta_cvm_region]
            target_label: region
            action: replace
        \"\"\",
                },
            }),
            kube_type=3,
            cluster_id="")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] content: Integration config.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[str] kind: Type.
        :param pulumi.Input[int] kube_type: Integration config.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TmpExporterIntegrationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a monitor tmpExporterIntegration

        > **NOTE:** If you only want to upgrade the exporter version with same config, you can set `version` under `instanceSpec` with any value to trigger the change.

        ## Example Usage

        ### Use blackbox-exporter

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        tmp_exporter_integration = tencentcloud.monitor.TmpExporterIntegration("tmpExporterIntegration",
            cluster_id="cls-bmuaukfu",
            content="{\\"name\\":\\"test\\",\\"kind\\":\\"blackbox-exporter\\",\\"spec\\":{\\"instanceSpec\\":{\\"module\\":\\"http_get\\",\\"urls\\":[\\"xx\\"]}}}",
            instance_id="prom-dko9d0nu",
            kind="blackbox-exporter",
            kube_type=1)
        ```
        <!--End PulumiCodeChooser -->

        ### Use es-exporter

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        tmp_exporter_integration_es = tencentcloud.monitor.TmpExporterIntegration("tmpExporterIntegrationEs",
            instance_id=tencentcloud_monitor_tmp_instance["tmpInstance"]["id"],
            kind="es-exporter",
            content=json.dumps({
                "name": "ex-exporter-example",
                "kind": "es-exporter",
                "spec": {
                    "instanceSpec": {
                        "url": "http://127.0.0.1:9123",
                        "labels": {
                            "instance": "es-abcd",
                        },
                        "version": "1.70.1",
                        "user": "fugiat Duis minim",
                        "password": "exercitation cillum velit",
                    },
                    "exporterSpec": {
                        "all": True,
                        "indicesSettings": False,
                        "snapshots": False,
                        "indices": True,
                        "shards": False,
                    },
                },
            }),
            cluster_id="",
            kube_type=3)
        ```
        <!--End PulumiCodeChooser -->

        ### Integration Center: CVM Scrape Job

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.2.0.0/16")
        sub = tencentcloud.subnet.Instance("sub",
            vpc_id=vpc.id,
            cidr_block="10.2.11.0/24",
            availability_zone="ap-guangzhou-3")
        tmp_instance = tencentcloud.monitor.TmpInstance("tmpInstance",
            instance_name="tf-test-tmp",
            vpc_id=vpc.id,
            subnet_id=sub.id,
            data_retention_time=15,
            zone="ap-guangzhou-3",
            tags={
                "createdBy": "terraform",
            })
        # Integration Center: CVM Scrape Job
        tmp_exporter_integration = tencentcloud.monitor.TmpExporterIntegration("tmpExporterIntegration",
            instance_id=tmp_instance.id,
            kind="cvm-http-sd-exporter",
            content=json.dumps({
                "kind": "cvm-http-sd-exporter",
                "spec": {
                    "job": \"\"\"job_name: example-cvm-job-name
        metrics_path: /metrics
        cvm_sd_configs:
        - region: ap-guangzhou
          ports:
            - 9100
          filters:         
            - name: tag:YOUR_TAG_KEY
              values: 
              - YOUR_TAG_VALUE
        relabel_configs: 
          - source_labels: [__meta_cvm_instance_state]
            regex: RUNNING
            action: keep
          - regex: __meta_cvm_tag_(.*)
            replacement: $1
            action: labelmap
          - source_labels: [__meta_cvm_region]
            target_label: region
            action: replace
        \"\"\",
                },
            }),
            kube_type=3,
            cluster_id="")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param TmpExporterIntegrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TmpExporterIntegrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 kube_type: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TmpExporterIntegrationArgs.__new__(TmpExporterIntegrationArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if kind is None and not opts.urn:
                raise TypeError("Missing required property 'kind'")
            __props__.__dict__["kind"] = kind
            if kube_type is None and not opts.urn:
                raise TypeError("Missing required property 'kube_type'")
            __props__.__dict__["kube_type"] = kube_type
        super(TmpExporterIntegration, __self__).__init__(
            'tencentcloud:Monitor/tmpExporterIntegration:TmpExporterIntegration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            content: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            kind: Optional[pulumi.Input[str]] = None,
            kube_type: Optional[pulumi.Input[int]] = None) -> 'TmpExporterIntegration':
        """
        Get an existing TmpExporterIntegration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Cluster ID.
        :param pulumi.Input[str] content: Integration config.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[str] kind: Type.
        :param pulumi.Input[int] kube_type: Integration config.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TmpExporterIntegrationState.__new__(_TmpExporterIntegrationState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["content"] = content
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["kind"] = kind
        __props__.__dict__["kube_type"] = kube_type
        return TmpExporterIntegration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Cluster ID.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        Integration config.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[str]:
        """
        Type.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter(name="kubeType")
    def kube_type(self) -> pulumi.Output[int]:
        """
        Integration config.
        """
        return pulumi.get(self, "kube_type")

