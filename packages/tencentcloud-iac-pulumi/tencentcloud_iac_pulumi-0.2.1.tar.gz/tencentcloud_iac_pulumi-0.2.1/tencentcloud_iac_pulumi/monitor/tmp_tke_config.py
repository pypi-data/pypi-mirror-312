# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TmpTkeConfigArgs', 'TmpTkeConfig']

@pulumi.input_type
class TmpTkeConfigArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 cluster_type: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 pod_monitors: Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigPodMonitorArgs']]]] = None,
                 raw_jobs: Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigRawJobArgs']]]] = None,
                 service_monitors: Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigServiceMonitorArgs']]]] = None):
        """
        The set of arguments for constructing a TmpTkeConfig resource.
        :param pulumi.Input[str] cluster_id: ID of cluster.
        :param pulumi.Input[str] cluster_type: Type of cluster.
        :param pulumi.Input[str] instance_id: ID of instance.
        :param pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigPodMonitorArgs']]] pod_monitors: Configuration of the pod monitors.
        :param pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigRawJobArgs']]] raw_jobs: Configuration of the native prometheus job.
        :param pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigServiceMonitorArgs']]] service_monitors: Configuration of the service monitors.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "instance_id", instance_id)
        if pod_monitors is not None:
            pulumi.set(__self__, "pod_monitors", pod_monitors)
        if raw_jobs is not None:
            pulumi.set(__self__, "raw_jobs", raw_jobs)
        if service_monitors is not None:
            pulumi.set(__self__, "service_monitors", service_monitors)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        """
        ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Input[str]:
        """
        Type of cluster.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="podMonitors")
    def pod_monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigPodMonitorArgs']]]]:
        """
        Configuration of the pod monitors.
        """
        return pulumi.get(self, "pod_monitors")

    @pod_monitors.setter
    def pod_monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigPodMonitorArgs']]]]):
        pulumi.set(self, "pod_monitors", value)

    @property
    @pulumi.getter(name="rawJobs")
    def raw_jobs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigRawJobArgs']]]]:
        """
        Configuration of the native prometheus job.
        """
        return pulumi.get(self, "raw_jobs")

    @raw_jobs.setter
    def raw_jobs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigRawJobArgs']]]]):
        pulumi.set(self, "raw_jobs", value)

    @property
    @pulumi.getter(name="serviceMonitors")
    def service_monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigServiceMonitorArgs']]]]:
        """
        Configuration of the service monitors.
        """
        return pulumi.get(self, "service_monitors")

    @service_monitors.setter
    def service_monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigServiceMonitorArgs']]]]):
        pulumi.set(self, "service_monitors", value)


@pulumi.input_type
class _TmpTkeConfigState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 pod_monitors: Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigPodMonitorArgs']]]] = None,
                 raw_jobs: Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigRawJobArgs']]]] = None,
                 service_monitors: Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigServiceMonitorArgs']]]] = None):
        """
        Input properties used for looking up and filtering TmpTkeConfig resources.
        :param pulumi.Input[str] cluster_id: ID of cluster.
        :param pulumi.Input[str] cluster_type: Type of cluster.
        :param pulumi.Input[str] config: Config.
        :param pulumi.Input[str] instance_id: ID of instance.
        :param pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigPodMonitorArgs']]] pod_monitors: Configuration of the pod monitors.
        :param pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigRawJobArgs']]] raw_jobs: Configuration of the native prometheus job.
        :param pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigServiceMonitorArgs']]] service_monitors: Configuration of the service monitors.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if pod_monitors is not None:
            pulumi.set(__self__, "pod_monitors", pod_monitors)
        if raw_jobs is not None:
            pulumi.set(__self__, "raw_jobs", raw_jobs)
        if service_monitors is not None:
            pulumi.set(__self__, "service_monitors", service_monitors)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of cluster.
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        Config.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="podMonitors")
    def pod_monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigPodMonitorArgs']]]]:
        """
        Configuration of the pod monitors.
        """
        return pulumi.get(self, "pod_monitors")

    @pod_monitors.setter
    def pod_monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigPodMonitorArgs']]]]):
        pulumi.set(self, "pod_monitors", value)

    @property
    @pulumi.getter(name="rawJobs")
    def raw_jobs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigRawJobArgs']]]]:
        """
        Configuration of the native prometheus job.
        """
        return pulumi.get(self, "raw_jobs")

    @raw_jobs.setter
    def raw_jobs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigRawJobArgs']]]]):
        pulumi.set(self, "raw_jobs", value)

    @property
    @pulumi.getter(name="serviceMonitors")
    def service_monitors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigServiceMonitorArgs']]]]:
        """
        Configuration of the service monitors.
        """
        return pulumi.get(self, "service_monitors")

    @service_monitors.setter
    def service_monitors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TmpTkeConfigServiceMonitorArgs']]]]):
        pulumi.set(self, "service_monitors", value)


class TmpTkeConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 pod_monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigPodMonitorArgs']]]]] = None,
                 raw_jobs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigRawJobArgs']]]]] = None,
                 service_monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigServiceMonitorArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a tke tmpPrometheusConfig

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: ID of cluster.
        :param pulumi.Input[str] cluster_type: Type of cluster.
        :param pulumi.Input[str] instance_id: ID of instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigPodMonitorArgs']]]] pod_monitors: Configuration of the pod monitors.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigRawJobArgs']]]] raw_jobs: Configuration of the native prometheus job.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigServiceMonitorArgs']]]] service_monitors: Configuration of the service monitors.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TmpTkeConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tke tmpPrometheusConfig

        :param str resource_name: The name of the resource.
        :param TmpTkeConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TmpTkeConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 pod_monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigPodMonitorArgs']]]]] = None,
                 raw_jobs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigRawJobArgs']]]]] = None,
                 service_monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigServiceMonitorArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TmpTkeConfigArgs.__new__(TmpTkeConfigArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            if cluster_type is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_type'")
            __props__.__dict__["cluster_type"] = cluster_type
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["pod_monitors"] = pod_monitors
            __props__.__dict__["raw_jobs"] = raw_jobs
            __props__.__dict__["service_monitors"] = service_monitors
            __props__.__dict__["config"] = None
        super(TmpTkeConfig, __self__).__init__(
            'tencentcloud:Monitor/tmpTkeConfig:TmpTkeConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            cluster_type: Optional[pulumi.Input[str]] = None,
            config: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            pod_monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigPodMonitorArgs']]]]] = None,
            raw_jobs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigRawJobArgs']]]]] = None,
            service_monitors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigServiceMonitorArgs']]]]] = None) -> 'TmpTkeConfig':
        """
        Get an existing TmpTkeConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: ID of cluster.
        :param pulumi.Input[str] cluster_type: Type of cluster.
        :param pulumi.Input[str] config: Config.
        :param pulumi.Input[str] instance_id: ID of instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigPodMonitorArgs']]]] pod_monitors: Configuration of the pod monitors.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigRawJobArgs']]]] raw_jobs: Configuration of the native prometheus job.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TmpTkeConfigServiceMonitorArgs']]]] service_monitors: Configuration of the service monitors.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TmpTkeConfigState.__new__(_TmpTkeConfigState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_type"] = cluster_type
        __props__.__dict__["config"] = config
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["pod_monitors"] = pod_monitors
        __props__.__dict__["raw_jobs"] = raw_jobs
        __props__.__dict__["service_monitors"] = service_monitors
        return TmpTkeConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        ID of cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[str]:
        """
        Type of cluster.
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[str]:
        """
        Config.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="podMonitors")
    def pod_monitors(self) -> pulumi.Output[Optional[Sequence['outputs.TmpTkeConfigPodMonitor']]]:
        """
        Configuration of the pod monitors.
        """
        return pulumi.get(self, "pod_monitors")

    @property
    @pulumi.getter(name="rawJobs")
    def raw_jobs(self) -> pulumi.Output[Optional[Sequence['outputs.TmpTkeConfigRawJob']]]:
        """
        Configuration of the native prometheus job.
        """
        return pulumi.get(self, "raw_jobs")

    @property
    @pulumi.getter(name="serviceMonitors")
    def service_monitors(self) -> pulumi.Output[Optional[Sequence['outputs.TmpTkeConfigServiceMonitor']]]:
        """
        Configuration of the service monitors.
        """
        return pulumi.get(self, "service_monitors")

