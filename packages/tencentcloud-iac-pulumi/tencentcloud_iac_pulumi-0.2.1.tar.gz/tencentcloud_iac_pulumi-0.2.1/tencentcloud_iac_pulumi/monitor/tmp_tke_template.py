# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TmpTkeTemplateArgs', 'TmpTkeTemplate']

@pulumi.input_type
class TmpTkeTemplateArgs:
    def __init__(__self__, *,
                 template: pulumi.Input['TmpTkeTemplateTemplateArgs']):
        """
        The set of arguments for constructing a TmpTkeTemplate resource.
        :param pulumi.Input['TmpTkeTemplateTemplateArgs'] template: Template settings.
        """
        pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input['TmpTkeTemplateTemplateArgs']:
        """
        Template settings.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input['TmpTkeTemplateTemplateArgs']):
        pulumi.set(self, "template", value)


@pulumi.input_type
class _TmpTkeTemplateState:
    def __init__(__self__, *,
                 template: Optional[pulumi.Input['TmpTkeTemplateTemplateArgs']] = None):
        """
        Input properties used for looking up and filtering TmpTkeTemplate resources.
        :param pulumi.Input['TmpTkeTemplateTemplateArgs'] template: Template settings.
        """
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input['TmpTkeTemplateTemplateArgs']]:
        """
        Template settings.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input['TmpTkeTemplateTemplateArgs']]):
        pulumi.set(self, "template", value)


class TmpTkeTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 template: Optional[pulumi.Input[pulumi.InputType['TmpTkeTemplateTemplateArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a tmp tke template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.monitor.TmpTkeTemplate("foo", template=tencentcloud.monitor.TmpTkeTemplateTemplateArgs(
            name="tf-template",
            level="cluster",
            describe="template",
            service_monitors=[tencentcloud.monitor.TmpTkeTemplateTemplateServiceMonitorArgs(
                name="tf-ServiceMonitor",
                config=\"\"\"apiVersion: monitoring.coreos.com/v1
        kind: ServiceMonitor
        metadata:
          name: example-service-monitor
          namespace: monitoring
          labels:
            k8s-app: example-service
        spec:
          selector:
            matchLabels:
              k8s-app: example-service
          namespaceSelector:
            matchNames:
              - default
          endpoints:
          - port: http-metrics
            interval: 30s
            path: /metrics
            scheme: http
            bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
            tlsConfig:
              insecureSkipVerify: true
        \"\"\",
            )],
            pod_monitors=[
                tencentcloud.monitor.TmpTkeTemplateTemplatePodMonitorArgs(
                    name="tf-PodMonitors",
                    config=\"\"\"apiVersion: monitoring.coreos.com/v1
        kind: PodMonitor
        metadata:
          name: example-pod-monitor
          namespace: monitoring
          labels:
            k8s-app: example-pod
        spec:
          selector:
            matchLabels:
              k8s-app: example-pod
          namespaceSelector:
            matchNames:
              - default
          podMetricsEndpoints:
          - port: http-metrics
            interval: 30s
            path: /metrics
            scheme: http
            bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
            tlsConfig:
              insecureSkipVerify: true
        \"\"\",
                ),
                tencentcloud.monitor.TmpTkeTemplateTemplatePodMonitorArgs(
                    name="tf-RawJobs",
                    config=\"\"\"scrape_configs:
          - job_name: 'example-job'
            scrape_interval: 30s
            static_configs:
              - targets: ['example-service.default.svc.cluster.local:8080']
            metrics_path: /metrics
            scheme: http
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              insecure_skip_verify: true
        \"\"\",
                ),
            ],
        ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['TmpTkeTemplateTemplateArgs']] template: Template settings.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TmpTkeTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tmp tke template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.monitor.TmpTkeTemplate("foo", template=tencentcloud.monitor.TmpTkeTemplateTemplateArgs(
            name="tf-template",
            level="cluster",
            describe="template",
            service_monitors=[tencentcloud.monitor.TmpTkeTemplateTemplateServiceMonitorArgs(
                name="tf-ServiceMonitor",
                config=\"\"\"apiVersion: monitoring.coreos.com/v1
        kind: ServiceMonitor
        metadata:
          name: example-service-monitor
          namespace: monitoring
          labels:
            k8s-app: example-service
        spec:
          selector:
            matchLabels:
              k8s-app: example-service
          namespaceSelector:
            matchNames:
              - default
          endpoints:
          - port: http-metrics
            interval: 30s
            path: /metrics
            scheme: http
            bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
            tlsConfig:
              insecureSkipVerify: true
        \"\"\",
            )],
            pod_monitors=[
                tencentcloud.monitor.TmpTkeTemplateTemplatePodMonitorArgs(
                    name="tf-PodMonitors",
                    config=\"\"\"apiVersion: monitoring.coreos.com/v1
        kind: PodMonitor
        metadata:
          name: example-pod-monitor
          namespace: monitoring
          labels:
            k8s-app: example-pod
        spec:
          selector:
            matchLabels:
              k8s-app: example-pod
          namespaceSelector:
            matchNames:
              - default
          podMetricsEndpoints:
          - port: http-metrics
            interval: 30s
            path: /metrics
            scheme: http
            bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
            tlsConfig:
              insecureSkipVerify: true
        \"\"\",
                ),
                tencentcloud.monitor.TmpTkeTemplateTemplatePodMonitorArgs(
                    name="tf-RawJobs",
                    config=\"\"\"scrape_configs:
          - job_name: 'example-job'
            scrape_interval: 30s
            static_configs:
              - targets: ['example-service.default.svc.cluster.local:8080']
            metrics_path: /metrics
            scheme: http
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              insecure_skip_verify: true
        \"\"\",
                ),
            ],
        ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param TmpTkeTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TmpTkeTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 template: Optional[pulumi.Input[pulumi.InputType['TmpTkeTemplateTemplateArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TmpTkeTemplateArgs.__new__(TmpTkeTemplateArgs)

            if template is None and not opts.urn:
                raise TypeError("Missing required property 'template'")
            __props__.__dict__["template"] = template
        super(TmpTkeTemplate, __self__).__init__(
            'tencentcloud:Monitor/tmpTkeTemplate:TmpTkeTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            template: Optional[pulumi.Input[pulumi.InputType['TmpTkeTemplateTemplateArgs']]] = None) -> 'TmpTkeTemplate':
        """
        Get an existing TmpTkeTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['TmpTkeTemplateTemplateArgs']] template: Template settings.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TmpTkeTemplateState.__new__(_TmpTkeTemplateState)

        __props__.__dict__["template"] = template
        return TmpTkeTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Output['outputs.TmpTkeTemplateTemplate']:
        """
        Template settings.
        """
        return pulumi.get(self, "template")

