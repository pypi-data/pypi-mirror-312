# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAlarmMetricResult',
    'AwaitableGetAlarmMetricResult',
    'get_alarm_metric',
    'get_alarm_metric_output',
]

@pulumi.output_type
class GetAlarmMetricResult:
    """
    A collection of values returned by getAlarmMetric.
    """
    def __init__(__self__, id=None, metrics=None, module=None, monitor_type=None, namespace=None, result_output_file=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metrics and not isinstance(metrics, list):
            raise TypeError("Expected argument 'metrics' to be a list")
        pulumi.set(__self__, "metrics", metrics)
        if module and not isinstance(module, str):
            raise TypeError("Expected argument 'module' to be a str")
        pulumi.set(__self__, "module", module)
        if monitor_type and not isinstance(monitor_type, str):
            raise TypeError("Expected argument 'monitor_type' to be a str")
        pulumi.set(__self__, "monitor_type", monitor_type)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metrics(self) -> Sequence['outputs.GetAlarmMetricMetricResult']:
        """
        Alarm indicator list.
        """
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter
    def module(self) -> str:
        return pulumi.get(self, "module")

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> str:
        return pulumi.get(self, "monitor_type")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Alarm strategy type.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetAlarmMetricResult(GetAlarmMetricResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlarmMetricResult(
            id=self.id,
            metrics=self.metrics,
            module=self.module,
            monitor_type=self.monitor_type,
            namespace=self.namespace,
            result_output_file=self.result_output_file)


def get_alarm_metric(module: Optional[str] = None,
                     monitor_type: Optional[str] = None,
                     namespace: Optional[str] = None,
                     result_output_file: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlarmMetricResult:
    """
    Use this data source to query detailed information of monitor alarm_metric

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    alarm_metric = tencentcloud.Monitor.get_alarm_metric(module="monitor",
        monitor_type="Monitoring",
        namespace="cvm_device")
    ```
    <!--End PulumiCodeChooser -->


    :param str module: Fixed value, as `monitor`.
    :param str monitor_type: Monitoring Type Filter MT_QCE=Cloud Product Monitoring.
    :param str namespace: Alarm policy type, obtained from DescribeAllNamespaces, such as cvm_device.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['module'] = module
    __args__['monitorType'] = monitor_type
    __args__['namespace'] = namespace
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Monitor/getAlarmMetric:getAlarmMetric', __args__, opts=opts, typ=GetAlarmMetricResult).value

    return AwaitableGetAlarmMetricResult(
        id=pulumi.get(__ret__, 'id'),
        metrics=pulumi.get(__ret__, 'metrics'),
        module=pulumi.get(__ret__, 'module'),
        monitor_type=pulumi.get(__ret__, 'monitor_type'),
        namespace=pulumi.get(__ret__, 'namespace'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_alarm_metric)
def get_alarm_metric_output(module: Optional[pulumi.Input[str]] = None,
                            monitor_type: Optional[pulumi.Input[str]] = None,
                            namespace: Optional[pulumi.Input[str]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAlarmMetricResult]:
    """
    Use this data source to query detailed information of monitor alarm_metric

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    alarm_metric = tencentcloud.Monitor.get_alarm_metric(module="monitor",
        monitor_type="Monitoring",
        namespace="cvm_device")
    ```
    <!--End PulumiCodeChooser -->


    :param str module: Fixed value, as `monitor`.
    :param str monitor_type: Monitoring Type Filter MT_QCE=Cloud Product Monitoring.
    :param str namespace: Alarm policy type, obtained from DescribeAllNamespaces, such as cvm_device.
    :param str result_output_file: Used to save results.
    """
    ...
