# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAlarmMonitorTypeResult',
    'AwaitableGetAlarmMonitorTypeResult',
    'get_alarm_monitor_type',
    'get_alarm_monitor_type_output',
]

@pulumi.output_type
class GetAlarmMonitorTypeResult:
    """
    A collection of values returned by getAlarmMonitorType.
    """
    def __init__(__self__, id=None, monitor_type_infos=None, monitor_types=None, result_output_file=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if monitor_type_infos and not isinstance(monitor_type_infos, list):
            raise TypeError("Expected argument 'monitor_type_infos' to be a list")
        pulumi.set(__self__, "monitor_type_infos", monitor_type_infos)
        if monitor_types and not isinstance(monitor_types, list):
            raise TypeError("Expected argument 'monitor_types' to be a list")
        pulumi.set(__self__, "monitor_types", monitor_types)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="monitorTypeInfos")
    def monitor_type_infos(self) -> Sequence['outputs.GetAlarmMonitorTypeMonitorTypeInfoResult']:
        """
        Monitoring type details.
        """
        return pulumi.get(self, "monitor_type_infos")

    @property
    @pulumi.getter(name="monitorTypes")
    def monitor_types(self) -> Sequence[str]:
        """
        Monitoring type, cloud product monitoring is MT_ QCE.
        """
        return pulumi.get(self, "monitor_types")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetAlarmMonitorTypeResult(GetAlarmMonitorTypeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlarmMonitorTypeResult(
            id=self.id,
            monitor_type_infos=self.monitor_type_infos,
            monitor_types=self.monitor_types,
            result_output_file=self.result_output_file)


def get_alarm_monitor_type(result_output_file: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlarmMonitorTypeResult:
    """
    Use this data source to query detailed information of monitor alarm_monitor_type

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    alarm_monitor_type = tencentcloud.Monitor.get_alarm_monitor_type()
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Monitor/getAlarmMonitorType:getAlarmMonitorType', __args__, opts=opts, typ=GetAlarmMonitorTypeResult).value

    return AwaitableGetAlarmMonitorTypeResult(
        id=pulumi.get(__ret__, 'id'),
        monitor_type_infos=pulumi.get(__ret__, 'monitor_type_infos'),
        monitor_types=pulumi.get(__ret__, 'monitor_types'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_alarm_monitor_type)
def get_alarm_monitor_type_output(result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAlarmMonitorTypeResult]:
    """
    Use this data source to query detailed information of monitor alarm_monitor_type

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    alarm_monitor_type = tencentcloud.Monitor.get_alarm_monitor_type()
    ```
    <!--End PulumiCodeChooser -->


    :param str result_output_file: Used to save results.
    """
    ...
