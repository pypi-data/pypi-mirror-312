# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAlarmConditionsTemplateResult',
    'AwaitableGetAlarmConditionsTemplateResult',
    'get_alarm_conditions_template',
    'get_alarm_conditions_template_output',
]

@pulumi.output_type
class GetAlarmConditionsTemplateResult:
    """
    A collection of values returned by getAlarmConditionsTemplate.
    """
    def __init__(__self__, group_id=None, group_name=None, id=None, module=None, policy_count_order=None, result_output_file=None, template_group_lists=None, update_time_order=None, view_name=None):
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if group_name and not isinstance(group_name, str):
            raise TypeError("Expected argument 'group_name' to be a str")
        pulumi.set(__self__, "group_name", group_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if module and not isinstance(module, str):
            raise TypeError("Expected argument 'module' to be a str")
        pulumi.set(__self__, "module", module)
        if policy_count_order and not isinstance(policy_count_order, str):
            raise TypeError("Expected argument 'policy_count_order' to be a str")
        pulumi.set(__self__, "policy_count_order", policy_count_order)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if template_group_lists and not isinstance(template_group_lists, list):
            raise TypeError("Expected argument 'template_group_lists' to be a list")
        pulumi.set(__self__, "template_group_lists", template_group_lists)
        if update_time_order and not isinstance(update_time_order, str):
            raise TypeError("Expected argument 'update_time_order' to be a str")
        pulumi.set(__self__, "update_time_order", update_time_order)
        if view_name and not isinstance(view_name, str):
            raise TypeError("Expected argument 'view_name' to be a str")
        pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        """
        Alarm Policy Group ID.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        """
        Alarm Policy Group Name.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def module(self) -> str:
        return pulumi.get(self, "module")

    @property
    @pulumi.getter(name="policyCountOrder")
    def policy_count_order(self) -> Optional[str]:
        return pulumi.get(self, "policy_count_order")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="templateGroupLists")
    def template_group_lists(self) -> Sequence['outputs.GetAlarmConditionsTemplateTemplateGroupListResult']:
        """
        Template List.
        """
        return pulumi.get(self, "template_group_lists")

    @property
    @pulumi.getter(name="updateTimeOrder")
    def update_time_order(self) -> Optional[str]:
        return pulumi.get(self, "update_time_order")

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> Optional[str]:
        """
        View.
        """
        return pulumi.get(self, "view_name")


class AwaitableGetAlarmConditionsTemplateResult(GetAlarmConditionsTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlarmConditionsTemplateResult(
            group_id=self.group_id,
            group_name=self.group_name,
            id=self.id,
            module=self.module,
            policy_count_order=self.policy_count_order,
            result_output_file=self.result_output_file,
            template_group_lists=self.template_group_lists,
            update_time_order=self.update_time_order,
            view_name=self.view_name)


def get_alarm_conditions_template(group_id: Optional[str] = None,
                                  group_name: Optional[str] = None,
                                  module: Optional[str] = None,
                                  policy_count_order: Optional[str] = None,
                                  result_output_file: Optional[str] = None,
                                  update_time_order: Optional[str] = None,
                                  view_name: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlarmConditionsTemplateResult:
    """
    Use this data source to query detailed information of monitor alarm_conditions_template

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    alarm_conditions_template = tencentcloud.Monitor.get_alarm_conditions_template(group_id="7803070",
        group_name="keep-template",
        module="monitor",
        policy_count_order="asc=ascending",
        update_time_order="desc=descending",
        view_name="cvm_device")
    ```
    <!--End PulumiCodeChooser -->


    :param str group_id: Filter queries based on trigger condition template ID.
    :param str group_name: Filter queries based on trigger condition template names.
    :param str module: Fixed value, as&amp;amp;#39; monitor &amp;amp;#39;.
    :param str policy_count_order: Specify the sorting method based on the number of binding policies, asc=ascending, desc=descending.
    :param str result_output_file: Used to save results.
    :param str update_time_order: Specify the sorting method by update time, asc=ascending, desc=descending.
    :param str view_name: View name, composed of DescribeAllNamespacesObtain. For cloud product monitoring, retrieve the QceNamespacesNew. N.ID parameter from the interface, such as cvm_ Device.
    """
    __args__ = dict()
    __args__['groupId'] = group_id
    __args__['groupName'] = group_name
    __args__['module'] = module
    __args__['policyCountOrder'] = policy_count_order
    __args__['resultOutputFile'] = result_output_file
    __args__['updateTimeOrder'] = update_time_order
    __args__['viewName'] = view_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Monitor/getAlarmConditionsTemplate:getAlarmConditionsTemplate', __args__, opts=opts, typ=GetAlarmConditionsTemplateResult).value

    return AwaitableGetAlarmConditionsTemplateResult(
        group_id=pulumi.get(__ret__, 'group_id'),
        group_name=pulumi.get(__ret__, 'group_name'),
        id=pulumi.get(__ret__, 'id'),
        module=pulumi.get(__ret__, 'module'),
        policy_count_order=pulumi.get(__ret__, 'policy_count_order'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        template_group_lists=pulumi.get(__ret__, 'template_group_lists'),
        update_time_order=pulumi.get(__ret__, 'update_time_order'),
        view_name=pulumi.get(__ret__, 'view_name'))


@_utilities.lift_output_func(get_alarm_conditions_template)
def get_alarm_conditions_template_output(group_id: Optional[pulumi.Input[Optional[str]]] = None,
                                         group_name: Optional[pulumi.Input[Optional[str]]] = None,
                                         module: Optional[pulumi.Input[str]] = None,
                                         policy_count_order: Optional[pulumi.Input[Optional[str]]] = None,
                                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                         update_time_order: Optional[pulumi.Input[Optional[str]]] = None,
                                         view_name: Optional[pulumi.Input[Optional[str]]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAlarmConditionsTemplateResult]:
    """
    Use this data source to query detailed information of monitor alarm_conditions_template

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    alarm_conditions_template = tencentcloud.Monitor.get_alarm_conditions_template(group_id="7803070",
        group_name="keep-template",
        module="monitor",
        policy_count_order="asc=ascending",
        update_time_order="desc=descending",
        view_name="cvm_device")
    ```
    <!--End PulumiCodeChooser -->


    :param str group_id: Filter queries based on trigger condition template ID.
    :param str group_name: Filter queries based on trigger condition template names.
    :param str module: Fixed value, as&amp;amp;#39; monitor &amp;amp;#39;.
    :param str policy_count_order: Specify the sorting method based on the number of binding policies, asc=ascending, desc=descending.
    :param str result_output_file: Used to save results.
    :param str update_time_order: Specify the sorting method by update time, asc=ascending, desc=descending.
    :param str view_name: View name, composed of DescribeAllNamespacesObtain. For cloud product monitoring, retrieve the QceNamespacesNew. N.ID parameter from the interface, such as cvm_ Device.
    """
    ...
