# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GrafanaWhitelistConfigArgs', 'GrafanaWhitelistConfig']

@pulumi.input_type
class GrafanaWhitelistConfigArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a GrafanaWhitelistConfig resource.
        :param pulumi.Input[str] instance_id: Grafana instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] whitelists: The addresses in the whitelist.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if whitelists is not None:
            pulumi.set(__self__, "whitelists", whitelists)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Grafana instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def whitelists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The addresses in the whitelist.
        """
        return pulumi.get(self, "whitelists")

    @whitelists.setter
    def whitelists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "whitelists", value)


@pulumi.input_type
class _GrafanaWhitelistConfigState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering GrafanaWhitelistConfig resources.
        :param pulumi.Input[str] instance_id: Grafana instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] whitelists: The addresses in the whitelist.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if whitelists is not None:
            pulumi.set(__self__, "whitelists", whitelists)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Grafana instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def whitelists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The addresses in the whitelist.
        """
        return pulumi.get(self, "whitelists")

    @whitelists.setter
    def whitelists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "whitelists", value)


class GrafanaWhitelistConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a monitor grafana_whitelist_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        grafana_whitelist_config = tencentcloud.monitor.GrafanaWhitelistConfig("grafanaWhitelistConfig",
            instance_id="grafana-dp2hnnfa",
            whitelists=[
                "10.1.1.1",
                "10.1.1.2",
                "10.1.1.3",
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        monitor grafana_whitelist_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Monitor/grafanaWhitelistConfig:GrafanaWhitelistConfig grafana_whitelist_config instance_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Grafana instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] whitelists: The addresses in the whitelist.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GrafanaWhitelistConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a monitor grafana_whitelist_config

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        grafana_whitelist_config = tencentcloud.monitor.GrafanaWhitelistConfig("grafanaWhitelistConfig",
            instance_id="grafana-dp2hnnfa",
            whitelists=[
                "10.1.1.1",
                "10.1.1.2",
                "10.1.1.3",
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        monitor grafana_whitelist_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Monitor/grafanaWhitelistConfig:GrafanaWhitelistConfig grafana_whitelist_config instance_id
        ```

        :param str resource_name: The name of the resource.
        :param GrafanaWhitelistConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GrafanaWhitelistConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GrafanaWhitelistConfigArgs.__new__(GrafanaWhitelistConfigArgs)

            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["whitelists"] = whitelists
        super(GrafanaWhitelistConfig, __self__).__init__(
            'tencentcloud:Monitor/grafanaWhitelistConfig:GrafanaWhitelistConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'GrafanaWhitelistConfig':
        """
        Get an existing GrafanaWhitelistConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] instance_id: Grafana instance ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] whitelists: The addresses in the whitelist.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GrafanaWhitelistConfigState.__new__(_GrafanaWhitelistConfigState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["whitelists"] = whitelists
        return GrafanaWhitelistConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Grafana instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def whitelists(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The addresses in the whitelist.
        """
        return pulumi.get(self, "whitelists")

