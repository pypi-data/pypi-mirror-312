# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetDataResult',
    'AwaitableGetDataResult',
    'get_data',
    'get_data_output',
]

@pulumi.output_type
class GetDataResult:
    """
    A collection of values returned by getData.
    """
    def __init__(__self__, dimensions=None, end_time=None, id=None, lists=None, metric_name=None, namespace=None, period=None, result_output_file=None, start_time=None):
        if dimensions and not isinstance(dimensions, list):
            raise TypeError("Expected argument 'dimensions' to be a list")
        pulumi.set(__self__, "dimensions", dimensions)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if metric_name and not isinstance(metric_name, str):
            raise TypeError("Expected argument 'metric_name' to be a str")
        pulumi.set(__self__, "metric_name", metric_name)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if period and not isinstance(period, int):
            raise TypeError("Expected argument 'period' to be a int")
        pulumi.set(__self__, "period", period)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence['outputs.GetDataDimensionResult']:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetDataListResult']:
        """
        A list data point. Each element contains the following attributes:
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def period(self) -> Optional[int]:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


class AwaitableGetDataResult(GetDataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataResult(
            dimensions=self.dimensions,
            end_time=self.end_time,
            id=self.id,
            lists=self.lists,
            metric_name=self.metric_name,
            namespace=self.namespace,
            period=self.period,
            result_output_file=self.result_output_file,
            start_time=self.start_time)


def get_data(dimensions: Optional[Sequence[pulumi.InputType['GetDataDimensionArgs']]] = None,
             end_time: Optional[str] = None,
             metric_name: Optional[str] = None,
             namespace: Optional[str] = None,
             period: Optional[int] = None,
             result_output_file: Optional[str] = None,
             start_time: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataResult:
    """
    Use this data source to query monitor data. for complex queries, use (https://github.com/tencentyun/tencentcloud-exporter)

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    instances = tencentcloud.Instances.get_instance()
    cvm_monitor_data = tencentcloud.Monitor.get_data(namespace="QCE/CVM",
        metric_name="CPUUsage",
        dimensions=[tencentcloud.monitor.GetDataDimensionArgs(
            name="InstanceId",
            value=instances.instance_lists[0].instance_id,
        )],
        period=300,
        start_time="2020-04-28T18:45:00+08:00",
        end_time="2020-04-28T19:00:00+08:00")
    cos_monitor_data = tencentcloud.Monitor.get_data(namespace="QCE/COS",
        metric_name="InternetTraffic",
        dimensions=[
            tencentcloud.monitor.GetDataDimensionArgs(
                name="appid",
                value="1258798060",
            ),
            tencentcloud.monitor.GetDataDimensionArgs(
                name="bucket",
                value="test-1258798060",
            ),
        ],
        period=300,
        start_time="2020-04-28T18:30:00+08:00",
        end_time="2020-04-28T19:00:00+08:00")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetDataDimensionArgs']] dimensions: Dimensional composition of instance objects.
    :param str end_time: End time for this query, eg:`2018-09-22T20:00:00+08:00`.
    :param str metric_name: Metric name, please refer to the documentation of monitor interface of each product.
    :param str namespace: Namespace of each cloud product in monitor system, refer to `data.tencentcloud_monitor_product_namespace`.
    :param int period: Statistical period.
    :param str result_output_file: Used to store results.
    :param str start_time: Start time for this query, eg:`2018-09-22T19:51:23+08:00`.
    """
    __args__ = dict()
    __args__['dimensions'] = dimensions
    __args__['endTime'] = end_time
    __args__['metricName'] = metric_name
    __args__['namespace'] = namespace
    __args__['period'] = period
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Monitor/getData:getData', __args__, opts=opts, typ=GetDataResult).value

    return AwaitableGetDataResult(
        dimensions=pulumi.get(__ret__, 'dimensions'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        lists=pulumi.get(__ret__, 'lists'),
        metric_name=pulumi.get(__ret__, 'metric_name'),
        namespace=pulumi.get(__ret__, 'namespace'),
        period=pulumi.get(__ret__, 'period'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_data)
def get_data_output(dimensions: Optional[pulumi.Input[Sequence[pulumi.InputType['GetDataDimensionArgs']]]] = None,
                    end_time: Optional[pulumi.Input[str]] = None,
                    metric_name: Optional[pulumi.Input[str]] = None,
                    namespace: Optional[pulumi.Input[str]] = None,
                    period: Optional[pulumi.Input[Optional[int]]] = None,
                    result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                    start_time: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDataResult]:
    """
    Use this data source to query monitor data. for complex queries, use (https://github.com/tencentyun/tencentcloud-exporter)

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    instances = tencentcloud.Instances.get_instance()
    cvm_monitor_data = tencentcloud.Monitor.get_data(namespace="QCE/CVM",
        metric_name="CPUUsage",
        dimensions=[tencentcloud.monitor.GetDataDimensionArgs(
            name="InstanceId",
            value=instances.instance_lists[0].instance_id,
        )],
        period=300,
        start_time="2020-04-28T18:45:00+08:00",
        end_time="2020-04-28T19:00:00+08:00")
    cos_monitor_data = tencentcloud.Monitor.get_data(namespace="QCE/COS",
        metric_name="InternetTraffic",
        dimensions=[
            tencentcloud.monitor.GetDataDimensionArgs(
                name="appid",
                value="1258798060",
            ),
            tencentcloud.monitor.GetDataDimensionArgs(
                name="bucket",
                value="test-1258798060",
            ),
        ],
        period=300,
        start_time="2020-04-28T18:30:00+08:00",
        end_time="2020-04-28T19:00:00+08:00")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetDataDimensionArgs']] dimensions: Dimensional composition of instance objects.
    :param str end_time: End time for this query, eg:`2018-09-22T20:00:00+08:00`.
    :param str metric_name: Metric name, please refer to the documentation of monitor interface of each product.
    :param str namespace: Namespace of each cloud product in monitor system, refer to `data.tencentcloud_monitor_product_namespace`.
    :param int period: Statistical period.
    :param str result_output_file: Used to store results.
    :param str start_time: Start time for this query, eg:`2018-09-22T19:51:23+08:00`.
    """
    ...
