# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TmpTkeTemplateAttachmentArgs', 'TmpTkeTemplateAttachment']

@pulumi.input_type
class TmpTkeTemplateAttachmentArgs:
    def __init__(__self__, *,
                 targets: pulumi.Input['TmpTkeTemplateAttachmentTargetsArgs'],
                 template_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a TmpTkeTemplateAttachment resource.
        :param pulumi.Input['TmpTkeTemplateAttachmentTargetsArgs'] targets: Sync target details.
        :param pulumi.Input[str] template_id: The ID of the template, which is used for the outgoing reference.
        """
        pulumi.set(__self__, "targets", targets)
        pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def targets(self) -> pulumi.Input['TmpTkeTemplateAttachmentTargetsArgs']:
        """
        Sync target details.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: pulumi.Input['TmpTkeTemplateAttachmentTargetsArgs']):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Input[str]:
        """
        The ID of the template, which is used for the outgoing reference.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_id", value)


@pulumi.input_type
class _TmpTkeTemplateAttachmentState:
    def __init__(__self__, *,
                 targets: Optional[pulumi.Input['TmpTkeTemplateAttachmentTargetsArgs']] = None,
                 template_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering TmpTkeTemplateAttachment resources.
        :param pulumi.Input['TmpTkeTemplateAttachmentTargetsArgs'] targets: Sync target details.
        :param pulumi.Input[str] template_id: The ID of the template, which is used for the outgoing reference.
        """
        if targets is not None:
            pulumi.set(__self__, "targets", targets)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def targets(self) -> Optional[pulumi.Input['TmpTkeTemplateAttachmentTargetsArgs']]:
        """
        Sync target details.
        """
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: Optional[pulumi.Input['TmpTkeTemplateAttachmentTargetsArgs']]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the template, which is used for the outgoing reference.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_id", value)


class TmpTkeTemplateAttachment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 targets: Optional[pulumi.Input[pulumi.InputType['TmpTkeTemplateAttachmentTargetsArgs']]] = None,
                 template_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a tmp tke template attachment

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['TmpTkeTemplateAttachmentTargetsArgs']] targets: Sync target details.
        :param pulumi.Input[str] template_id: The ID of the template, which is used for the outgoing reference.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TmpTkeTemplateAttachmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a tmp tke template attachment

        :param str resource_name: The name of the resource.
        :param TmpTkeTemplateAttachmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TmpTkeTemplateAttachmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 targets: Optional[pulumi.Input[pulumi.InputType['TmpTkeTemplateAttachmentTargetsArgs']]] = None,
                 template_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TmpTkeTemplateAttachmentArgs.__new__(TmpTkeTemplateAttachmentArgs)

            if targets is None and not opts.urn:
                raise TypeError("Missing required property 'targets'")
            __props__.__dict__["targets"] = targets
            if template_id is None and not opts.urn:
                raise TypeError("Missing required property 'template_id'")
            __props__.__dict__["template_id"] = template_id
        super(TmpTkeTemplateAttachment, __self__).__init__(
            'tencentcloud:Monitor/tmpTkeTemplateAttachment:TmpTkeTemplateAttachment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            targets: Optional[pulumi.Input[pulumi.InputType['TmpTkeTemplateAttachmentTargetsArgs']]] = None,
            template_id: Optional[pulumi.Input[str]] = None) -> 'TmpTkeTemplateAttachment':
        """
        Get an existing TmpTkeTemplateAttachment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['TmpTkeTemplateAttachmentTargetsArgs']] targets: Sync target details.
        :param pulumi.Input[str] template_id: The ID of the template, which is used for the outgoing reference.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TmpTkeTemplateAttachmentState.__new__(_TmpTkeTemplateAttachmentState)

        __props__.__dict__["targets"] = targets
        __props__.__dict__["template_id"] = template_id
        return TmpTkeTemplateAttachment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def targets(self) -> pulumi.Output['outputs.TmpTkeTemplateAttachmentTargets']:
        """
        Sync target details.
        """
        return pulumi.get(self, "targets")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[str]:
        """
        The ID of the template, which is used for the outgoing reference.
        """
        return pulumi.get(self, "template_id")

