# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAlarmHistoryResult',
    'AwaitableGetAlarmHistoryResult',
    'get_alarm_history',
    'get_alarm_history_output',
]

@pulumi.output_type
class GetAlarmHistoryResult:
    """
    A collection of values returned by getAlarmHistory.
    """
    def __init__(__self__, alarm_levels=None, alarm_object=None, alarm_statuses=None, content=None, end_time=None, histories=None, id=None, instance_group_ids=None, metric_names=None, module=None, monitor_types=None, namespaces=None, order=None, policy_ids=None, policy_name=None, project_ids=None, receiver_groups=None, receiver_uids=None, result_output_file=None, start_time=None):
        if alarm_levels and not isinstance(alarm_levels, list):
            raise TypeError("Expected argument 'alarm_levels' to be a list")
        pulumi.set(__self__, "alarm_levels", alarm_levels)
        if alarm_object and not isinstance(alarm_object, str):
            raise TypeError("Expected argument 'alarm_object' to be a str")
        pulumi.set(__self__, "alarm_object", alarm_object)
        if alarm_statuses and not isinstance(alarm_statuses, list):
            raise TypeError("Expected argument 'alarm_statuses' to be a list")
        pulumi.set(__self__, "alarm_statuses", alarm_statuses)
        if content and not isinstance(content, str):
            raise TypeError("Expected argument 'content' to be a str")
        pulumi.set(__self__, "content", content)
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if histories and not isinstance(histories, list):
            raise TypeError("Expected argument 'histories' to be a list")
        pulumi.set(__self__, "histories", histories)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_group_ids and not isinstance(instance_group_ids, list):
            raise TypeError("Expected argument 'instance_group_ids' to be a list")
        pulumi.set(__self__, "instance_group_ids", instance_group_ids)
        if metric_names and not isinstance(metric_names, list):
            raise TypeError("Expected argument 'metric_names' to be a list")
        pulumi.set(__self__, "metric_names", metric_names)
        if module and not isinstance(module, str):
            raise TypeError("Expected argument 'module' to be a str")
        pulumi.set(__self__, "module", module)
        if monitor_types and not isinstance(monitor_types, list):
            raise TypeError("Expected argument 'monitor_types' to be a list")
        pulumi.set(__self__, "monitor_types", monitor_types)
        if namespaces and not isinstance(namespaces, list):
            raise TypeError("Expected argument 'namespaces' to be a list")
        pulumi.set(__self__, "namespaces", namespaces)
        if order and not isinstance(order, str):
            raise TypeError("Expected argument 'order' to be a str")
        pulumi.set(__self__, "order", order)
        if policy_ids and not isinstance(policy_ids, list):
            raise TypeError("Expected argument 'policy_ids' to be a list")
        pulumi.set(__self__, "policy_ids", policy_ids)
        if policy_name and not isinstance(policy_name, str):
            raise TypeError("Expected argument 'policy_name' to be a str")
        pulumi.set(__self__, "policy_name", policy_name)
        if project_ids and not isinstance(project_ids, list):
            raise TypeError("Expected argument 'project_ids' to be a list")
        pulumi.set(__self__, "project_ids", project_ids)
        if receiver_groups and not isinstance(receiver_groups, list):
            raise TypeError("Expected argument 'receiver_groups' to be a list")
        pulumi.set(__self__, "receiver_groups", receiver_groups)
        if receiver_uids and not isinstance(receiver_uids, list):
            raise TypeError("Expected argument 'receiver_uids' to be a list")
        pulumi.set(__self__, "receiver_uids", receiver_uids)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="alarmLevels")
    def alarm_levels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "alarm_levels")

    @property
    @pulumi.getter(name="alarmObject")
    def alarm_object(self) -> Optional[str]:
        """
        Alarm object.
        """
        return pulumi.get(self, "alarm_object")

    @property
    @pulumi.getter(name="alarmStatuses")
    def alarm_statuses(self) -> Optional[Sequence[str]]:
        """
        Alarm status. Valid values: ALARM (not resolved), OK (resolved), NO_CONF (expired), NO_DATA (insufficient data).
        """
        return pulumi.get(self, "alarm_statuses")

    @property
    @pulumi.getter
    def content(self) -> Optional[str]:
        """
        Alarm content.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[int]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def histories(self) -> Sequence['outputs.GetAlarmHistoryHistoryResult']:
        """
        Alarm record list.
        """
        return pulumi.get(self, "histories")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceGroupIds")
    def instance_group_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "instance_group_ids")

    @property
    @pulumi.getter(name="metricNames")
    def metric_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "metric_names")

    @property
    @pulumi.getter
    def module(self) -> str:
        return pulumi.get(self, "module")

    @property
    @pulumi.getter(name="monitorTypes")
    def monitor_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_types")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence['outputs.GetAlarmHistoryNamespaceResult']]:
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="policyIds")
    def policy_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_ids")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        """
        Policy name.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "project_ids")

    @property
    @pulumi.getter(name="receiverGroups")
    def receiver_groups(self) -> Optional[Sequence[int]]:
        """
        Recipient group list.
        """
        return pulumi.get(self, "receiver_groups")

    @property
    @pulumi.getter(name="receiverUids")
    def receiver_uids(self) -> Optional[Sequence[int]]:
        """
        Recipient list.
        """
        return pulumi.get(self, "receiver_uids")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[int]:
        return pulumi.get(self, "start_time")


class AwaitableGetAlarmHistoryResult(GetAlarmHistoryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlarmHistoryResult(
            alarm_levels=self.alarm_levels,
            alarm_object=self.alarm_object,
            alarm_statuses=self.alarm_statuses,
            content=self.content,
            end_time=self.end_time,
            histories=self.histories,
            id=self.id,
            instance_group_ids=self.instance_group_ids,
            metric_names=self.metric_names,
            module=self.module,
            monitor_types=self.monitor_types,
            namespaces=self.namespaces,
            order=self.order,
            policy_ids=self.policy_ids,
            policy_name=self.policy_name,
            project_ids=self.project_ids,
            receiver_groups=self.receiver_groups,
            receiver_uids=self.receiver_uids,
            result_output_file=self.result_output_file,
            start_time=self.start_time)


def get_alarm_history(alarm_levels: Optional[Sequence[str]] = None,
                      alarm_object: Optional[str] = None,
                      alarm_statuses: Optional[Sequence[str]] = None,
                      content: Optional[str] = None,
                      end_time: Optional[int] = None,
                      instance_group_ids: Optional[Sequence[int]] = None,
                      metric_names: Optional[Sequence[str]] = None,
                      module: Optional[str] = None,
                      monitor_types: Optional[Sequence[str]] = None,
                      namespaces: Optional[Sequence[pulumi.InputType['GetAlarmHistoryNamespaceArgs']]] = None,
                      order: Optional[str] = None,
                      policy_ids: Optional[Sequence[str]] = None,
                      policy_name: Optional[str] = None,
                      project_ids: Optional[Sequence[int]] = None,
                      receiver_groups: Optional[Sequence[int]] = None,
                      receiver_uids: Optional[Sequence[int]] = None,
                      result_output_file: Optional[str] = None,
                      start_time: Optional[int] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlarmHistoryResult:
    """
    Use this data source to query detailed information of monitor alarm_history

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    alarm_history = tencentcloud.Monitor.get_alarm_history(content="CPU利用率 > 3%",
        end_time=1697212799,
        module="monitor",
        monitor_types=["MT_QCE"],
        namespaces=[tencentcloud.monitor.GetAlarmHistoryNamespaceArgs(
            monitor_type="CpuUsage",
            namespace="cvm_device",
        )],
        order="DESC",
        policy_ids=["policy-iejtp4ue"],
        policy_name="terraform_test",
        project_ids=[0],
        start_time=1696608000)
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] alarm_levels: Alarm levels.
    :param str alarm_object: Filter by alarm object. Fuzzy search with string is supported.
    :param Sequence[str] alarm_statuses: Filter by alarm status. Valid values: ALARM (not resolved), OK (resolved), NO_CONF (expired), NO_DATA (insufficient data). If this parameter is left empty, all will be queried by default.
    :param str content: Fuzzy search by alarm content.
    :param int end_time: End time, which is the current timestamp and the time when the alarm FirstOccurTime first occurs. An alarm record can be searched only if its FirstOccurTime is earlier than the EndTime.
    :param Sequence[int] instance_group_ids: Filter by instance group ID.
    :param Sequence[str] metric_names: Filter by metric name.
    :param str module: Value fixed at monitor.
    :param Sequence[str] monitor_types: Filter by monitor type. Valid values: MT_QCE (Tencent Cloud service monitoring), MT_TAW (application performance monitoring), MT_RUM (frontend performance monitoring), MT_PROBE (cloud automated testing). If this parameter is left empty, all types will be queried by default.
    :param Sequence[pulumi.InputType['GetAlarmHistoryNamespaceArgs']] namespaces: Filter by policy type. Monitoring type and policy type are first-level and second-level filters respectively and both need to be passed in. For example, [{MonitorType: MT_QCE, Namespace: cvm_device}].
    :param str order: Sort by the first occurrence time in descending order by default. Valid values: ASC (ascending), DESC (descending).
    :param Sequence[str] policy_ids: Search by alarm policy ID list.
    :param str policy_name: Fuzzy search by policy name.
    :param Sequence[int] project_ids: Filter by project ID. Valid values: -1 (no project), 0 (default project).
    :param Sequence[int] receiver_groups: Search by recipient group.
    :param Sequence[int] receiver_uids: Search by recipient.
    :param str result_output_file: Used to save results.
    :param int start_time: Start time, which is the timestamp one day ago by default and the time when the alarm FirstOccurTime first occurs. An alarm record can be searched only if its FirstOccurTime is later than the StartTime.
    """
    __args__ = dict()
    __args__['alarmLevels'] = alarm_levels
    __args__['alarmObject'] = alarm_object
    __args__['alarmStatuses'] = alarm_statuses
    __args__['content'] = content
    __args__['endTime'] = end_time
    __args__['instanceGroupIds'] = instance_group_ids
    __args__['metricNames'] = metric_names
    __args__['module'] = module
    __args__['monitorTypes'] = monitor_types
    __args__['namespaces'] = namespaces
    __args__['order'] = order
    __args__['policyIds'] = policy_ids
    __args__['policyName'] = policy_name
    __args__['projectIds'] = project_ids
    __args__['receiverGroups'] = receiver_groups
    __args__['receiverUids'] = receiver_uids
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Monitor/getAlarmHistory:getAlarmHistory', __args__, opts=opts, typ=GetAlarmHistoryResult).value

    return AwaitableGetAlarmHistoryResult(
        alarm_levels=pulumi.get(__ret__, 'alarm_levels'),
        alarm_object=pulumi.get(__ret__, 'alarm_object'),
        alarm_statuses=pulumi.get(__ret__, 'alarm_statuses'),
        content=pulumi.get(__ret__, 'content'),
        end_time=pulumi.get(__ret__, 'end_time'),
        histories=pulumi.get(__ret__, 'histories'),
        id=pulumi.get(__ret__, 'id'),
        instance_group_ids=pulumi.get(__ret__, 'instance_group_ids'),
        metric_names=pulumi.get(__ret__, 'metric_names'),
        module=pulumi.get(__ret__, 'module'),
        monitor_types=pulumi.get(__ret__, 'monitor_types'),
        namespaces=pulumi.get(__ret__, 'namespaces'),
        order=pulumi.get(__ret__, 'order'),
        policy_ids=pulumi.get(__ret__, 'policy_ids'),
        policy_name=pulumi.get(__ret__, 'policy_name'),
        project_ids=pulumi.get(__ret__, 'project_ids'),
        receiver_groups=pulumi.get(__ret__, 'receiver_groups'),
        receiver_uids=pulumi.get(__ret__, 'receiver_uids'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_alarm_history)
def get_alarm_history_output(alarm_levels: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             alarm_object: Optional[pulumi.Input[Optional[str]]] = None,
                             alarm_statuses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             content: Optional[pulumi.Input[Optional[str]]] = None,
                             end_time: Optional[pulumi.Input[Optional[int]]] = None,
                             instance_group_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                             metric_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             module: Optional[pulumi.Input[str]] = None,
                             monitor_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             namespaces: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetAlarmHistoryNamespaceArgs']]]]] = None,
                             order: Optional[pulumi.Input[Optional[str]]] = None,
                             policy_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             policy_name: Optional[pulumi.Input[Optional[str]]] = None,
                             project_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                             receiver_groups: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                             receiver_uids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             start_time: Optional[pulumi.Input[Optional[int]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAlarmHistoryResult]:
    """
    Use this data source to query detailed information of monitor alarm_history

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    alarm_history = tencentcloud.Monitor.get_alarm_history(content="CPU利用率 > 3%",
        end_time=1697212799,
        module="monitor",
        monitor_types=["MT_QCE"],
        namespaces=[tencentcloud.monitor.GetAlarmHistoryNamespaceArgs(
            monitor_type="CpuUsage",
            namespace="cvm_device",
        )],
        order="DESC",
        policy_ids=["policy-iejtp4ue"],
        policy_name="terraform_test",
        project_ids=[0],
        start_time=1696608000)
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] alarm_levels: Alarm levels.
    :param str alarm_object: Filter by alarm object. Fuzzy search with string is supported.
    :param Sequence[str] alarm_statuses: Filter by alarm status. Valid values: ALARM (not resolved), OK (resolved), NO_CONF (expired), NO_DATA (insufficient data). If this parameter is left empty, all will be queried by default.
    :param str content: Fuzzy search by alarm content.
    :param int end_time: End time, which is the current timestamp and the time when the alarm FirstOccurTime first occurs. An alarm record can be searched only if its FirstOccurTime is earlier than the EndTime.
    :param Sequence[int] instance_group_ids: Filter by instance group ID.
    :param Sequence[str] metric_names: Filter by metric name.
    :param str module: Value fixed at monitor.
    :param Sequence[str] monitor_types: Filter by monitor type. Valid values: MT_QCE (Tencent Cloud service monitoring), MT_TAW (application performance monitoring), MT_RUM (frontend performance monitoring), MT_PROBE (cloud automated testing). If this parameter is left empty, all types will be queried by default.
    :param Sequence[pulumi.InputType['GetAlarmHistoryNamespaceArgs']] namespaces: Filter by policy type. Monitoring type and policy type are first-level and second-level filters respectively and both need to be passed in. For example, [{MonitorType: MT_QCE, Namespace: cvm_device}].
    :param str order: Sort by the first occurrence time in descending order by default. Valid values: ASC (ascending), DESC (descending).
    :param Sequence[str] policy_ids: Search by alarm policy ID list.
    :param str policy_name: Fuzzy search by policy name.
    :param Sequence[int] project_ids: Filter by project ID. Valid values: -1 (no project), 0 (default project).
    :param Sequence[int] receiver_groups: Search by recipient group.
    :param Sequence[int] receiver_uids: Search by recipient.
    :param str result_output_file: Used to save results.
    :param int start_time: Start time, which is the timestamp one day ago by default and the time when the alarm FirstOccurTime first occurs. An alarm record can be searched only if its FirstOccurTime is later than the StartTime.
    """
    ...
