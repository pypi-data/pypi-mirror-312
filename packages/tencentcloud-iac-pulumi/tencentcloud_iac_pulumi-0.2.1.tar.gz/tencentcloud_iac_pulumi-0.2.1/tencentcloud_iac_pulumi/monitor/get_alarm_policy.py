# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAlarmPolicyResult',
    'AwaitableGetAlarmPolicyResult',
    'get_alarm_policy',
    'get_alarm_policy_output',
]

@pulumi.output_type
class GetAlarmPolicyResult:
    """
    A collection of values returned by getAlarmPolicy.
    """
    def __init__(__self__, dimensions=None, enables=None, field=None, id=None, instance_group_id=None, module=None, monitor_types=None, namespaces=None, need_correspondence=None, not_bind_all=None, not_binding_notice_rule=None, not_instance_group=None, notice_ids=None, one_click_policy_types=None, order=None, policies=None, policy_name=None, policy_types=None, project_ids=None, prom_ins_id=None, receiver_groups=None, receiver_on_call_form_ids=None, receiver_uids=None, result_output_file=None, rule_types=None, trigger_tasks=None):
        if dimensions and not isinstance(dimensions, str):
            raise TypeError("Expected argument 'dimensions' to be a str")
        pulumi.set(__self__, "dimensions", dimensions)
        if enables and not isinstance(enables, list):
            raise TypeError("Expected argument 'enables' to be a list")
        pulumi.set(__self__, "enables", enables)
        if field and not isinstance(field, str):
            raise TypeError("Expected argument 'field' to be a str")
        pulumi.set(__self__, "field", field)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_group_id and not isinstance(instance_group_id, int):
            raise TypeError("Expected argument 'instance_group_id' to be a int")
        pulumi.set(__self__, "instance_group_id", instance_group_id)
        if module and not isinstance(module, str):
            raise TypeError("Expected argument 'module' to be a str")
        pulumi.set(__self__, "module", module)
        if monitor_types and not isinstance(monitor_types, list):
            raise TypeError("Expected argument 'monitor_types' to be a list")
        pulumi.set(__self__, "monitor_types", monitor_types)
        if namespaces and not isinstance(namespaces, list):
            raise TypeError("Expected argument 'namespaces' to be a list")
        pulumi.set(__self__, "namespaces", namespaces)
        if need_correspondence and not isinstance(need_correspondence, int):
            raise TypeError("Expected argument 'need_correspondence' to be a int")
        pulumi.set(__self__, "need_correspondence", need_correspondence)
        if not_bind_all and not isinstance(not_bind_all, int):
            raise TypeError("Expected argument 'not_bind_all' to be a int")
        pulumi.set(__self__, "not_bind_all", not_bind_all)
        if not_binding_notice_rule and not isinstance(not_binding_notice_rule, int):
            raise TypeError("Expected argument 'not_binding_notice_rule' to be a int")
        pulumi.set(__self__, "not_binding_notice_rule", not_binding_notice_rule)
        if not_instance_group and not isinstance(not_instance_group, int):
            raise TypeError("Expected argument 'not_instance_group' to be a int")
        pulumi.set(__self__, "not_instance_group", not_instance_group)
        if notice_ids and not isinstance(notice_ids, list):
            raise TypeError("Expected argument 'notice_ids' to be a list")
        pulumi.set(__self__, "notice_ids", notice_ids)
        if one_click_policy_types and not isinstance(one_click_policy_types, list):
            raise TypeError("Expected argument 'one_click_policy_types' to be a list")
        pulumi.set(__self__, "one_click_policy_types", one_click_policy_types)
        if order and not isinstance(order, str):
            raise TypeError("Expected argument 'order' to be a str")
        pulumi.set(__self__, "order", order)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if policy_name and not isinstance(policy_name, str):
            raise TypeError("Expected argument 'policy_name' to be a str")
        pulumi.set(__self__, "policy_name", policy_name)
        if policy_types and not isinstance(policy_types, list):
            raise TypeError("Expected argument 'policy_types' to be a list")
        pulumi.set(__self__, "policy_types", policy_types)
        if project_ids and not isinstance(project_ids, list):
            raise TypeError("Expected argument 'project_ids' to be a list")
        pulumi.set(__self__, "project_ids", project_ids)
        if prom_ins_id and not isinstance(prom_ins_id, str):
            raise TypeError("Expected argument 'prom_ins_id' to be a str")
        pulumi.set(__self__, "prom_ins_id", prom_ins_id)
        if receiver_groups and not isinstance(receiver_groups, list):
            raise TypeError("Expected argument 'receiver_groups' to be a list")
        pulumi.set(__self__, "receiver_groups", receiver_groups)
        if receiver_on_call_form_ids and not isinstance(receiver_on_call_form_ids, list):
            raise TypeError("Expected argument 'receiver_on_call_form_ids' to be a list")
        pulumi.set(__self__, "receiver_on_call_form_ids", receiver_on_call_form_ids)
        if receiver_uids and not isinstance(receiver_uids, list):
            raise TypeError("Expected argument 'receiver_uids' to be a list")
        pulumi.set(__self__, "receiver_uids", receiver_uids)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if rule_types and not isinstance(rule_types, list):
            raise TypeError("Expected argument 'rule_types' to be a list")
        pulumi.set(__self__, "rule_types", rule_types)
        if trigger_tasks and not isinstance(trigger_tasks, list):
            raise TypeError("Expected argument 'trigger_tasks' to be a list")
        pulumi.set(__self__, "trigger_tasks", trigger_tasks)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[str]:
        """
        JSON string generated by serializing the AlarmPolicyDimension two-dimensional array. The one-dimensional arrays are in OR relationship, and the elements in a one-dimensional array are in AND relationshipNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def enables(self) -> Optional[Sequence[int]]:
        """
        Status. Valid values: 0 (disabled), 1 (enabled). Default value: 1 (enabled). This parameter can be left empty.
        """
        return pulumi.get(self, "enables")

    @property
    @pulumi.getter
    def field(self) -> Optional[str]:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceGroupId")
    def instance_group_id(self) -> Optional[int]:
        """
        Instance group IDNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "instance_group_id")

    @property
    @pulumi.getter
    def module(self) -> str:
        return pulumi.get(self, "module")

    @property
    @pulumi.getter(name="monitorTypes")
    def monitor_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_types")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "namespaces")

    @property
    @pulumi.getter(name="needCorrespondence")
    def need_correspondence(self) -> Optional[int]:
        return pulumi.get(self, "need_correspondence")

    @property
    @pulumi.getter(name="notBindAll")
    def not_bind_all(self) -> Optional[int]:
        return pulumi.get(self, "not_bind_all")

    @property
    @pulumi.getter(name="notBindingNoticeRule")
    def not_binding_notice_rule(self) -> Optional[int]:
        return pulumi.get(self, "not_binding_notice_rule")

    @property
    @pulumi.getter(name="notInstanceGroup")
    def not_instance_group(self) -> Optional[int]:
        return pulumi.get(self, "not_instance_group")

    @property
    @pulumi.getter(name="noticeIds")
    def notice_ids(self) -> Optional[Sequence[str]]:
        """
        Notification rule ID listNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "notice_ids")

    @property
    @pulumi.getter(name="oneClickPolicyTypes")
    def one_click_policy_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "one_click_policy_types")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetAlarmPolicyPolicyResult']:
        """
        Policy array.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        """
        Alarm policy nameNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyTypes")
    def policy_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_types")

    @property
    @pulumi.getter(name="projectIds")
    def project_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "project_ids")

    @property
    @pulumi.getter(name="promInsId")
    def prom_ins_id(self) -> Optional[str]:
        return pulumi.get(self, "prom_ins_id")

    @property
    @pulumi.getter(name="receiverGroups")
    def receiver_groups(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "receiver_groups")

    @property
    @pulumi.getter(name="receiverOnCallFormIds")
    def receiver_on_call_form_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "receiver_on_call_form_ids")

    @property
    @pulumi.getter(name="receiverUids")
    def receiver_uids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "receiver_uids")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="ruleTypes")
    def rule_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "rule_types")

    @property
    @pulumi.getter(name="triggerTasks")
    def trigger_tasks(self) -> Optional[Sequence['outputs.GetAlarmPolicyTriggerTaskResult']]:
        """
        Triggered task listNote: this field may return null, indicating that no valid values can be obtained.
        """
        return pulumi.get(self, "trigger_tasks")


class AwaitableGetAlarmPolicyResult(GetAlarmPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlarmPolicyResult(
            dimensions=self.dimensions,
            enables=self.enables,
            field=self.field,
            id=self.id,
            instance_group_id=self.instance_group_id,
            module=self.module,
            monitor_types=self.monitor_types,
            namespaces=self.namespaces,
            need_correspondence=self.need_correspondence,
            not_bind_all=self.not_bind_all,
            not_binding_notice_rule=self.not_binding_notice_rule,
            not_instance_group=self.not_instance_group,
            notice_ids=self.notice_ids,
            one_click_policy_types=self.one_click_policy_types,
            order=self.order,
            policies=self.policies,
            policy_name=self.policy_name,
            policy_types=self.policy_types,
            project_ids=self.project_ids,
            prom_ins_id=self.prom_ins_id,
            receiver_groups=self.receiver_groups,
            receiver_on_call_form_ids=self.receiver_on_call_form_ids,
            receiver_uids=self.receiver_uids,
            result_output_file=self.result_output_file,
            rule_types=self.rule_types,
            trigger_tasks=self.trigger_tasks)


def get_alarm_policy(dimensions: Optional[str] = None,
                     enables: Optional[Sequence[int]] = None,
                     field: Optional[str] = None,
                     instance_group_id: Optional[int] = None,
                     module: Optional[str] = None,
                     monitor_types: Optional[Sequence[str]] = None,
                     namespaces: Optional[Sequence[str]] = None,
                     need_correspondence: Optional[int] = None,
                     not_bind_all: Optional[int] = None,
                     not_binding_notice_rule: Optional[int] = None,
                     not_instance_group: Optional[int] = None,
                     notice_ids: Optional[Sequence[str]] = None,
                     one_click_policy_types: Optional[Sequence[str]] = None,
                     order: Optional[str] = None,
                     policy_name: Optional[str] = None,
                     policy_types: Optional[Sequence[str]] = None,
                     project_ids: Optional[Sequence[int]] = None,
                     prom_ins_id: Optional[str] = None,
                     receiver_groups: Optional[Sequence[int]] = None,
                     receiver_on_call_form_ids: Optional[Sequence[str]] = None,
                     receiver_uids: Optional[Sequence[int]] = None,
                     result_output_file: Optional[str] = None,
                     rule_types: Optional[Sequence[str]] = None,
                     trigger_tasks: Optional[Sequence[pulumi.InputType['GetAlarmPolicyTriggerTaskArgs']]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlarmPolicyResult:
    """
    Use this data source to query detailed information of monitor alarm_policy

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    alarm_policy = tencentcloud.Monitor.get_alarm_policy(enables=[1],
        module="monitor",
        monitor_types=["MT_QCE"],
        namespaces=["cvm_device"],
        notice_ids=["notice-f2svbu3w"],
        policy_name="terraform",
        project_ids=[0],
        rule_types=["STATIC"])
    ```
    <!--End PulumiCodeChooser -->


    :param str dimensions: The alarm object list, which is a JSON string. The outer array corresponds to multiple instances, and the inner array is the dimension of an object.For example, 'CVM - Basic Monitor' can be written as: [ {Dimensions: {unInstanceId: ins-qr8d555g}}, {Dimensions: {unInstanceId: ins-qr8d555h}} ]You can also refer to the 'Example 2' below.For more information on the parameter samples of different Tencent Cloud services, see [Product Policy Type and Dimension Information](https://www.tencentcloud.com/document/product/248/39565?has_map=1).Note: If 1 is passed in for NeedCorrespondence, the relationship between a policy and an instance needs to be returned. You can pass in up to 20 alarm object dimensions to avoid request timeout.
    :param Sequence[int] enables: Filter by alarm status. Valid values: [1]: enabled; [0]: disabled; [0, 1]: all.
    :param str field: Sort by field. For example, to sort by the last modification time, use Field: UpdateTime.
    :param int instance_group_id: Instance group ID.
    :param str module: Value fixed at monitor.
    :param Sequence[str] monitor_types: Filter by monitor type. Valid values: MT_QCE (Tencent Cloud service monitoring). If this parameter is left empty, all will be queried by default.
    :param Sequence[str] namespaces: Filter by namespace. For the values of different policy types, please see:[Poicy Type List](https://www.tencentcloud.com/document/product/248/39565?has_map=1).
    :param int need_correspondence: Whether the relationship between a policy and the input parameter filter dimension is required. 1: Yes. 0: No. Default value: 0.
    :param int not_bind_all: Whether the returned result needs to filter policies associated with all objects. Valid values: 1 (Yes), 0 (No).
    :param int not_binding_notice_rule: If 1 is passed in, alarm policies with no notification rules configured are queried. If it is left empty or other values are passed in, all alarm policies are queried.
    :param int not_instance_group: Whether the returned result needs to filter policies associated with instance groups. Valid values: 1 (Yes), 0 (No).
    :param Sequence[str] notice_ids: List of the notification template IDs, which can be obtained by querying the notification template list.It can be queried with the API [DescribeAlarmNotices](https://www.tencentcloud.com/document/product/248/39300).
    :param Sequence[str] one_click_policy_types: Filter by quick alarm policy. If this parameter is left empty, all policies are displayed. ONECLICK: Display quick alarm policies; NOT_ONECLICK: Display non-quick alarm policies.
    :param str order: Sort order. Valid values: ASC (ascending), DESC (descending).
    :param str policy_name: Fuzzy search by policy name.
    :param Sequence[str] policy_types: Filter by default policy. Valid values: DEFAULT (display default policy), NOT_DEFAULT (display non-default policies). If this parameter is left empty, all policies will be displayed.
    :param Sequence[int] project_ids: ID array of the policy project, which can be viewed on the following page: [Project Management](https://console.tencentcloud.com/project).
    :param str prom_ins_id: ID of the TencentCloud Managed Service for Prometheus instance, which is used for customizing a metric policy.
    :param Sequence[int] receiver_groups: Search by recipient group. You can get the user group list with the API [ListGroups](https://www.tencentcloud.com/document/product/598/34589?from_cn_redirect=1) in 'Cloud Access Management' or query the user group list where a sub-user is in with the API [ListGroupsForUser](https://www.tencentcloud.com/document/product/598/34588?from_cn_redirect=1). The GroupId field in the returned result should be entered here.
    :param Sequence[str] receiver_on_call_form_ids: Search by schedule.
    :param Sequence[int] receiver_uids: Search by recipient. You can get the user list with the API [ListUsers](https://www.tencentcloud.com/document/product/598/34587?from_cn_redirect=1) in 'Cloud Access Management' or query the sub-user information with the API [GetUser](https://www.tencentcloud.com/document/product/598/34590?from_cn_redirect=1). The Uid field in the returned result should be entered here.
    :param str result_output_file: Used to save results.
    :param Sequence[str] rule_types: Filter by trigger condition. Valid values: STATIC (display policies with static threshold), DYNAMIC (display policies with dynamic threshold). If this parameter is left empty, all policies will be displayed.
    :param Sequence[pulumi.InputType['GetAlarmPolicyTriggerTaskArgs']] trigger_tasks: Filter alarm policy by triggered task (such as auto scaling task). Up to 10 tasks can be specified.
    """
    __args__ = dict()
    __args__['dimensions'] = dimensions
    __args__['enables'] = enables
    __args__['field'] = field
    __args__['instanceGroupId'] = instance_group_id
    __args__['module'] = module
    __args__['monitorTypes'] = monitor_types
    __args__['namespaces'] = namespaces
    __args__['needCorrespondence'] = need_correspondence
    __args__['notBindAll'] = not_bind_all
    __args__['notBindingNoticeRule'] = not_binding_notice_rule
    __args__['notInstanceGroup'] = not_instance_group
    __args__['noticeIds'] = notice_ids
    __args__['oneClickPolicyTypes'] = one_click_policy_types
    __args__['order'] = order
    __args__['policyName'] = policy_name
    __args__['policyTypes'] = policy_types
    __args__['projectIds'] = project_ids
    __args__['promInsId'] = prom_ins_id
    __args__['receiverGroups'] = receiver_groups
    __args__['receiverOnCallFormIds'] = receiver_on_call_form_ids
    __args__['receiverUids'] = receiver_uids
    __args__['resultOutputFile'] = result_output_file
    __args__['ruleTypes'] = rule_types
    __args__['triggerTasks'] = trigger_tasks
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Monitor/getAlarmPolicy:getAlarmPolicy', __args__, opts=opts, typ=GetAlarmPolicyResult).value

    return AwaitableGetAlarmPolicyResult(
        dimensions=pulumi.get(__ret__, 'dimensions'),
        enables=pulumi.get(__ret__, 'enables'),
        field=pulumi.get(__ret__, 'field'),
        id=pulumi.get(__ret__, 'id'),
        instance_group_id=pulumi.get(__ret__, 'instance_group_id'),
        module=pulumi.get(__ret__, 'module'),
        monitor_types=pulumi.get(__ret__, 'monitor_types'),
        namespaces=pulumi.get(__ret__, 'namespaces'),
        need_correspondence=pulumi.get(__ret__, 'need_correspondence'),
        not_bind_all=pulumi.get(__ret__, 'not_bind_all'),
        not_binding_notice_rule=pulumi.get(__ret__, 'not_binding_notice_rule'),
        not_instance_group=pulumi.get(__ret__, 'not_instance_group'),
        notice_ids=pulumi.get(__ret__, 'notice_ids'),
        one_click_policy_types=pulumi.get(__ret__, 'one_click_policy_types'),
        order=pulumi.get(__ret__, 'order'),
        policies=pulumi.get(__ret__, 'policies'),
        policy_name=pulumi.get(__ret__, 'policy_name'),
        policy_types=pulumi.get(__ret__, 'policy_types'),
        project_ids=pulumi.get(__ret__, 'project_ids'),
        prom_ins_id=pulumi.get(__ret__, 'prom_ins_id'),
        receiver_groups=pulumi.get(__ret__, 'receiver_groups'),
        receiver_on_call_form_ids=pulumi.get(__ret__, 'receiver_on_call_form_ids'),
        receiver_uids=pulumi.get(__ret__, 'receiver_uids'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        rule_types=pulumi.get(__ret__, 'rule_types'),
        trigger_tasks=pulumi.get(__ret__, 'trigger_tasks'))


@_utilities.lift_output_func(get_alarm_policy)
def get_alarm_policy_output(dimensions: Optional[pulumi.Input[Optional[str]]] = None,
                            enables: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                            field: Optional[pulumi.Input[Optional[str]]] = None,
                            instance_group_id: Optional[pulumi.Input[Optional[int]]] = None,
                            module: Optional[pulumi.Input[str]] = None,
                            monitor_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            namespaces: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            need_correspondence: Optional[pulumi.Input[Optional[int]]] = None,
                            not_bind_all: Optional[pulumi.Input[Optional[int]]] = None,
                            not_binding_notice_rule: Optional[pulumi.Input[Optional[int]]] = None,
                            not_instance_group: Optional[pulumi.Input[Optional[int]]] = None,
                            notice_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            one_click_policy_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            order: Optional[pulumi.Input[Optional[str]]] = None,
                            policy_name: Optional[pulumi.Input[Optional[str]]] = None,
                            policy_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            project_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                            prom_ins_id: Optional[pulumi.Input[Optional[str]]] = None,
                            receiver_groups: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                            receiver_on_call_form_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            receiver_uids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            rule_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            trigger_tasks: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetAlarmPolicyTriggerTaskArgs']]]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAlarmPolicyResult]:
    """
    Use this data source to query detailed information of monitor alarm_policy

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    alarm_policy = tencentcloud.Monitor.get_alarm_policy(enables=[1],
        module="monitor",
        monitor_types=["MT_QCE"],
        namespaces=["cvm_device"],
        notice_ids=["notice-f2svbu3w"],
        policy_name="terraform",
        project_ids=[0],
        rule_types=["STATIC"])
    ```
    <!--End PulumiCodeChooser -->


    :param str dimensions: The alarm object list, which is a JSON string. The outer array corresponds to multiple instances, and the inner array is the dimension of an object.For example, 'CVM - Basic Monitor' can be written as: [ {Dimensions: {unInstanceId: ins-qr8d555g}}, {Dimensions: {unInstanceId: ins-qr8d555h}} ]You can also refer to the 'Example 2' below.For more information on the parameter samples of different Tencent Cloud services, see [Product Policy Type and Dimension Information](https://www.tencentcloud.com/document/product/248/39565?has_map=1).Note: If 1 is passed in for NeedCorrespondence, the relationship between a policy and an instance needs to be returned. You can pass in up to 20 alarm object dimensions to avoid request timeout.
    :param Sequence[int] enables: Filter by alarm status. Valid values: [1]: enabled; [0]: disabled; [0, 1]: all.
    :param str field: Sort by field. For example, to sort by the last modification time, use Field: UpdateTime.
    :param int instance_group_id: Instance group ID.
    :param str module: Value fixed at monitor.
    :param Sequence[str] monitor_types: Filter by monitor type. Valid values: MT_QCE (Tencent Cloud service monitoring). If this parameter is left empty, all will be queried by default.
    :param Sequence[str] namespaces: Filter by namespace. For the values of different policy types, please see:[Poicy Type List](https://www.tencentcloud.com/document/product/248/39565?has_map=1).
    :param int need_correspondence: Whether the relationship between a policy and the input parameter filter dimension is required. 1: Yes. 0: No. Default value: 0.
    :param int not_bind_all: Whether the returned result needs to filter policies associated with all objects. Valid values: 1 (Yes), 0 (No).
    :param int not_binding_notice_rule: If 1 is passed in, alarm policies with no notification rules configured are queried. If it is left empty or other values are passed in, all alarm policies are queried.
    :param int not_instance_group: Whether the returned result needs to filter policies associated with instance groups. Valid values: 1 (Yes), 0 (No).
    :param Sequence[str] notice_ids: List of the notification template IDs, which can be obtained by querying the notification template list.It can be queried with the API [DescribeAlarmNotices](https://www.tencentcloud.com/document/product/248/39300).
    :param Sequence[str] one_click_policy_types: Filter by quick alarm policy. If this parameter is left empty, all policies are displayed. ONECLICK: Display quick alarm policies; NOT_ONECLICK: Display non-quick alarm policies.
    :param str order: Sort order. Valid values: ASC (ascending), DESC (descending).
    :param str policy_name: Fuzzy search by policy name.
    :param Sequence[str] policy_types: Filter by default policy. Valid values: DEFAULT (display default policy), NOT_DEFAULT (display non-default policies). If this parameter is left empty, all policies will be displayed.
    :param Sequence[int] project_ids: ID array of the policy project, which can be viewed on the following page: [Project Management](https://console.tencentcloud.com/project).
    :param str prom_ins_id: ID of the TencentCloud Managed Service for Prometheus instance, which is used for customizing a metric policy.
    :param Sequence[int] receiver_groups: Search by recipient group. You can get the user group list with the API [ListGroups](https://www.tencentcloud.com/document/product/598/34589?from_cn_redirect=1) in 'Cloud Access Management' or query the user group list where a sub-user is in with the API [ListGroupsForUser](https://www.tencentcloud.com/document/product/598/34588?from_cn_redirect=1). The GroupId field in the returned result should be entered here.
    :param Sequence[str] receiver_on_call_form_ids: Search by schedule.
    :param Sequence[int] receiver_uids: Search by recipient. You can get the user list with the API [ListUsers](https://www.tencentcloud.com/document/product/598/34587?from_cn_redirect=1) in 'Cloud Access Management' or query the sub-user information with the API [GetUser](https://www.tencentcloud.com/document/product/598/34590?from_cn_redirect=1). The Uid field in the returned result should be entered here.
    :param str result_output_file: Used to save results.
    :param Sequence[str] rule_types: Filter by trigger condition. Valid values: STATIC (display policies with static threshold), DYNAMIC (display policies with dynamic threshold). If this parameter is left empty, all policies will be displayed.
    :param Sequence[pulumi.InputType['GetAlarmPolicyTriggerTaskArgs']] trigger_tasks: Filter alarm policy by triggered task (such as auto scaling task). Up to 10 tasks can be specified.
    """
    ...
