# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AlarmPolicyArgs', 'AlarmPolicy']

@pulumi.input_type
class AlarmPolicyArgs:
    def __init__(__self__, *,
                 monitor_type: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 policy_name: pulumi.Input[str],
                 conditions: Optional[pulumi.Input['AlarmPolicyConditionsArgs']] = None,
                 conditon_template_id: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 event_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyEventConditionArgs']]]] = None,
                 filter: Optional[pulumi.Input['AlarmPolicyFilterArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 notice_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 policy_tags: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyPolicyTagArgs']]]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 trigger_tasks: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyTriggerTaskArgs']]]] = None):
        """
        The set of arguments for constructing a AlarmPolicy resource.
        :param pulumi.Input[str] monitor_type: The type of monitor.
        :param pulumi.Input[str] namespace: The type of alarm.
        :param pulumi.Input[str] policy_name: The name of policy.
        :param pulumi.Input['AlarmPolicyConditionsArgs'] conditions: A list of metric trigger condition.
        :param pulumi.Input[int] conditon_template_id: ID of trigger condition template.
        :param pulumi.Input[int] enable: Whether to enable, default is `1`.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmPolicyEventConditionArgs']]] event_conditions: A list of event trigger condition.
        :param pulumi.Input['AlarmPolicyFilterArgs'] filter: Global filters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Aggregate dimension list, specify which dimension keys to use for group by.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notice_ids: List of notification rule IDs.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmPolicyPolicyTagArgs']]] policy_tags: Policy tag to bind object.
        :param pulumi.Input[int] project_id: Project ID. For products with different projects, a value other than -1 must be passed in.
        :param pulumi.Input[str] remark: The remark of policy group.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmPolicyTriggerTaskArgs']]] trigger_tasks: Triggered task list.
        """
        pulumi.set(__self__, "monitor_type", monitor_type)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "policy_name", policy_name)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if conditon_template_id is not None:
            pulumi.set(__self__, "conditon_template_id", conditon_template_id)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if event_conditions is not None:
            pulumi.set(__self__, "event_conditions", event_conditions)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if notice_ids is not None:
            pulumi.set(__self__, "notice_ids", notice_ids)
        if policy_tags is not None:
            pulumi.set(__self__, "policy_tags", policy_tags)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if trigger_tasks is not None:
            pulumi.set(__self__, "trigger_tasks", trigger_tasks)

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> pulumi.Input[str]:
        """
        The type of monitor.
        """
        return pulumi.get(self, "monitor_type")

    @monitor_type.setter
    def monitor_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "monitor_type", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        The type of alarm.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[str]:
        """
        The name of policy.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input['AlarmPolicyConditionsArgs']]:
        """
        A list of metric trigger condition.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input['AlarmPolicyConditionsArgs']]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="conditonTemplateId")
    def conditon_template_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of trigger condition template.
        """
        return pulumi.get(self, "conditon_template_id")

    @conditon_template_id.setter
    def conditon_template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conditon_template_id", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable, default is `1`.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyEventConditionArgs']]]]:
        """
        A list of event trigger condition.
        """
        return pulumi.get(self, "event_conditions")

    @event_conditions.setter
    def event_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyEventConditionArgs']]]]):
        pulumi.set(self, "event_conditions", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['AlarmPolicyFilterArgs']]:
        """
        Global filters.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['AlarmPolicyFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Aggregate dimension list, specify which dimension keys to use for group by.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="noticeIds")
    def notice_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of notification rule IDs.
        """
        return pulumi.get(self, "notice_ids")

    @notice_ids.setter
    def notice_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notice_ids", value)

    @property
    @pulumi.getter(name="policyTags")
    def policy_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyPolicyTagArgs']]]]:
        """
        Policy tag to bind object.
        """
        return pulumi.get(self, "policy_tags")

    @policy_tags.setter
    def policy_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyPolicyTagArgs']]]]):
        pulumi.set(self, "policy_tags", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID. For products with different projects, a value other than -1 must be passed in.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The remark of policy group.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="triggerTasks")
    def trigger_tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyTriggerTaskArgs']]]]:
        """
        Triggered task list.
        """
        return pulumi.get(self, "trigger_tasks")

    @trigger_tasks.setter
    def trigger_tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyTriggerTaskArgs']]]]):
        pulumi.set(self, "trigger_tasks", value)


@pulumi.input_type
class _AlarmPolicyState:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input['AlarmPolicyConditionsArgs']] = None,
                 conditon_template_id: Optional[pulumi.Input[int]] = None,
                 create_time: Optional[pulumi.Input[str]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 event_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyEventConditionArgs']]]] = None,
                 filter: Optional[pulumi.Input['AlarmPolicyFilterArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitor_type: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 notice_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 policy_tags: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyPolicyTagArgs']]]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 trigger_tasks: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyTriggerTaskArgs']]]] = None,
                 update_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AlarmPolicy resources.
        :param pulumi.Input['AlarmPolicyConditionsArgs'] conditions: A list of metric trigger condition.
        :param pulumi.Input[int] conditon_template_id: ID of trigger condition template.
        :param pulumi.Input[str] create_time: The alarm policy create time.
        :param pulumi.Input[int] enable: Whether to enable, default is `1`.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmPolicyEventConditionArgs']]] event_conditions: A list of event trigger condition.
        :param pulumi.Input['AlarmPolicyFilterArgs'] filter: Global filters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Aggregate dimension list, specify which dimension keys to use for group by.
        :param pulumi.Input[str] monitor_type: The type of monitor.
        :param pulumi.Input[str] namespace: The type of alarm.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notice_ids: List of notification rule IDs.
        :param pulumi.Input[str] policy_name: The name of policy.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmPolicyPolicyTagArgs']]] policy_tags: Policy tag to bind object.
        :param pulumi.Input[int] project_id: Project ID. For products with different projects, a value other than -1 must be passed in.
        :param pulumi.Input[str] remark: The remark of policy group.
        :param pulumi.Input[Sequence[pulumi.Input['AlarmPolicyTriggerTaskArgs']]] trigger_tasks: Triggered task list.
        :param pulumi.Input[str] update_time: The alarm policy update time.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if conditon_template_id is not None:
            pulumi.set(__self__, "conditon_template_id", conditon_template_id)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if event_conditions is not None:
            pulumi.set(__self__, "event_conditions", event_conditions)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if monitor_type is not None:
            pulumi.set(__self__, "monitor_type", monitor_type)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if notice_ids is not None:
            pulumi.set(__self__, "notice_ids", notice_ids)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if policy_tags is not None:
            pulumi.set(__self__, "policy_tags", policy_tags)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if trigger_tasks is not None:
            pulumi.set(__self__, "trigger_tasks", trigger_tasks)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input['AlarmPolicyConditionsArgs']]:
        """
        A list of metric trigger condition.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input['AlarmPolicyConditionsArgs']]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="conditonTemplateId")
    def conditon_template_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of trigger condition template.
        """
        return pulumi.get(self, "conditon_template_id")

    @conditon_template_id.setter
    def conditon_template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conditon_template_id", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[str]]:
        """
        The alarm policy create time.
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def enable(self) -> Optional[pulumi.Input[int]]:
        """
        Whether to enable, default is `1`.
        """
        return pulumi.get(self, "enable")

    @enable.setter
    def enable(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "enable", value)

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyEventConditionArgs']]]]:
        """
        A list of event trigger condition.
        """
        return pulumi.get(self, "event_conditions")

    @event_conditions.setter
    def event_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyEventConditionArgs']]]]):
        pulumi.set(self, "event_conditions", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['AlarmPolicyFilterArgs']]:
        """
        Global filters.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['AlarmPolicyFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Aggregate dimension list, specify which dimension keys to use for group by.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of monitor.
        """
        return pulumi.get(self, "monitor_type")

    @monitor_type.setter
    def monitor_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_type", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The type of alarm.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="noticeIds")
    def notice_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of notification rule IDs.
        """
        return pulumi.get(self, "notice_ids")

    @notice_ids.setter
    def notice_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notice_ids", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of policy.
        """
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="policyTags")
    def policy_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyPolicyTagArgs']]]]:
        """
        Policy tag to bind object.
        """
        return pulumi.get(self, "policy_tags")

    @policy_tags.setter
    def policy_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyPolicyTagArgs']]]]):
        pulumi.set(self, "policy_tags", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID. For products with different projects, a value other than -1 must be passed in.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        """
        The remark of policy group.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter(name="triggerTasks")
    def trigger_tasks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyTriggerTaskArgs']]]]:
        """
        Triggered task list.
        """
        return pulumi.get(self, "trigger_tasks")

    @trigger_tasks.setter
    def trigger_tasks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmPolicyTriggerTaskArgs']]]]):
        pulumi.set(self, "trigger_tasks", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[str]]:
        """
        The alarm policy update time.
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_time", value)


class AlarmPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[pulumi.InputType['AlarmPolicyConditionsArgs']]] = None,
                 conditon_template_id: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 event_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyEventConditionArgs']]]]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['AlarmPolicyFilterArgs']]] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitor_type: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 notice_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 policy_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyPolicyTagArgs']]]]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 trigger_tasks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyTriggerTaskArgs']]]]] = None,
                 __props__=None):
        """
        Provides a alarm policy resource for monitor.

        ## Example Usage

        ### cvm_device alarm policy

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo_alarm_notice = tencentcloud.monitor.AlarmNotice("fooAlarmNotice",
            notice_type="ALL",
            notice_language="zh-CN",
            user_notices=[tencentcloud.monitor.AlarmNoticeUserNoticeArgs(
                receiver_type="USER",
                start_time=0,
                end_time=1,
                notice_ways=[
                    "SMS",
                    "EMAIL",
                ],
                user_ids=[10001],
                group_ids=[],
                phone_orders=[10001],
                phone_circle_times=2,
                phone_circle_interval=50,
                phone_inner_interval=60,
                need_phone_arrive_notice=1,
                phone_call_type="CIRCLE",
                weekdays=[
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                ],
            )],
            url_notices=[tencentcloud.monitor.AlarmNoticeUrlNoticeArgs(
                url="https://www.mytest.com/validate",
                end_time=0,
                start_time=1,
                weekdays=[
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                ],
            )])
        foo_alarm_policy = tencentcloud.monitor.AlarmPolicy("fooAlarmPolicy",
            policy_name="tf-policy",
            monitor_type="MT_QCE",
            enable=1,
            project_id=0,
            namespace="cvm_device",
            conditions=tencentcloud.monitor.AlarmPolicyConditionsArgs(
                is_union_rule=1,
                rules=[tencentcloud.monitor.AlarmPolicyConditionsRuleArgs(
                    metric_name="CpuUsage",
                    period=60,
                    operator="ge",
                    value="89.9",
                    continue_period=1,
                    notice_frequency=3600,
                    is_power_notice=0,
                )],
            ),
            event_conditions=[
                tencentcloud.monitor.AlarmPolicyEventConditionArgs(
                    metric_name="ping_unreachable",
                ),
                tencentcloud.monitor.AlarmPolicyEventConditionArgs(
                    metric_name="guest_reboot",
                ),
            ],
            notice_ids=[foo_alarm_notice.id],
            trigger_tasks=[tencentcloud.monitor.AlarmPolicyTriggerTaskArgs(
                type="AS",
                task_config="{\\"Region\\":\\"ap-guangzhou\\",\\"Group\\":\\"asg-0z312312x\\",\\"Policy\\":\\"asp-ganig28\\"}",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### k8s_cluster alarm policy

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        policy = tencentcloud.monitor.AlarmPolicy("policy",
            enable=1,
            monitor_type="MT_QCE",
            namespace="k8s_cluster",
            notice_ids=["notice-l9ziyxw6"],
            policy_name="TkeClusterNew",
            project_id=1244035,
            conditions=tencentcloud.monitor.AlarmPolicyConditionsArgs(
                is_union_rule=0,
                rules=[
                    tencentcloud.monitor.AlarmPolicyConditionsRuleArgs(
                        continue_period=3,
                        description="Allocatable Pods",
                        is_power_notice=0,
                        metric_name="K8sClusterAllocatablePodsTotal",
                        notice_frequency=3600,
                        operator="gt",
                        period=60,
                        rule_type="STATIC",
                        unit="Count",
                        value="10",
                        filter=tencentcloud.monitor.AlarmPolicyConditionsRuleFilterArgs(
                            dimensions=json.dumps([[
                                {
                                    "Key": "region",
                                    "Operator": "eq",
                                    "Value": ["ap-guangzhou"],
                                },
                                {
                                    "Key": "tke_cluster_instance_id",
                                    "Operator": "in",
                                    "Value": ["cls-czhtobea"],
                                },
                            ]]),
                            type="DIMENSION",
                        ),
                    ),
                    tencentcloud.monitor.AlarmPolicyConditionsRuleArgs(
                        continue_period=3,
                        description="Total CPU Cores",
                        is_power_notice=0,
                        metric_name="K8sClusterCpuCoreTotal",
                        notice_frequency=3600,
                        operator="gt",
                        period=60,
                        rule_type="STATIC",
                        unit="Core",
                        value="2",
                        filter=tencentcloud.monitor.AlarmPolicyConditionsRuleFilterArgs(
                            dimensions=json.dumps([[
                                {
                                    "Key": "region",
                                    "Operator": "eq",
                                    "Value": ["ap-guangzhou"],
                                },
                                {
                                    "Key": "tke_cluster_instance_id",
                                    "Operator": "in",
                                    "Value": ["cls-czhtobea"],
                                },
                            ]]),
                            type="DIMENSION",
                        ),
                    ),
                ],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### cvm_device alarm policy binding cvm by tag

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        policy = tencentcloud.monitor.AlarmPolicy("policy",
            conditions=tencentcloud.monitor.AlarmPolicyConditionsArgs(
                is_union_rule=0,
                rules=[
                    tencentcloud.monitor.AlarmPolicyConditionsRuleArgs(
                        continue_period=5,
                        description="CPUUtilization",
                        is_power_notice=0,
                        metric_name="CpuUsage",
                        notice_frequency=7200,
                        operator="gt",
                        period=60,
                        rule_type="STATIC",
                        unit="%",
                        value="95",
                    ),
                    tencentcloud.monitor.AlarmPolicyConditionsRuleArgs(
                        continue_period=5,
                        description="PublicBandwidthUtilization",
                        is_power_notice=0,
                        metric_name="Outratio",
                        notice_frequency=7200,
                        operator="gt",
                        period=60,
                        rule_type="STATIC",
                        unit="%",
                        value="95",
                    ),
                    tencentcloud.monitor.AlarmPolicyConditionsRuleArgs(
                        continue_period=5,
                        description="MemoryUtilization",
                        is_power_notice=0,
                        metric_name="MemUsage",
                        notice_frequency=7200,
                        operator="gt",
                        period=60,
                        rule_type="STATIC",
                        unit="%",
                        value="95",
                    ),
                    tencentcloud.monitor.AlarmPolicyConditionsRuleArgs(
                        continue_period=5,
                        description="DiskUtilization",
                        is_power_notice=0,
                        metric_name="CvmDiskUsage",
                        notice_frequency=7200,
                        operator="gt",
                        period=60,
                        rule_type="STATIC",
                        unit="%",
                        value="95",
                    ),
                ],
            ),
            enable=1,
            event_conditions=[tencentcloud.monitor.AlarmPolicyEventConditionArgs(
                continue_period=0,
                description="DiskReadonly",
                is_power_notice=0,
                metric_name="disk_readonly",
                notice_frequency=0,
                period=0,
            )],
            monitor_type="MT_QCE",
            namespace="cvm_device",
            notice_ids=["notice-l9ziyxw6"],
            policy_name="policy",
            policy_tags=[tencentcloud.monitor.AlarmPolicyPolicyTagArgs(
                key="test-tag",
                value="unit-test",
            )],
            project_id=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Alarm policy instance can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Monitor/alarmPolicy:AlarmPolicy policy policy-id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AlarmPolicyConditionsArgs']] conditions: A list of metric trigger condition.
        :param pulumi.Input[int] conditon_template_id: ID of trigger condition template.
        :param pulumi.Input[int] enable: Whether to enable, default is `1`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyEventConditionArgs']]]] event_conditions: A list of event trigger condition.
        :param pulumi.Input[pulumi.InputType['AlarmPolicyFilterArgs']] filter: Global filters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Aggregate dimension list, specify which dimension keys to use for group by.
        :param pulumi.Input[str] monitor_type: The type of monitor.
        :param pulumi.Input[str] namespace: The type of alarm.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notice_ids: List of notification rule IDs.
        :param pulumi.Input[str] policy_name: The name of policy.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyPolicyTagArgs']]]] policy_tags: Policy tag to bind object.
        :param pulumi.Input[int] project_id: Project ID. For products with different projects, a value other than -1 must be passed in.
        :param pulumi.Input[str] remark: The remark of policy group.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyTriggerTaskArgs']]]] trigger_tasks: Triggered task list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AlarmPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a alarm policy resource for monitor.

        ## Example Usage

        ### cvm_device alarm policy

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo_alarm_notice = tencentcloud.monitor.AlarmNotice("fooAlarmNotice",
            notice_type="ALL",
            notice_language="zh-CN",
            user_notices=[tencentcloud.monitor.AlarmNoticeUserNoticeArgs(
                receiver_type="USER",
                start_time=0,
                end_time=1,
                notice_ways=[
                    "SMS",
                    "EMAIL",
                ],
                user_ids=[10001],
                group_ids=[],
                phone_orders=[10001],
                phone_circle_times=2,
                phone_circle_interval=50,
                phone_inner_interval=60,
                need_phone_arrive_notice=1,
                phone_call_type="CIRCLE",
                weekdays=[
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                ],
            )],
            url_notices=[tencentcloud.monitor.AlarmNoticeUrlNoticeArgs(
                url="https://www.mytest.com/validate",
                end_time=0,
                start_time=1,
                weekdays=[
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                ],
            )])
        foo_alarm_policy = tencentcloud.monitor.AlarmPolicy("fooAlarmPolicy",
            policy_name="tf-policy",
            monitor_type="MT_QCE",
            enable=1,
            project_id=0,
            namespace="cvm_device",
            conditions=tencentcloud.monitor.AlarmPolicyConditionsArgs(
                is_union_rule=1,
                rules=[tencentcloud.monitor.AlarmPolicyConditionsRuleArgs(
                    metric_name="CpuUsage",
                    period=60,
                    operator="ge",
                    value="89.9",
                    continue_period=1,
                    notice_frequency=3600,
                    is_power_notice=0,
                )],
            ),
            event_conditions=[
                tencentcloud.monitor.AlarmPolicyEventConditionArgs(
                    metric_name="ping_unreachable",
                ),
                tencentcloud.monitor.AlarmPolicyEventConditionArgs(
                    metric_name="guest_reboot",
                ),
            ],
            notice_ids=[foo_alarm_notice.id],
            trigger_tasks=[tencentcloud.monitor.AlarmPolicyTriggerTaskArgs(
                type="AS",
                task_config="{\\"Region\\":\\"ap-guangzhou\\",\\"Group\\":\\"asg-0z312312x\\",\\"Policy\\":\\"asp-ganig28\\"}",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### k8s_cluster alarm policy

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import tencentcloud_iac_pulumi as tencentcloud

        policy = tencentcloud.monitor.AlarmPolicy("policy",
            enable=1,
            monitor_type="MT_QCE",
            namespace="k8s_cluster",
            notice_ids=["notice-l9ziyxw6"],
            policy_name="TkeClusterNew",
            project_id=1244035,
            conditions=tencentcloud.monitor.AlarmPolicyConditionsArgs(
                is_union_rule=0,
                rules=[
                    tencentcloud.monitor.AlarmPolicyConditionsRuleArgs(
                        continue_period=3,
                        description="Allocatable Pods",
                        is_power_notice=0,
                        metric_name="K8sClusterAllocatablePodsTotal",
                        notice_frequency=3600,
                        operator="gt",
                        period=60,
                        rule_type="STATIC",
                        unit="Count",
                        value="10",
                        filter=tencentcloud.monitor.AlarmPolicyConditionsRuleFilterArgs(
                            dimensions=json.dumps([[
                                {
                                    "Key": "region",
                                    "Operator": "eq",
                                    "Value": ["ap-guangzhou"],
                                },
                                {
                                    "Key": "tke_cluster_instance_id",
                                    "Operator": "in",
                                    "Value": ["cls-czhtobea"],
                                },
                            ]]),
                            type="DIMENSION",
                        ),
                    ),
                    tencentcloud.monitor.AlarmPolicyConditionsRuleArgs(
                        continue_period=3,
                        description="Total CPU Cores",
                        is_power_notice=0,
                        metric_name="K8sClusterCpuCoreTotal",
                        notice_frequency=3600,
                        operator="gt",
                        period=60,
                        rule_type="STATIC",
                        unit="Core",
                        value="2",
                        filter=tencentcloud.monitor.AlarmPolicyConditionsRuleFilterArgs(
                            dimensions=json.dumps([[
                                {
                                    "Key": "region",
                                    "Operator": "eq",
                                    "Value": ["ap-guangzhou"],
                                },
                                {
                                    "Key": "tke_cluster_instance_id",
                                    "Operator": "in",
                                    "Value": ["cls-czhtobea"],
                                },
                            ]]),
                            type="DIMENSION",
                        ),
                    ),
                ],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### cvm_device alarm policy binding cvm by tag

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        policy = tencentcloud.monitor.AlarmPolicy("policy",
            conditions=tencentcloud.monitor.AlarmPolicyConditionsArgs(
                is_union_rule=0,
                rules=[
                    tencentcloud.monitor.AlarmPolicyConditionsRuleArgs(
                        continue_period=5,
                        description="CPUUtilization",
                        is_power_notice=0,
                        metric_name="CpuUsage",
                        notice_frequency=7200,
                        operator="gt",
                        period=60,
                        rule_type="STATIC",
                        unit="%",
                        value="95",
                    ),
                    tencentcloud.monitor.AlarmPolicyConditionsRuleArgs(
                        continue_period=5,
                        description="PublicBandwidthUtilization",
                        is_power_notice=0,
                        metric_name="Outratio",
                        notice_frequency=7200,
                        operator="gt",
                        period=60,
                        rule_type="STATIC",
                        unit="%",
                        value="95",
                    ),
                    tencentcloud.monitor.AlarmPolicyConditionsRuleArgs(
                        continue_period=5,
                        description="MemoryUtilization",
                        is_power_notice=0,
                        metric_name="MemUsage",
                        notice_frequency=7200,
                        operator="gt",
                        period=60,
                        rule_type="STATIC",
                        unit="%",
                        value="95",
                    ),
                    tencentcloud.monitor.AlarmPolicyConditionsRuleArgs(
                        continue_period=5,
                        description="DiskUtilization",
                        is_power_notice=0,
                        metric_name="CvmDiskUsage",
                        notice_frequency=7200,
                        operator="gt",
                        period=60,
                        rule_type="STATIC",
                        unit="%",
                        value="95",
                    ),
                ],
            ),
            enable=1,
            event_conditions=[tencentcloud.monitor.AlarmPolicyEventConditionArgs(
                continue_period=0,
                description="DiskReadonly",
                is_power_notice=0,
                metric_name="disk_readonly",
                notice_frequency=0,
                period=0,
            )],
            monitor_type="MT_QCE",
            namespace="cvm_device",
            notice_ids=["notice-l9ziyxw6"],
            policy_name="policy",
            policy_tags=[tencentcloud.monitor.AlarmPolicyPolicyTagArgs(
                key="test-tag",
                value="unit-test",
            )],
            project_id=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Alarm policy instance can be imported, e.g.

        ```sh
        $ pulumi import tencentcloud:Monitor/alarmPolicy:AlarmPolicy policy policy-id
        ```

        :param str resource_name: The name of the resource.
        :param AlarmPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AlarmPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 conditions: Optional[pulumi.Input[pulumi.InputType['AlarmPolicyConditionsArgs']]] = None,
                 conditon_template_id: Optional[pulumi.Input[int]] = None,
                 enable: Optional[pulumi.Input[int]] = None,
                 event_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyEventConditionArgs']]]]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['AlarmPolicyFilterArgs']]] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 monitor_type: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 notice_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None,
                 policy_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyPolicyTagArgs']]]]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 trigger_tasks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyTriggerTaskArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AlarmPolicyArgs.__new__(AlarmPolicyArgs)

            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["conditon_template_id"] = conditon_template_id
            __props__.__dict__["enable"] = enable
            __props__.__dict__["event_conditions"] = event_conditions
            __props__.__dict__["filter"] = filter
            __props__.__dict__["group_bies"] = group_bies
            if monitor_type is None and not opts.urn:
                raise TypeError("Missing required property 'monitor_type'")
            __props__.__dict__["monitor_type"] = monitor_type
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["notice_ids"] = notice_ids
            if policy_name is None and not opts.urn:
                raise TypeError("Missing required property 'policy_name'")
            __props__.__dict__["policy_name"] = policy_name
            __props__.__dict__["policy_tags"] = policy_tags
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["remark"] = remark
            __props__.__dict__["trigger_tasks"] = trigger_tasks
            __props__.__dict__["create_time"] = None
            __props__.__dict__["update_time"] = None
        super(AlarmPolicy, __self__).__init__(
            'tencentcloud:Monitor/alarmPolicy:AlarmPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            conditions: Optional[pulumi.Input[pulumi.InputType['AlarmPolicyConditionsArgs']]] = None,
            conditon_template_id: Optional[pulumi.Input[int]] = None,
            create_time: Optional[pulumi.Input[str]] = None,
            enable: Optional[pulumi.Input[int]] = None,
            event_conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyEventConditionArgs']]]]] = None,
            filter: Optional[pulumi.Input[pulumi.InputType['AlarmPolicyFilterArgs']]] = None,
            group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            monitor_type: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            notice_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            policy_name: Optional[pulumi.Input[str]] = None,
            policy_tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyPolicyTagArgs']]]]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            remark: Optional[pulumi.Input[str]] = None,
            trigger_tasks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyTriggerTaskArgs']]]]] = None,
            update_time: Optional[pulumi.Input[str]] = None) -> 'AlarmPolicy':
        """
        Get an existing AlarmPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AlarmPolicyConditionsArgs']] conditions: A list of metric trigger condition.
        :param pulumi.Input[int] conditon_template_id: ID of trigger condition template.
        :param pulumi.Input[str] create_time: The alarm policy create time.
        :param pulumi.Input[int] enable: Whether to enable, default is `1`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyEventConditionArgs']]]] event_conditions: A list of event trigger condition.
        :param pulumi.Input[pulumi.InputType['AlarmPolicyFilterArgs']] filter: Global filters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Aggregate dimension list, specify which dimension keys to use for group by.
        :param pulumi.Input[str] monitor_type: The type of monitor.
        :param pulumi.Input[str] namespace: The type of alarm.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notice_ids: List of notification rule IDs.
        :param pulumi.Input[str] policy_name: The name of policy.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyPolicyTagArgs']]]] policy_tags: Policy tag to bind object.
        :param pulumi.Input[int] project_id: Project ID. For products with different projects, a value other than -1 must be passed in.
        :param pulumi.Input[str] remark: The remark of policy group.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlarmPolicyTriggerTaskArgs']]]] trigger_tasks: Triggered task list.
        :param pulumi.Input[str] update_time: The alarm policy update time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AlarmPolicyState.__new__(_AlarmPolicyState)

        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["conditon_template_id"] = conditon_template_id
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["enable"] = enable
        __props__.__dict__["event_conditions"] = event_conditions
        __props__.__dict__["filter"] = filter
        __props__.__dict__["group_bies"] = group_bies
        __props__.__dict__["monitor_type"] = monitor_type
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["notice_ids"] = notice_ids
        __props__.__dict__["policy_name"] = policy_name
        __props__.__dict__["policy_tags"] = policy_tags
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["remark"] = remark
        __props__.__dict__["trigger_tasks"] = trigger_tasks
        __props__.__dict__["update_time"] = update_time
        return AlarmPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output['outputs.AlarmPolicyConditions']:
        """
        A list of metric trigger condition.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="conditonTemplateId")
    def conditon_template_id(self) -> pulumi.Output[Optional[int]]:
        """
        ID of trigger condition template.
        """
        return pulumi.get(self, "conditon_template_id")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[str]:
        """
        The alarm policy create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def enable(self) -> pulumi.Output[Optional[int]]:
        """
        Whether to enable, default is `1`.
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter(name="eventConditions")
    def event_conditions(self) -> pulumi.Output[Sequence['outputs.AlarmPolicyEventCondition']]:
        """
        A list of event trigger condition.
        """
        return pulumi.get(self, "event_conditions")

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Output[Optional['outputs.AlarmPolicyFilter']]:
        """
        Global filters.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Aggregate dimension list, specify which dimension keys to use for group by.
        """
        return pulumi.get(self, "group_bies")

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> pulumi.Output[str]:
        """
        The type of monitor.
        """
        return pulumi.get(self, "monitor_type")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[str]:
        """
        The type of alarm.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="noticeIds")
    def notice_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of notification rule IDs.
        """
        return pulumi.get(self, "notice_ids")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Output[str]:
        """
        The name of policy.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyTags")
    def policy_tags(self) -> pulumi.Output[Optional[Sequence['outputs.AlarmPolicyPolicyTag']]]:
        """
        Policy tag to bind object.
        """
        return pulumi.get(self, "policy_tags")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        Project ID. For products with different projects, a value other than -1 must be passed in.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[str]]:
        """
        The remark of policy group.
        """
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter(name="triggerTasks")
    def trigger_tasks(self) -> pulumi.Output[Optional[Sequence['outputs.AlarmPolicyTriggerTask']]]:
        """
        Triggered task list.
        """
        return pulumi.get(self, "trigger_tasks")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[str]:
        """
        The alarm policy update time.
        """
        return pulumi.get(self, "update_time")

