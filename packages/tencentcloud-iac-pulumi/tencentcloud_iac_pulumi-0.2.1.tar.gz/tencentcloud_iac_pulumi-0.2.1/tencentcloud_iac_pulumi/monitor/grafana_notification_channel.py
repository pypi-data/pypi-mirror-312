# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GrafanaNotificationChannelArgs', 'GrafanaNotificationChannel']

@pulumi.input_type
class GrafanaNotificationChannelArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 channel_name: Optional[pulumi.Input[str]] = None,
                 extra_org_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org_id: Optional[pulumi.Input[int]] = None,
                 receivers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a GrafanaNotificationChannel resource.
        :param pulumi.Input[str] instance_id: grafana instance id.
        :param pulumi.Input[str] channel_name: channel name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_org_ids: extra grafana organization id list, default to 1 representing Main Org.
        :param pulumi.Input[int] org_id: Grafana organization which channel will be installed, default to 1 representing Main Org.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] receivers: cloud monitor notification template notice-id list.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if channel_name is not None:
            pulumi.set(__self__, "channel_name", channel_name)
        if extra_org_ids is not None:
            pulumi.set(__self__, "extra_org_ids", extra_org_ids)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if receivers is not None:
            pulumi.set(__self__, "receivers", receivers)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        grafana instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="channelName")
    def channel_name(self) -> Optional[pulumi.Input[str]]:
        """
        channel name.
        """
        return pulumi.get(self, "channel_name")

    @channel_name.setter
    def channel_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_name", value)

    @property
    @pulumi.getter(name="extraOrgIds")
    def extra_org_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        extra grafana organization id list, default to 1 representing Main Org.
        """
        return pulumi.get(self, "extra_org_ids")

    @extra_org_ids.setter
    def extra_org_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_org_ids", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[int]]:
        """
        Grafana organization which channel will be installed, default to 1 representing Main Org.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def receivers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        cloud monitor notification template notice-id list.
        """
        return pulumi.get(self, "receivers")

    @receivers.setter
    def receivers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "receivers", value)


@pulumi.input_type
class _GrafanaNotificationChannelState:
    def __init__(__self__, *,
                 channel_id: Optional[pulumi.Input[str]] = None,
                 channel_name: Optional[pulumi.Input[str]] = None,
                 extra_org_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[int]] = None,
                 receivers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering GrafanaNotificationChannel resources.
        :param pulumi.Input[str] channel_id: plugin id.
        :param pulumi.Input[str] channel_name: channel name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_org_ids: extra grafana organization id list, default to 1 representing Main Org.
        :param pulumi.Input[str] instance_id: grafana instance id.
        :param pulumi.Input[int] org_id: Grafana organization which channel will be installed, default to 1 representing Main Org.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] receivers: cloud monitor notification template notice-id list.
        """
        if channel_id is not None:
            pulumi.set(__self__, "channel_id", channel_id)
        if channel_name is not None:
            pulumi.set(__self__, "channel_name", channel_name)
        if extra_org_ids is not None:
            pulumi.set(__self__, "extra_org_ids", extra_org_ids)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if org_id is not None:
            pulumi.set(__self__, "org_id", org_id)
        if receivers is not None:
            pulumi.set(__self__, "receivers", receivers)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        plugin id.
        """
        return pulumi.get(self, "channel_id")

    @channel_id.setter
    def channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_id", value)

    @property
    @pulumi.getter(name="channelName")
    def channel_name(self) -> Optional[pulumi.Input[str]]:
        """
        channel name.
        """
        return pulumi.get(self, "channel_name")

    @channel_name.setter
    def channel_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_name", value)

    @property
    @pulumi.getter(name="extraOrgIds")
    def extra_org_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        extra grafana organization id list, default to 1 representing Main Org.
        """
        return pulumi.get(self, "extra_org_ids")

    @extra_org_ids.setter
    def extra_org_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_org_ids", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        grafana instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> Optional[pulumi.Input[int]]:
        """
        Grafana organization which channel will be installed, default to 1 representing Main Org.
        """
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter
    def receivers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        cloud monitor notification template notice-id list.
        """
        return pulumi.get(self, "receivers")

    @receivers.setter
    def receivers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "receivers", value)


class GrafanaNotificationChannel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_name: Optional[pulumi.Input[str]] = None,
                 extra_org_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[int]] = None,
                 receivers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a monitor grafanaNotificationChannel

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24")
        foo_grafana_instance = tencentcloud.monitor.GrafanaInstance("fooGrafanaInstance",
            instance_name="test-grafana",
            vpc_id=vpc.id,
            subnet_ids=[subnet.id],
            grafana_init_password="1234567890",
            enable_internet=False,
            tags={
                "createdBy": "test",
            })
        foo_alarm_notice = tencentcloud.monitor.AlarmNotice("fooAlarmNotice",
            notice_type="ALL",
            notice_language="zh-CN",
            user_notices=[tencentcloud.monitor.AlarmNoticeUserNoticeArgs(
                receiver_type="USER",
                start_time=0,
                end_time=1,
                notice_ways=[
                    "SMS",
                    "EMAIL",
                ],
                user_ids=[10001],
                group_ids=[],
                phone_orders=[10001],
                phone_circle_times=2,
                phone_circle_interval=50,
                phone_inner_interval=60,
                need_phone_arrive_notice=1,
                phone_call_type="CIRCLE",
                weekdays=[
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                ],
            )],
            url_notices=[tencentcloud.monitor.AlarmNoticeUrlNoticeArgs(
                url="https://www.mytest.com/validate",
                end_time=0,
                start_time=1,
                weekdays=[
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                ],
            )])
        grafana_notification_channel = tencentcloud.monitor.GrafanaNotificationChannel("grafanaNotificationChannel",
            instance_id=foo_grafana_instance.id,
            channel_name="tf-channel",
            org_id=1,
            receivers=[foo_alarm_notice.amp_consumer_id],
            extra_org_ids=["1"])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] channel_name: channel name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_org_ids: extra grafana organization id list, default to 1 representing Main Org.
        :param pulumi.Input[str] instance_id: grafana instance id.
        :param pulumi.Input[int] org_id: Grafana organization which channel will be installed, default to 1 representing Main Org.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] receivers: cloud monitor notification template notice-id list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GrafanaNotificationChannelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a monitor grafanaNotificationChannel

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24")
        foo_grafana_instance = tencentcloud.monitor.GrafanaInstance("fooGrafanaInstance",
            instance_name="test-grafana",
            vpc_id=vpc.id,
            subnet_ids=[subnet.id],
            grafana_init_password="1234567890",
            enable_internet=False,
            tags={
                "createdBy": "test",
            })
        foo_alarm_notice = tencentcloud.monitor.AlarmNotice("fooAlarmNotice",
            notice_type="ALL",
            notice_language="zh-CN",
            user_notices=[tencentcloud.monitor.AlarmNoticeUserNoticeArgs(
                receiver_type="USER",
                start_time=0,
                end_time=1,
                notice_ways=[
                    "SMS",
                    "EMAIL",
                ],
                user_ids=[10001],
                group_ids=[],
                phone_orders=[10001],
                phone_circle_times=2,
                phone_circle_interval=50,
                phone_inner_interval=60,
                need_phone_arrive_notice=1,
                phone_call_type="CIRCLE",
                weekdays=[
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                ],
            )],
            url_notices=[tencentcloud.monitor.AlarmNoticeUrlNoticeArgs(
                url="https://www.mytest.com/validate",
                end_time=0,
                start_time=1,
                weekdays=[
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                ],
            )])
        grafana_notification_channel = tencentcloud.monitor.GrafanaNotificationChannel("grafanaNotificationChannel",
            instance_id=foo_grafana_instance.id,
            channel_name="tf-channel",
            org_id=1,
            receivers=[foo_alarm_notice.amp_consumer_id],
            extra_org_ids=["1"])
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param GrafanaNotificationChannelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GrafanaNotificationChannelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channel_name: Optional[pulumi.Input[str]] = None,
                 extra_org_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 org_id: Optional[pulumi.Input[int]] = None,
                 receivers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GrafanaNotificationChannelArgs.__new__(GrafanaNotificationChannelArgs)

            __props__.__dict__["channel_name"] = channel_name
            __props__.__dict__["extra_org_ids"] = extra_org_ids
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["org_id"] = org_id
            __props__.__dict__["receivers"] = receivers
            __props__.__dict__["channel_id"] = None
        super(GrafanaNotificationChannel, __self__).__init__(
            'tencentcloud:Monitor/grafanaNotificationChannel:GrafanaNotificationChannel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            channel_id: Optional[pulumi.Input[str]] = None,
            channel_name: Optional[pulumi.Input[str]] = None,
            extra_org_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            org_id: Optional[pulumi.Input[int]] = None,
            receivers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'GrafanaNotificationChannel':
        """
        Get an existing GrafanaNotificationChannel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] channel_id: plugin id.
        :param pulumi.Input[str] channel_name: channel name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_org_ids: extra grafana organization id list, default to 1 representing Main Org.
        :param pulumi.Input[str] instance_id: grafana instance id.
        :param pulumi.Input[int] org_id: Grafana organization which channel will be installed, default to 1 representing Main Org.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] receivers: cloud monitor notification template notice-id list.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GrafanaNotificationChannelState.__new__(_GrafanaNotificationChannelState)

        __props__.__dict__["channel_id"] = channel_id
        __props__.__dict__["channel_name"] = channel_name
        __props__.__dict__["extra_org_ids"] = extra_org_ids
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["org_id"] = org_id
        __props__.__dict__["receivers"] = receivers
        return GrafanaNotificationChannel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> pulumi.Output[str]:
        """
        plugin id.
        """
        return pulumi.get(self, "channel_id")

    @property
    @pulumi.getter(name="channelName")
    def channel_name(self) -> pulumi.Output[str]:
        """
        channel name.
        """
        return pulumi.get(self, "channel_name")

    @property
    @pulumi.getter(name="extraOrgIds")
    def extra_org_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        extra grafana organization id list, default to 1 representing Main Org.
        """
        return pulumi.get(self, "extra_org_ids")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        grafana instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Output[int]:
        """
        Grafana organization which channel will be installed, default to 1 representing Main Org.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def receivers(self) -> pulumi.Output[Sequence[str]]:
        """
        cloud monitor notification template notice-id list.
        """
        return pulumi.get(self, "receivers")

