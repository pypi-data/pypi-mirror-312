# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAlarmAllNamespacesResult',
    'AwaitableGetAlarmAllNamespacesResult',
    'get_alarm_all_namespaces',
    'get_alarm_all_namespaces_output',
]

@pulumi.output_type
class GetAlarmAllNamespacesResult:
    """
    A collection of values returned by getAlarmAllNamespaces.
    """
    def __init__(__self__, common_namespaces=None, custom_namespaces_news=None, id=None, ids=None, module=None, monitor_types=None, qce_namespaces_news=None, result_output_file=None, scene_type=None):
        if common_namespaces and not isinstance(common_namespaces, list):
            raise TypeError("Expected argument 'common_namespaces' to be a list")
        pulumi.set(__self__, "common_namespaces", common_namespaces)
        if custom_namespaces_news and not isinstance(custom_namespaces_news, list):
            raise TypeError("Expected argument 'custom_namespaces_news' to be a list")
        pulumi.set(__self__, "custom_namespaces_news", custom_namespaces_news)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)
        if module and not isinstance(module, str):
            raise TypeError("Expected argument 'module' to be a str")
        pulumi.set(__self__, "module", module)
        if monitor_types and not isinstance(monitor_types, list):
            raise TypeError("Expected argument 'monitor_types' to be a list")
        pulumi.set(__self__, "monitor_types", monitor_types)
        if qce_namespaces_news and not isinstance(qce_namespaces_news, list):
            raise TypeError("Expected argument 'qce_namespaces_news' to be a list")
        pulumi.set(__self__, "qce_namespaces_news", qce_namespaces_news)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if scene_type and not isinstance(scene_type, str):
            raise TypeError("Expected argument 'scene_type' to be a str")
        pulumi.set(__self__, "scene_type", scene_type)

    @property
    @pulumi.getter(name="commonNamespaces")
    def common_namespaces(self) -> Sequence['outputs.GetAlarmAllNamespacesCommonNamespaceResult']:
        """
        General alarm strategy types (including: application performance monitoring, front-end performance monitoring, cloud dial testing).
        """
        return pulumi.get(self, "common_namespaces")

    @property
    @pulumi.getter(name="customNamespacesNews")
    def custom_namespaces_news(self) -> Sequence['outputs.GetAlarmAllNamespacesCustomNamespacesNewsResult']:
        """
        Other alarm strategy types are currently not supported.
        """
        return pulumi.get(self, "custom_namespaces_news")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ids")

    @property
    @pulumi.getter
    def module(self) -> str:
        return pulumi.get(self, "module")

    @property
    @pulumi.getter(name="monitorTypes")
    def monitor_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "monitor_types")

    @property
    @pulumi.getter(name="qceNamespacesNews")
    def qce_namespaces_news(self) -> Sequence['outputs.GetAlarmAllNamespacesQceNamespacesNewsResult']:
        """
        Types of alarm strategies for cloud products.
        """
        return pulumi.get(self, "qce_namespaces_news")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="sceneType")
    def scene_type(self) -> str:
        return pulumi.get(self, "scene_type")


class AwaitableGetAlarmAllNamespacesResult(GetAlarmAllNamespacesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlarmAllNamespacesResult(
            common_namespaces=self.common_namespaces,
            custom_namespaces_news=self.custom_namespaces_news,
            id=self.id,
            ids=self.ids,
            module=self.module,
            monitor_types=self.monitor_types,
            qce_namespaces_news=self.qce_namespaces_news,
            result_output_file=self.result_output_file,
            scene_type=self.scene_type)


def get_alarm_all_namespaces(ids: Optional[Sequence[str]] = None,
                             module: Optional[str] = None,
                             monitor_types: Optional[Sequence[str]] = None,
                             result_output_file: Optional[str] = None,
                             scene_type: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlarmAllNamespacesResult:
    """
    Use this data source to query detailed information of monitor alarm_all_namespaces

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    alarm_all_namespaces = tencentcloud.Monitor.get_alarm_all_namespaces(ids=["qaap_tunnel_l4_listeners"],
        module="monitor",
        monitor_types=["MT_QCE"],
        scene_type="ST_ALARM")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] ids: Filter based on the Id of the namespace without filling in the default query for all.
    :param str module: Fixed value, as `monitor`.
    :param Sequence[str] monitor_types: Filter based on monitoring type, do not fill in default, check all types MT_QCE=cloud product monitoring.
    :param str result_output_file: Used to save results.
    :param str scene_type: Currently, only ST_ALARM=alarm type is filtered based on usage scenarios.
    """
    __args__ = dict()
    __args__['ids'] = ids
    __args__['module'] = module
    __args__['monitorTypes'] = monitor_types
    __args__['resultOutputFile'] = result_output_file
    __args__['sceneType'] = scene_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Monitor/getAlarmAllNamespaces:getAlarmAllNamespaces', __args__, opts=opts, typ=GetAlarmAllNamespacesResult).value

    return AwaitableGetAlarmAllNamespacesResult(
        common_namespaces=pulumi.get(__ret__, 'common_namespaces'),
        custom_namespaces_news=pulumi.get(__ret__, 'custom_namespaces_news'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'),
        module=pulumi.get(__ret__, 'module'),
        monitor_types=pulumi.get(__ret__, 'monitor_types'),
        qce_namespaces_news=pulumi.get(__ret__, 'qce_namespaces_news'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        scene_type=pulumi.get(__ret__, 'scene_type'))


@_utilities.lift_output_func(get_alarm_all_namespaces)
def get_alarm_all_namespaces_output(ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                    module: Optional[pulumi.Input[str]] = None,
                                    monitor_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                    result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                    scene_type: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAlarmAllNamespacesResult]:
    """
    Use this data source to query detailed information of monitor alarm_all_namespaces

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    alarm_all_namespaces = tencentcloud.Monitor.get_alarm_all_namespaces(ids=["qaap_tunnel_l4_listeners"],
        module="monitor",
        monitor_types=["MT_QCE"],
        scene_type="ST_ALARM")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] ids: Filter based on the Id of the namespace without filling in the default query for all.
    :param str module: Fixed value, as `monitor`.
    :param Sequence[str] monitor_types: Filter based on monitoring type, do not fill in default, check all types MT_QCE=cloud product monitoring.
    :param str result_output_file: Used to save results.
    :param str scene_type: Currently, only ST_ALARM=alarm type is filtered based on usage scenarios.
    """
    ...
