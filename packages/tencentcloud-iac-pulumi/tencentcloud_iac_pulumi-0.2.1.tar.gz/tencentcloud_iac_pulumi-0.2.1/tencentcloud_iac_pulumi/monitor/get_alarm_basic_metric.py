# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAlarmBasicMetricResult',
    'AwaitableGetAlarmBasicMetricResult',
    'get_alarm_basic_metric',
    'get_alarm_basic_metric_output',
]

@pulumi.output_type
class GetAlarmBasicMetricResult:
    """
    A collection of values returned by getAlarmBasicMetric.
    """
    def __init__(__self__, dimensions=None, id=None, metric_name=None, metric_sets=None, namespace=None, result_output_file=None):
        if dimensions and not isinstance(dimensions, list):
            raise TypeError("Expected argument 'dimensions' to be a list")
        pulumi.set(__self__, "dimensions", dimensions)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metric_name and not isinstance(metric_name, str):
            raise TypeError("Expected argument 'metric_name' to be a str")
        pulumi.set(__self__, "metric_name", metric_name)
        if metric_sets and not isinstance(metric_sets, list):
            raise TypeError("Expected argument 'metric_sets' to be a list")
        pulumi.set(__self__, "metric_sets", metric_sets)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence[str]]:
        """
        Dimension name array.
        """
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        """
        Indicator Name.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="metricSets")
    def metric_sets(self) -> Sequence['outputs.GetAlarmBasicMetricMetricSetResult']:
        """
        List of indicator descriptions obtained from query.
        """
        return pulumi.get(self, "metric_sets")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespaces, each cloud product will have a namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetAlarmBasicMetricResult(GetAlarmBasicMetricResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlarmBasicMetricResult(
            dimensions=self.dimensions,
            id=self.id,
            metric_name=self.metric_name,
            metric_sets=self.metric_sets,
            namespace=self.namespace,
            result_output_file=self.result_output_file)


def get_alarm_basic_metric(dimensions: Optional[Sequence[str]] = None,
                           metric_name: Optional[str] = None,
                           namespace: Optional[str] = None,
                           result_output_file: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlarmBasicMetricResult:
    """
    Use this data source to query detailed information of monitor basic_metric

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    alarm_metric = tencentcloud.Monitor.get_alarm_basic_metric(dimensions=["uuid"],
        metric_name="WanOuttraffic",
        namespace="qce/cvm")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] dimensions: Optional parameters, filtered by dimension.
    :param str metric_name: Indicator names are different for each cloud product. To obtain indicator names, please go to the monitoring indicator documents of each product, such as the indicator names of cloud servers, which can be found in Cloud Server Monitoring Indicators.
    :param str namespace: The business namespace is different for each cloud product. To obtain the business namespace, please go to the product monitoring indicator documents, such as the namespace of the cloud server, which can be found in [Cloud Server Monitoring Indicators](https://cloud.tencent.com/document/product/248/6843 ).
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['dimensions'] = dimensions
    __args__['metricName'] = metric_name
    __args__['namespace'] = namespace
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Monitor/getAlarmBasicMetric:getAlarmBasicMetric', __args__, opts=opts, typ=GetAlarmBasicMetricResult).value

    return AwaitableGetAlarmBasicMetricResult(
        dimensions=pulumi.get(__ret__, 'dimensions'),
        id=pulumi.get(__ret__, 'id'),
        metric_name=pulumi.get(__ret__, 'metric_name'),
        metric_sets=pulumi.get(__ret__, 'metric_sets'),
        namespace=pulumi.get(__ret__, 'namespace'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_alarm_basic_metric)
def get_alarm_basic_metric_output(dimensions: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                  metric_name: Optional[pulumi.Input[Optional[str]]] = None,
                                  namespace: Optional[pulumi.Input[str]] = None,
                                  result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAlarmBasicMetricResult]:
    """
    Use this data source to query detailed information of monitor basic_metric

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    alarm_metric = tencentcloud.Monitor.get_alarm_basic_metric(dimensions=["uuid"],
        metric_name="WanOuttraffic",
        namespace="qce/cvm")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] dimensions: Optional parameters, filtered by dimension.
    :param str metric_name: Indicator names are different for each cloud product. To obtain indicator names, please go to the monitoring indicator documents of each product, such as the indicator names of cloud servers, which can be found in Cloud Server Monitoring Indicators.
    :param str namespace: The business namespace is different for each cloud product. To obtain the business namespace, please go to the product monitoring indicator documents, such as the namespace of the cloud server, which can be found in [Cloud Server Monitoring Indicators](https://cloud.tencent.com/document/product/248/6843 ).
    :param str result_output_file: Used to save results.
    """
    ...
