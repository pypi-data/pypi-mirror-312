# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BindingReceiverArgs', 'BindingReceiver']

@pulumi.input_type
class BindingReceiverArgs:
    def __init__(__self__, *,
                 group_id: pulumi.Input[int],
                 receivers: Optional[pulumi.Input['BindingReceiverReceiversArgs']] = None):
        """
        The set of arguments for constructing a BindingReceiver resource.
        :param pulumi.Input[int] group_id: Policy group ID for binding receivers.
        :param pulumi.Input['BindingReceiverReceiversArgs'] receivers: A list of receivers(will overwrite the configuration of the server or other resources). Each element contains the following attributes:
        """
        pulumi.set(__self__, "group_id", group_id)
        if receivers is not None:
            pulumi.set(__self__, "receivers", receivers)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[int]:
        """
        Policy group ID for binding receivers.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def receivers(self) -> Optional[pulumi.Input['BindingReceiverReceiversArgs']]:
        """
        A list of receivers(will overwrite the configuration of the server or other resources). Each element contains the following attributes:
        """
        return pulumi.get(self, "receivers")

    @receivers.setter
    def receivers(self, value: Optional[pulumi.Input['BindingReceiverReceiversArgs']]):
        pulumi.set(self, "receivers", value)


@pulumi.input_type
class _BindingReceiverState:
    def __init__(__self__, *,
                 group_id: Optional[pulumi.Input[int]] = None,
                 receivers: Optional[pulumi.Input['BindingReceiverReceiversArgs']] = None):
        """
        Input properties used for looking up and filtering BindingReceiver resources.
        :param pulumi.Input[int] group_id: Policy group ID for binding receivers.
        :param pulumi.Input['BindingReceiverReceiversArgs'] receivers: A list of receivers(will overwrite the configuration of the server or other resources). Each element contains the following attributes:
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if receivers is not None:
            pulumi.set(__self__, "receivers", receivers)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[int]]:
        """
        Policy group ID for binding receivers.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def receivers(self) -> Optional[pulumi.Input['BindingReceiverReceiversArgs']]:
        """
        A list of receivers(will overwrite the configuration of the server or other resources). Each element contains the following attributes:
        """
        return pulumi.get(self, "receivers")

    @receivers.setter
    def receivers(self, value: Optional[pulumi.Input['BindingReceiverReceiversArgs']]):
        pulumi.set(self, "receivers", value)


class BindingReceiver(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 receivers: Optional[pulumi.Input[pulumi.InputType['BindingReceiverReceiversArgs']]] = None,
                 __props__=None):
        """
        Provides a resource for bind receivers to a policy group resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] group_id: Policy group ID for binding receivers.
        :param pulumi.Input[pulumi.InputType['BindingReceiverReceiversArgs']] receivers: A list of receivers(will overwrite the configuration of the server or other resources). Each element contains the following attributes:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BindingReceiverArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource for bind receivers to a policy group resource.

        :param str resource_name: The name of the resource.
        :param BindingReceiverArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BindingReceiverArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 receivers: Optional[pulumi.Input[pulumi.InputType['BindingReceiverReceiversArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BindingReceiverArgs.__new__(BindingReceiverArgs)

            if group_id is None and not opts.urn:
                raise TypeError("Missing required property 'group_id'")
            __props__.__dict__["group_id"] = group_id
            __props__.__dict__["receivers"] = receivers
        super(BindingReceiver, __self__).__init__(
            'tencentcloud:Monitor/bindingReceiver:BindingReceiver',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            group_id: Optional[pulumi.Input[int]] = None,
            receivers: Optional[pulumi.Input[pulumi.InputType['BindingReceiverReceiversArgs']]] = None) -> 'BindingReceiver':
        """
        Get an existing BindingReceiver resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] group_id: Policy group ID for binding receivers.
        :param pulumi.Input[pulumi.InputType['BindingReceiverReceiversArgs']] receivers: A list of receivers(will overwrite the configuration of the server or other resources). Each element contains the following attributes:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BindingReceiverState.__new__(_BindingReceiverState)

        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["receivers"] = receivers
        return BindingReceiver(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[int]:
        """
        Policy group ID for binding receivers.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def receivers(self) -> pulumi.Output[Optional['outputs.BindingReceiverReceivers']]:
        """
        A list of receivers(will overwrite the configuration of the server or other resources). Each element contains the following attributes:
        """
        return pulumi.get(self, "receivers")

