# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAlarmNoticesResult',
    'AwaitableGetAlarmNoticesResult',
    'get_alarm_notices',
    'get_alarm_notices_output',
]

@pulumi.output_type
class GetAlarmNoticesResult:
    """
    A collection of values returned by getAlarmNotices.
    """
    def __init__(__self__, alarm_notices=None, group_ids=None, id=None, name=None, notice_ids=None, order=None, owner_uid=None, receiver_type=None, result_output_file=None, user_ids=None):
        if alarm_notices and not isinstance(alarm_notices, list):
            raise TypeError("Expected argument 'alarm_notices' to be a list")
        pulumi.set(__self__, "alarm_notices", alarm_notices)
        if group_ids and not isinstance(group_ids, list):
            raise TypeError("Expected argument 'group_ids' to be a list")
        pulumi.set(__self__, "group_ids", group_ids)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notice_ids and not isinstance(notice_ids, list):
            raise TypeError("Expected argument 'notice_ids' to be a list")
        pulumi.set(__self__, "notice_ids", notice_ids)
        if order and not isinstance(order, str):
            raise TypeError("Expected argument 'order' to be a str")
        pulumi.set(__self__, "order", order)
        if owner_uid and not isinstance(owner_uid, int):
            raise TypeError("Expected argument 'owner_uid' to be a int")
        pulumi.set(__self__, "owner_uid", owner_uid)
        if receiver_type and not isinstance(receiver_type, str):
            raise TypeError("Expected argument 'receiver_type' to be a str")
        pulumi.set(__self__, "receiver_type", receiver_type)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if user_ids and not isinstance(user_ids, list):
            raise TypeError("Expected argument 'user_ids' to be a list")
        pulumi.set(__self__, "user_ids", user_ids)

    @property
    @pulumi.getter(name="alarmNotices")
    def alarm_notices(self) -> Sequence['outputs.GetAlarmNoticesAlarmNoticeResult']:
        """
        Alarm notification template list.
        """
        return pulumi.get(self, "alarm_notices")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[Sequence[int]]:
        """
        User group ID list.
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Alarm notification template name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="noticeIds")
    def notice_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "notice_ids")

    @property
    @pulumi.getter
    def order(self) -> Optional[str]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="ownerUid")
    def owner_uid(self) -> Optional[int]:
        return pulumi.get(self, "owner_uid")

    @property
    @pulumi.getter(name="receiverType")
    def receiver_type(self) -> Optional[str]:
        """
        Recipient Type USER=User GROUP=User Group.
        """
        return pulumi.get(self, "receiver_type")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="userIds")
    def user_ids(self) -> Optional[Sequence[int]]:
        """
        User UID List.
        """
        return pulumi.get(self, "user_ids")


class AwaitableGetAlarmNoticesResult(GetAlarmNoticesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlarmNoticesResult(
            alarm_notices=self.alarm_notices,
            group_ids=self.group_ids,
            id=self.id,
            name=self.name,
            notice_ids=self.notice_ids,
            order=self.order,
            owner_uid=self.owner_uid,
            receiver_type=self.receiver_type,
            result_output_file=self.result_output_file,
            user_ids=self.user_ids)


def get_alarm_notices(group_ids: Optional[Sequence[int]] = None,
                      name: Optional[str] = None,
                      notice_ids: Optional[Sequence[str]] = None,
                      order: Optional[str] = None,
                      owner_uid: Optional[int] = None,
                      receiver_type: Optional[str] = None,
                      result_output_file: Optional[str] = None,
                      user_ids: Optional[Sequence[int]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAlarmNoticesResult:
    """
    Use this data source to Interlude notification list.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    notices = tencentcloud.Monitor.get_alarm_notices(group_ids=[],
        name="",
        notice_ids=[],
        order="DESC",
        owner_uid=1,
        receiver_type="",
        user_ids=[])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[int] group_ids: Receive group list.
    :param str name: Alarm notification template name Used for fuzzy search.
    :param Sequence[str] notice_ids: Receive group list.
    :param str order: Sort by update time ASC=forward order DESC=reverse order.
    :param int owner_uid: The primary account uid is used to create a preset notification.
    :param str receiver_type: To filter alarm notification templates according to recipients, you need to select the notification user type. USER=user GROUP=user group Leave blank = not filter by recipient.
    :param str result_output_file: Used to store results.
    :param Sequence[int] user_ids: List of recipients.
    """
    __args__ = dict()
    __args__['groupIds'] = group_ids
    __args__['name'] = name
    __args__['noticeIds'] = notice_ids
    __args__['order'] = order
    __args__['ownerUid'] = owner_uid
    __args__['receiverType'] = receiver_type
    __args__['resultOutputFile'] = result_output_file
    __args__['userIds'] = user_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Monitor/getAlarmNotices:getAlarmNotices', __args__, opts=opts, typ=GetAlarmNoticesResult).value

    return AwaitableGetAlarmNoticesResult(
        alarm_notices=pulumi.get(__ret__, 'alarm_notices'),
        group_ids=pulumi.get(__ret__, 'group_ids'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        notice_ids=pulumi.get(__ret__, 'notice_ids'),
        order=pulumi.get(__ret__, 'order'),
        owner_uid=pulumi.get(__ret__, 'owner_uid'),
        receiver_type=pulumi.get(__ret__, 'receiver_type'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        user_ids=pulumi.get(__ret__, 'user_ids'))


@_utilities.lift_output_func(get_alarm_notices)
def get_alarm_notices_output(group_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                             name: Optional[pulumi.Input[Optional[str]]] = None,
                             notice_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             order: Optional[pulumi.Input[Optional[str]]] = None,
                             owner_uid: Optional[pulumi.Input[Optional[int]]] = None,
                             receiver_type: Optional[pulumi.Input[Optional[str]]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             user_ids: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAlarmNoticesResult]:
    """
    Use this data source to Interlude notification list.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    notices = tencentcloud.Monitor.get_alarm_notices(group_ids=[],
        name="",
        notice_ids=[],
        order="DESC",
        owner_uid=1,
        receiver_type="",
        user_ids=[])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[int] group_ids: Receive group list.
    :param str name: Alarm notification template name Used for fuzzy search.
    :param Sequence[str] notice_ids: Receive group list.
    :param str order: Sort by update time ASC=forward order DESC=reverse order.
    :param int owner_uid: The primary account uid is used to create a preset notification.
    :param str receiver_type: To filter alarm notification templates according to recipients, you need to select the notification user type. USER=user GROUP=user group Leave blank = not filter by recipient.
    :param str result_output_file: Used to store results.
    :param Sequence[int] user_ids: List of recipients.
    """
    ...
