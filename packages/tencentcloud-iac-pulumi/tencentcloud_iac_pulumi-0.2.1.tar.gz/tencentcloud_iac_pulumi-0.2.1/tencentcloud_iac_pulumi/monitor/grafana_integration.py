# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GrafanaIntegrationArgs', 'GrafanaIntegration']

@pulumi.input_type
class GrafanaIntegrationArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GrafanaIntegration resource.
        :param pulumi.Input[str] instance_id: grafana instance id.
        :param pulumi.Input[str] content: generated json string of given integration json schema.
        :param pulumi.Input[str] description: integration desc.
        :param pulumi.Input[str] kind: integration json schema kind.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        grafana instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        generated json string of given integration json schema.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        integration desc.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        integration json schema kind.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)


@pulumi.input_type
class _GrafanaIntegrationState:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 integration_id: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GrafanaIntegration resources.
        :param pulumi.Input[str] content: generated json string of given integration json schema.
        :param pulumi.Input[str] description: integration desc.
        :param pulumi.Input[str] instance_id: grafana instance id.
        :param pulumi.Input[str] integration_id: integration id.
        :param pulumi.Input[str] kind: integration json schema kind.
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if integration_id is not None:
            pulumi.set(__self__, "integration_id", integration_id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        generated json string of given integration json schema.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        integration desc.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        grafana instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> Optional[pulumi.Input[str]]:
        """
        integration id.
        """
        return pulumi.get(self, "integration_id")

    @integration_id.setter
    def integration_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_id", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        integration json schema kind.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)


class GrafanaIntegration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a monitor grafanaIntegration

        ## Example Usage

        ### Create a grafan instance and integrate the configuration

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24")
        foo = tencentcloud.monitor.GrafanaInstance("foo",
            instance_name="test-grafana",
            vpc_id=vpc.id,
            subnet_ids=[subnet.id],
            grafana_init_password="1234567890",
            enable_internet=False,
            tags={
                "createdBy": "test",
            })
        grafana_integration = tencentcloud.monitor.GrafanaIntegration("grafanaIntegration",
            instance_id=foo.id,
            kind="tencentcloud-monitor-app",
            content="{\\"kind\\":\\"tencentcloud-monitor-app\\",\\"spec\\":{\\"dataSourceSpec\\":{\\"authProvider\\":{\\"__anyOf\\":\\"使用密钥\\",\\"useRole\\":true,\\"secretId\\":\\"arunma@tencent.com\\",\\"secretKey\\":\\"12345678\\"},\\"name\\":\\"uint-test\\"},\\"grafanaSpec\\":{\\"organizationIds\\":[]}}}")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: generated json string of given integration json schema.
        :param pulumi.Input[str] description: integration desc.
        :param pulumi.Input[str] instance_id: grafana instance id.
        :param pulumi.Input[str] kind: integration json schema kind.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GrafanaIntegrationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a monitor grafanaIntegration

        ## Example Usage

        ### Create a grafan instance and integrate the configuration

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        config = pulumi.Config()
        availability_zone = config.get("availabilityZone")
        if availability_zone is None:
            availability_zone = "ap-guangzhou-6"
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            vpc_id=vpc.id,
            availability_zone=availability_zone,
            cidr_block="10.0.1.0/24")
        foo = tencentcloud.monitor.GrafanaInstance("foo",
            instance_name="test-grafana",
            vpc_id=vpc.id,
            subnet_ids=[subnet.id],
            grafana_init_password="1234567890",
            enable_internet=False,
            tags={
                "createdBy": "test",
            })
        grafana_integration = tencentcloud.monitor.GrafanaIntegration("grafanaIntegration",
            instance_id=foo.id,
            kind="tencentcloud-monitor-app",
            content="{\\"kind\\":\\"tencentcloud-monitor-app\\",\\"spec\\":{\\"dataSourceSpec\\":{\\"authProvider\\":{\\"__anyOf\\":\\"使用密钥\\",\\"useRole\\":true,\\"secretId\\":\\"arunma@tencent.com\\",\\"secretKey\\":\\"12345678\\"},\\"name\\":\\"uint-test\\"},\\"grafanaSpec\\":{\\"organizationIds\\":[]}}}")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param GrafanaIntegrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GrafanaIntegrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GrafanaIntegrationArgs.__new__(GrafanaIntegrationArgs)

            __props__.__dict__["content"] = content
            __props__.__dict__["description"] = description
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["kind"] = kind
            __props__.__dict__["integration_id"] = None
        super(GrafanaIntegration, __self__).__init__(
            'tencentcloud:Monitor/grafanaIntegration:GrafanaIntegration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            integration_id: Optional[pulumi.Input[str]] = None,
            kind: Optional[pulumi.Input[str]] = None) -> 'GrafanaIntegration':
        """
        Get an existing GrafanaIntegration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: generated json string of given integration json schema.
        :param pulumi.Input[str] description: integration desc.
        :param pulumi.Input[str] instance_id: grafana instance id.
        :param pulumi.Input[str] integration_id: integration id.
        :param pulumi.Input[str] kind: integration json schema kind.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GrafanaIntegrationState.__new__(_GrafanaIntegrationState)

        __props__.__dict__["content"] = content
        __props__.__dict__["description"] = description
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["integration_id"] = integration_id
        __props__.__dict__["kind"] = kind
        return GrafanaIntegration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        generated json string of given integration json schema.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        integration desc.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        grafana instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="integrationId")
    def integration_id(self) -> pulumi.Output[str]:
        """
        integration id.
        """
        return pulumi.get(self, "integration_id")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[str]:
        """
        integration json schema kind.
        """
        return pulumi.get(self, "kind")

