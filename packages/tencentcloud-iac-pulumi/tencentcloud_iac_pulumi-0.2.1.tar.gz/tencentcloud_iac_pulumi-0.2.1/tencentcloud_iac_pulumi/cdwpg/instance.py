# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 admin_password: pulumi.Input[str],
                 charge_properties: pulumi.Input['InstanceChargePropertiesArgs'],
                 instance_name: pulumi.Input[str],
                 resources: pulumi.Input[Sequence[pulumi.Input['InstanceResourceArgs']]],
                 user_subnet_id: pulumi.Input[str],
                 user_vpc_id: pulumi.Input[str],
                 zone: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[str] admin_password: cluster password.
        :param pulumi.Input['InstanceChargePropertiesArgs'] charge_properties: instance billing mode.
        :param pulumi.Input[str] instance_name: instance name.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceResourceArgs']]] resources: resource information.
        :param pulumi.Input[str] user_subnet_id: subnet.
        :param pulumi.Input[str] user_vpc_id: private network.
        :param pulumi.Input[str] zone: Availability Zone.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        """
        pulumi.set(__self__, "admin_password", admin_password)
        pulumi.set(__self__, "charge_properties", charge_properties)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "user_subnet_id", user_subnet_id)
        pulumi.set(__self__, "user_vpc_id", user_vpc_id)
        pulumi.set(__self__, "zone", zone)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> pulumi.Input[str]:
        """
        cluster password.
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="chargeProperties")
    def charge_properties(self) -> pulumi.Input['InstanceChargePropertiesArgs']:
        """
        instance billing mode.
        """
        return pulumi.get(self, "charge_properties")

    @charge_properties.setter
    def charge_properties(self, value: pulumi.Input['InstanceChargePropertiesArgs']):
        pulumi.set(self, "charge_properties", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Input[Sequence[pulumi.Input['InstanceResourceArgs']]]:
        """
        resource information.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: pulumi.Input[Sequence[pulumi.Input['InstanceResourceArgs']]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="userSubnetId")
    def user_subnet_id(self) -> pulumi.Input[str]:
        """
        subnet.
        """
        return pulumi.get(self, "user_subnet_id")

    @user_subnet_id.setter
    def user_subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_subnet_id", value)

    @property
    @pulumi.getter(name="userVpcId")
    def user_vpc_id(self) -> pulumi.Input[str]:
        """
        private network.
        """
        return pulumi.get(self, "user_vpc_id")

    @user_vpc_id.setter
    def user_vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_vpc_id", value)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        Availability Zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 charge_properties: Optional[pulumi.Input['InstanceChargePropertiesArgs']] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceResourceArgs']]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 user_subnet_id: Optional[pulumi.Input[str]] = None,
                 user_vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[str] admin_password: cluster password.
        :param pulumi.Input['InstanceChargePropertiesArgs'] charge_properties: instance billing mode.
        :param pulumi.Input[str] instance_name: instance name.
        :param pulumi.Input[Sequence[pulumi.Input['InstanceResourceArgs']]] resources: resource information.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] user_subnet_id: subnet.
        :param pulumi.Input[str] user_vpc_id: private network.
        :param pulumi.Input[str] zone: Availability Zone.
        """
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if charge_properties is not None:
            pulumi.set(__self__, "charge_properties", charge_properties)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_subnet_id is not None:
            pulumi.set(__self__, "user_subnet_id", user_subnet_id)
        if user_vpc_id is not None:
            pulumi.set(__self__, "user_vpc_id", user_vpc_id)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        """
        cluster password.
        """
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter(name="chargeProperties")
    def charge_properties(self) -> Optional[pulumi.Input['InstanceChargePropertiesArgs']]:
        """
        instance billing mode.
        """
        return pulumi.get(self, "charge_properties")

    @charge_properties.setter
    def charge_properties(self, value: Optional[pulumi.Input['InstanceChargePropertiesArgs']]):
        pulumi.set(self, "charge_properties", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        instance name.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceResourceArgs']]]]:
        """
        resource information.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceResourceArgs']]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userSubnetId")
    def user_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        subnet.
        """
        return pulumi.get(self, "user_subnet_id")

    @user_subnet_id.setter
    def user_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_subnet_id", value)

    @property
    @pulumi.getter(name="userVpcId")
    def user_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        private network.
        """
        return pulumi.get(self, "user_vpc_id")

    @user_vpc_id.setter
    def user_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_vpc_id", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability Zone.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 charge_properties: Optional[pulumi.Input[pulumi.InputType['InstanceChargePropertiesArgs']]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceResourceArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 user_subnet_id: Optional[pulumi.Input[str]] = None,
                 user_vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a cdwpg instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        instance = tencentcloud.cdwpg.Instance("instance",
            admin_password="xxxxxx",
            charge_properties=tencentcloud.cdwpg.InstanceChargePropertiesArgs(
                charge_type="POSTPAID_BY_HOUR",
                renew_flag=0,
                time_span=1,
                time_unit="h",
            ),
            instance_name="test_cdwpg",
            resources=[
                tencentcloud.cdwpg.InstanceResourceArgs(
                    count=2,
                    disk_spec=tencentcloud.cdwpg.InstanceResourceDiskSpecArgs(
                        disk_count=1,
                        disk_size=200,
                        disk_type="CLOUD_HSSD",
                    ),
                    spec_name="S_4_16_H_CN",
                    type="cn",
                ),
                tencentcloud.cdwpg.InstanceResourceArgs(
                    count=2,
                    disk_spec=tencentcloud.cdwpg.InstanceResourceDiskSpecArgs(
                        disk_count=10,
                        disk_size=20,
                        disk_type="CLOUD_HSSD",
                    ),
                    spec_name="S_4_16_H_CN",
                    type="dn",
                ),
            ],
            tags={
                "tagKey": "tagValue",
            },
            user_subnet_id="subnet-xxxxxx",
            user_vpc_id="vpc-xxxxxx",
            zone="ap-guangzhou-6")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cdwpg instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cdwpg/instance:Instance instance instance_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_password: cluster password.
        :param pulumi.Input[pulumi.InputType['InstanceChargePropertiesArgs']] charge_properties: instance billing mode.
        :param pulumi.Input[str] instance_name: instance name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceResourceArgs']]]] resources: resource information.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] user_subnet_id: subnet.
        :param pulumi.Input[str] user_vpc_id: private network.
        :param pulumi.Input[str] zone: Availability Zone.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a cdwpg instance

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        instance = tencentcloud.cdwpg.Instance("instance",
            admin_password="xxxxxx",
            charge_properties=tencentcloud.cdwpg.InstanceChargePropertiesArgs(
                charge_type="POSTPAID_BY_HOUR",
                renew_flag=0,
                time_span=1,
                time_unit="h",
            ),
            instance_name="test_cdwpg",
            resources=[
                tencentcloud.cdwpg.InstanceResourceArgs(
                    count=2,
                    disk_spec=tencentcloud.cdwpg.InstanceResourceDiskSpecArgs(
                        disk_count=1,
                        disk_size=200,
                        disk_type="CLOUD_HSSD",
                    ),
                    spec_name="S_4_16_H_CN",
                    type="cn",
                ),
                tencentcloud.cdwpg.InstanceResourceArgs(
                    count=2,
                    disk_spec=tencentcloud.cdwpg.InstanceResourceDiskSpecArgs(
                        disk_count=10,
                        disk_size=20,
                        disk_type="CLOUD_HSSD",
                    ),
                    spec_name="S_4_16_H_CN",
                    type="dn",
                ),
            ],
            tags={
                "tagKey": "tagValue",
            },
            user_subnet_id="subnet-xxxxxx",
            user_vpc_id="vpc-xxxxxx",
            zone="ap-guangzhou-6")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        cdwpg instance can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Cdwpg/instance:Instance instance instance_id
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 charge_properties: Optional[pulumi.Input[pulumi.InputType['InstanceChargePropertiesArgs']]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceResourceArgs']]]]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 user_subnet_id: Optional[pulumi.Input[str]] = None,
                 user_vpc_id: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            if admin_password is None and not opts.urn:
                raise TypeError("Missing required property 'admin_password'")
            __props__.__dict__["admin_password"] = None if admin_password is None else pulumi.Output.secret(admin_password)
            if charge_properties is None and not opts.urn:
                raise TypeError("Missing required property 'charge_properties'")
            __props__.__dict__["charge_properties"] = charge_properties
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            if resources is None and not opts.urn:
                raise TypeError("Missing required property 'resources'")
            __props__.__dict__["resources"] = resources
            __props__.__dict__["tags"] = tags
            if user_subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_subnet_id'")
            __props__.__dict__["user_subnet_id"] = user_subnet_id
            if user_vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'user_vpc_id'")
            __props__.__dict__["user_vpc_id"] = user_vpc_id
            if zone is None and not opts.urn:
                raise TypeError("Missing required property 'zone'")
            __props__.__dict__["zone"] = zone
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["adminPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'tencentcloud:Cdwpg/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_password: Optional[pulumi.Input[str]] = None,
            charge_properties: Optional[pulumi.Input[pulumi.InputType['InstanceChargePropertiesArgs']]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            resources: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceResourceArgs']]]]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            user_subnet_id: Optional[pulumi.Input[str]] = None,
            user_vpc_id: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] admin_password: cluster password.
        :param pulumi.Input[pulumi.InputType['InstanceChargePropertiesArgs']] charge_properties: instance billing mode.
        :param pulumi.Input[str] instance_name: instance name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InstanceResourceArgs']]]] resources: resource information.
        :param pulumi.Input[Mapping[str, Any]] tags: Tag description list.
        :param pulumi.Input[str] user_subnet_id: subnet.
        :param pulumi.Input[str] user_vpc_id: private network.
        :param pulumi.Input[str] zone: Availability Zone.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["admin_password"] = admin_password
        __props__.__dict__["charge_properties"] = charge_properties
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["resources"] = resources
        __props__.__dict__["tags"] = tags
        __props__.__dict__["user_subnet_id"] = user_subnet_id
        __props__.__dict__["user_vpc_id"] = user_vpc_id
        __props__.__dict__["zone"] = zone
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> pulumi.Output[str]:
        """
        cluster password.
        """
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="chargeProperties")
    def charge_properties(self) -> pulumi.Output['outputs.InstanceChargeProperties']:
        """
        instance billing mode.
        """
        return pulumi.get(self, "charge_properties")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Sequence['outputs.InstanceResource']]:
        """
        resource information.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Tag description list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userSubnetId")
    def user_subnet_id(self) -> pulumi.Output[str]:
        """
        subnet.
        """
        return pulumi.get(self, "user_subnet_id")

    @property
    @pulumi.getter(name="userVpcId")
    def user_vpc_id(self) -> pulumi.Output[str]:
        """
        private network.
        """
        return pulumi.get(self, "user_vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        Availability Zone.
        """
        return pulumi.get(self, "zone")

