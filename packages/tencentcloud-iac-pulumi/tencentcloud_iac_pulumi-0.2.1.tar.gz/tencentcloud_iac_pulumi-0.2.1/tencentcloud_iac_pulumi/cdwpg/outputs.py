# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'InstanceChargeProperties',
    'InstanceResource',
    'InstanceResourceDiskSpec',
]

@pulumi.output_type
class InstanceChargeProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renewFlag":
            suggest = "renew_flag"
        elif key == "timeSpan":
            suggest = "time_span"
        elif key == "timeUnit":
            suggest = "time_unit"
        elif key == "chargeType":
            suggest = "charge_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceChargeProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceChargeProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceChargeProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 renew_flag: int,
                 time_span: int,
                 time_unit: str,
                 charge_type: Optional[str] = None):
        """
        :param int renew_flag: 0-no automatic renewal,1-automatic renewalNote: This field may return null, indicating that a valid value cannot be obtained.
        :param int time_span: Time RangeNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str time_unit: Time Unit,Generally h and mNote: This field may return null, indicating that a valid value cannot be obtained.
        :param str charge_type: Charge type, vaild values: PREPAID, POSTPAID_BY_HOUR.
        """
        pulumi.set(__self__, "renew_flag", renew_flag)
        pulumi.set(__self__, "time_span", time_span)
        pulumi.set(__self__, "time_unit", time_unit)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)

    @property
    @pulumi.getter(name="renewFlag")
    def renew_flag(self) -> int:
        """
        0-no automatic renewal,1-automatic renewalNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "renew_flag")

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> int:
        """
        Time RangeNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "time_span")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> str:
        """
        Time Unit,Generally h and mNote: This field may return null, indicating that a valid value cannot be obtained.
        """
        return pulumi.get(self, "time_unit")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[str]:
        """
        Charge type, vaild values: PREPAID, POSTPAID_BY_HOUR.
        """
        return pulumi.get(self, "charge_type")


@pulumi.output_type
class InstanceResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSpec":
            suggest = "disk_spec"
        elif key == "specName":
            suggest = "spec_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 count: int,
                 disk_spec: 'outputs.InstanceResourceDiskSpec',
                 spec_name: str,
                 type: str):
        """
        :param int count: resource count.
        :param 'InstanceResourceDiskSpecArgs' disk_spec: disk Information.
        :param str spec_name: resource name.
        :param str type: resource type.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "disk_spec", disk_spec)
        pulumi.set(__self__, "spec_name", spec_name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def count(self) -> int:
        """
        resource count.
        """
        return pulumi.get(self, "count")

    @property
    @pulumi.getter(name="diskSpec")
    def disk_spec(self) -> 'outputs.InstanceResourceDiskSpec':
        """
        disk Information.
        """
        return pulumi.get(self, "disk_spec")

    @property
    @pulumi.getter(name="specName")
    def spec_name(self) -> str:
        """
        resource name.
        """
        return pulumi.get(self, "spec_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        resource type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class InstanceResourceDiskSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskCount":
            suggest = "disk_count"
        elif key == "diskSize":
            suggest = "disk_size"
        elif key == "diskType":
            suggest = "disk_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceResourceDiskSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceResourceDiskSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceResourceDiskSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_count: int,
                 disk_size: int,
                 disk_type: str):
        """
        :param int disk_count: disk count.
        :param int disk_size: disk size.
        :param str disk_type: disk type.
        """
        pulumi.set(__self__, "disk_count", disk_count)
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type", disk_type)

    @property
    @pulumi.getter(name="diskCount")
    def disk_count(self) -> int:
        """
        disk count.
        """
        return pulumi.get(self, "disk_count")

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        disk size.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> str:
        """
        disk type.
        """
        return pulumi.get(self, "disk_type")


