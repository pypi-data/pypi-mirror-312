# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CmdTemplateArgs', 'CmdTemplate']

@pulumi.input_type
class CmdTemplateArgs:
    def __init__(__self__, *,
                 cmd_list: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CmdTemplate resource.
        :param pulumi.Input[str] cmd_list: Command list, n separated, maximum length 32768 bytes.
        :param pulumi.Input[str] name: Template name, maximum length 32 characters, cannot contain blank characters.
        """
        pulumi.set(__self__, "cmd_list", cmd_list)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="cmdList")
    def cmd_list(self) -> pulumi.Input[str]:
        """
        Command list, n separated, maximum length 32768 bytes.
        """
        return pulumi.get(self, "cmd_list")

    @cmd_list.setter
    def cmd_list(self, value: pulumi.Input[str]):
        pulumi.set(self, "cmd_list", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Template name, maximum length 32 characters, cannot contain blank characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CmdTemplateState:
    def __init__(__self__, *,
                 cmd_list: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CmdTemplate resources.
        :param pulumi.Input[str] cmd_list: Command list, n separated, maximum length 32768 bytes.
        :param pulumi.Input[str] name: Template name, maximum length 32 characters, cannot contain blank characters.
        """
        if cmd_list is not None:
            pulumi.set(__self__, "cmd_list", cmd_list)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="cmdList")
    def cmd_list(self) -> Optional[pulumi.Input[str]]:
        """
        Command list, n separated, maximum length 32768 bytes.
        """
        return pulumi.get(self, "cmd_list")

    @cmd_list.setter
    def cmd_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmd_list", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Template name, maximum length 32 characters, cannot contain blank characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class CmdTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cmd_list: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a dasb cmd_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.dasb.CmdTemplate("example", cmd_list="rm -rf*")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dasb cmd_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dasb/cmdTemplate:CmdTemplate example 15
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cmd_list: Command list, n separated, maximum length 32768 bytes.
        :param pulumi.Input[str] name: Template name, maximum length 32 characters, cannot contain blank characters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CmdTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dasb cmd_template

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.dasb.CmdTemplate("example", cmd_list="rm -rf*")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dasb cmd_template can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dasb/cmdTemplate:CmdTemplate example 15
        ```

        :param str resource_name: The name of the resource.
        :param CmdTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CmdTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cmd_list: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CmdTemplateArgs.__new__(CmdTemplateArgs)

            if cmd_list is None and not opts.urn:
                raise TypeError("Missing required property 'cmd_list'")
            __props__.__dict__["cmd_list"] = cmd_list
            __props__.__dict__["name"] = name
        super(CmdTemplate, __self__).__init__(
            'tencentcloud:Dasb/cmdTemplate:CmdTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cmd_list: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'CmdTemplate':
        """
        Get an existing CmdTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cmd_list: Command list, n separated, maximum length 32768 bytes.
        :param pulumi.Input[str] name: Template name, maximum length 32 characters, cannot contain blank characters.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CmdTemplateState.__new__(_CmdTemplateState)

        __props__.__dict__["cmd_list"] = cmd_list
        __props__.__dict__["name"] = name
        return CmdTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cmdList")
    def cmd_list(self) -> pulumi.Output[str]:
        """
        Command list, n separated, maximum length 32768 bytes.
        """
        return pulumi.get(self, "cmd_list")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Template name, maximum length 32 characters, cannot contain blank characters.
        """
        return pulumi.get(self, "name")

