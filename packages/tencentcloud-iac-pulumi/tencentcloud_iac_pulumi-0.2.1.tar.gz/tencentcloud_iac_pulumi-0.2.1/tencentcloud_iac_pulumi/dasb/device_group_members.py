# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DeviceGroupMembersArgs', 'DeviceGroupMembers']

@pulumi.input_type
class DeviceGroupMembersArgs:
    def __init__(__self__, *,
                 device_group_id: pulumi.Input[int],
                 member_id_sets: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        The set of arguments for constructing a DeviceGroupMembers resource.
        :param pulumi.Input[int] device_group_id: Device Group ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] member_id_sets: A collection of device IDs that need to be added to the device group.
        """
        pulumi.set(__self__, "device_group_id", device_group_id)
        pulumi.set(__self__, "member_id_sets", member_id_sets)

    @property
    @pulumi.getter(name="deviceGroupId")
    def device_group_id(self) -> pulumi.Input[int]:
        """
        Device Group ID.
        """
        return pulumi.get(self, "device_group_id")

    @device_group_id.setter
    def device_group_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "device_group_id", value)

    @property
    @pulumi.getter(name="memberIdSets")
    def member_id_sets(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A collection of device IDs that need to be added to the device group.
        """
        return pulumi.get(self, "member_id_sets")

    @member_id_sets.setter
    def member_id_sets(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "member_id_sets", value)


@pulumi.input_type
class _DeviceGroupMembersState:
    def __init__(__self__, *,
                 device_group_id: Optional[pulumi.Input[int]] = None,
                 member_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering DeviceGroupMembers resources.
        :param pulumi.Input[int] device_group_id: Device Group ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] member_id_sets: A collection of device IDs that need to be added to the device group.
        """
        if device_group_id is not None:
            pulumi.set(__self__, "device_group_id", device_group_id)
        if member_id_sets is not None:
            pulumi.set(__self__, "member_id_sets", member_id_sets)

    @property
    @pulumi.getter(name="deviceGroupId")
    def device_group_id(self) -> Optional[pulumi.Input[int]]:
        """
        Device Group ID.
        """
        return pulumi.get(self, "device_group_id")

    @device_group_id.setter
    def device_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_group_id", value)

    @property
    @pulumi.getter(name="memberIdSets")
    def member_id_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A collection of device IDs that need to be added to the device group.
        """
        return pulumi.get(self, "member_id_sets")

    @member_id_sets.setter
    def member_id_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "member_id_sets", value)


class DeviceGroupMembers(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_group_id: Optional[pulumi.Input[int]] = None,
                 member_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a dasb device_group_members

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_device = tencentcloud.dasb.Device("exampleDevice",
            os_name="Linux",
            ip="192.168.0.1",
            port=80)
        example_device_group = tencentcloud.dasb.DeviceGroup("exampleDeviceGroup")
        example_device_group_members = tencentcloud.dasb.DeviceGroupMembers("exampleDeviceGroupMembers",
            device_group_id=example_device_group.id,
            member_id_sets=[example_device.id])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dasb device_group_members can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dasb/deviceGroupMembers:DeviceGroupMembers example 53#102
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] device_group_id: Device Group ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] member_id_sets: A collection of device IDs that need to be added to the device group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceGroupMembersArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dasb device_group_members

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_device = tencentcloud.dasb.Device("exampleDevice",
            os_name="Linux",
            ip="192.168.0.1",
            port=80)
        example_device_group = tencentcloud.dasb.DeviceGroup("exampleDeviceGroup")
        example_device_group_members = tencentcloud.dasb.DeviceGroupMembers("exampleDeviceGroupMembers",
            device_group_id=example_device_group.id,
            member_id_sets=[example_device.id])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dasb device_group_members can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dasb/deviceGroupMembers:DeviceGroupMembers example 53#102
        ```

        :param str resource_name: The name of the resource.
        :param DeviceGroupMembersArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceGroupMembersArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_group_id: Optional[pulumi.Input[int]] = None,
                 member_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceGroupMembersArgs.__new__(DeviceGroupMembersArgs)

            if device_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'device_group_id'")
            __props__.__dict__["device_group_id"] = device_group_id
            if member_id_sets is None and not opts.urn:
                raise TypeError("Missing required property 'member_id_sets'")
            __props__.__dict__["member_id_sets"] = member_id_sets
        super(DeviceGroupMembers, __self__).__init__(
            'tencentcloud:Dasb/deviceGroupMembers:DeviceGroupMembers',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device_group_id: Optional[pulumi.Input[int]] = None,
            member_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'DeviceGroupMembers':
        """
        Get an existing DeviceGroupMembers resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] device_group_id: Device Group ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] member_id_sets: A collection of device IDs that need to be added to the device group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceGroupMembersState.__new__(_DeviceGroupMembersState)

        __props__.__dict__["device_group_id"] = device_group_id
        __props__.__dict__["member_id_sets"] = member_id_sets
        return DeviceGroupMembers(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deviceGroupId")
    def device_group_id(self) -> pulumi.Output[int]:
        """
        Device Group ID.
        """
        return pulumi.get(self, "device_group_id")

    @property
    @pulumi.getter(name="memberIdSets")
    def member_id_sets(self) -> pulumi.Output[Sequence[int]]:
        """
        A collection of device IDs that need to be added to the device group.
        """
        return pulumi.get(self, "member_id_sets")

