# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ResourceArgs', 'Resource']

@pulumi.input_type
class ResourceArgs:
    def __init__(__self__, *,
                 auto_renew_flag: pulumi.Input[int],
                 cidr_block: pulumi.Input[str],
                 deploy_region: pulumi.Input[str],
                 deploy_zone: pulumi.Input[str],
                 resource_edition: pulumi.Input[str],
                 resource_node: pulumi.Input[int],
                 subnet_id: pulumi.Input[str],
                 vpc_cidr_block: pulumi.Input[str],
                 vpc_id: pulumi.Input[str],
                 package_bandwidth: Optional[pulumi.Input[int]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Resource resource.
        :param pulumi.Input[int] auto_renew_flag: Automatic renewal. 1 is auto renew flag, 0 is not.
        :param pulumi.Input[str] cidr_block: Subnet segments that require service activation.
        :param pulumi.Input[str] deploy_region: Deploy region.
        :param pulumi.Input[str] deploy_zone: Deploy zone.
        :param pulumi.Input[str] resource_edition: Resource type.Value:standard/pro.
        :param pulumi.Input[int] resource_node: Number of resource nodes.
        :param pulumi.Input[str] subnet_id: Deploy resource subnetId.
        :param pulumi.Input[str] vpc_cidr_block: The network segment corresponding to the VPC that requires service activation.
        :param pulumi.Input[str] vpc_id: Deploy resource vpcId.
        :param pulumi.Input[int] package_bandwidth: Number of bandwidth expansion packets (4M), The set value is an integer multiple of 4.
        :param pulumi.Input[int] time_span: Billing time. This field is mandatory, with a minimum value of 1.
        :param pulumi.Input[str] time_unit: Billing cycle, only support m: month. This field is mandatory, fill in m.
        """
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "deploy_region", deploy_region)
        pulumi.set(__self__, "deploy_zone", deploy_zone)
        pulumi.set(__self__, "resource_edition", resource_edition)
        pulumi.set(__self__, "resource_node", resource_node)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_cidr_block", vpc_cidr_block)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if package_bandwidth is not None:
            pulumi.set(__self__, "package_bandwidth", package_bandwidth)
        if time_span is not None:
            pulumi.set(__self__, "time_span", time_span)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> pulumi.Input[int]:
        """
        Automatic renewal. 1 is auto renew flag, 0 is not.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: pulumi.Input[int]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Input[str]:
        """
        Subnet segments that require service activation.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="deployRegion")
    def deploy_region(self) -> pulumi.Input[str]:
        """
        Deploy region.
        """
        return pulumi.get(self, "deploy_region")

    @deploy_region.setter
    def deploy_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "deploy_region", value)

    @property
    @pulumi.getter(name="deployZone")
    def deploy_zone(self) -> pulumi.Input[str]:
        """
        Deploy zone.
        """
        return pulumi.get(self, "deploy_zone")

    @deploy_zone.setter
    def deploy_zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "deploy_zone", value)

    @property
    @pulumi.getter(name="resourceEdition")
    def resource_edition(self) -> pulumi.Input[str]:
        """
        Resource type.Value:standard/pro.
        """
        return pulumi.get(self, "resource_edition")

    @resource_edition.setter
    def resource_edition(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_edition", value)

    @property
    @pulumi.getter(name="resourceNode")
    def resource_node(self) -> pulumi.Input[int]:
        """
        Number of resource nodes.
        """
        return pulumi.get(self, "resource_node")

    @resource_node.setter
    def resource_node(self, value: pulumi.Input[int]):
        pulumi.set(self, "resource_node", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Deploy resource subnetId.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="vpcCidrBlock")
    def vpc_cidr_block(self) -> pulumi.Input[str]:
        """
        The network segment corresponding to the VPC that requires service activation.
        """
        return pulumi.get(self, "vpc_cidr_block")

    @vpc_cidr_block.setter
    def vpc_cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_cidr_block", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[str]:
        """
        Deploy resource vpcId.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="packageBandwidth")
    def package_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Number of bandwidth expansion packets (4M), The set value is an integer multiple of 4.
        """
        return pulumi.get(self, "package_bandwidth")

    @package_bandwidth.setter
    def package_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "package_bandwidth", value)

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> Optional[pulumi.Input[int]]:
        """
        Billing time. This field is mandatory, with a minimum value of 1.
        """
        return pulumi.get(self, "time_span")

    @time_span.setter
    def time_span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_span", value)

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Billing cycle, only support m: month. This field is mandatory, fill in m.
        """
        return pulumi.get(self, "time_unit")

    @time_unit.setter
    def time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_unit", value)


@pulumi.input_type
class _ResourceState:
    def __init__(__self__, *,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 deploy_region: Optional[pulumi.Input[str]] = None,
                 deploy_zone: Optional[pulumi.Input[str]] = None,
                 package_bandwidth: Optional[pulumi.Input[int]] = None,
                 resource_edition: Optional[pulumi.Input[str]] = None,
                 resource_node: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 vpc_cidr_block: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Resource resources.
        :param pulumi.Input[int] auto_renew_flag: Automatic renewal. 1 is auto renew flag, 0 is not.
        :param pulumi.Input[str] cidr_block: Subnet segments that require service activation.
        :param pulumi.Input[str] deploy_region: Deploy region.
        :param pulumi.Input[str] deploy_zone: Deploy zone.
        :param pulumi.Input[int] package_bandwidth: Number of bandwidth expansion packets (4M), The set value is an integer multiple of 4.
        :param pulumi.Input[str] resource_edition: Resource type.Value:standard/pro.
        :param pulumi.Input[int] resource_node: Number of resource nodes.
        :param pulumi.Input[str] subnet_id: Deploy resource subnetId.
        :param pulumi.Input[int] time_span: Billing time. This field is mandatory, with a minimum value of 1.
        :param pulumi.Input[str] time_unit: Billing cycle, only support m: month. This field is mandatory, fill in m.
        :param pulumi.Input[str] vpc_cidr_block: The network segment corresponding to the VPC that requires service activation.
        :param pulumi.Input[str] vpc_id: Deploy resource vpcId.
        """
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if deploy_region is not None:
            pulumi.set(__self__, "deploy_region", deploy_region)
        if deploy_zone is not None:
            pulumi.set(__self__, "deploy_zone", deploy_zone)
        if package_bandwidth is not None:
            pulumi.set(__self__, "package_bandwidth", package_bandwidth)
        if resource_edition is not None:
            pulumi.set(__self__, "resource_edition", resource_edition)
        if resource_node is not None:
            pulumi.set(__self__, "resource_node", resource_node)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if time_span is not None:
            pulumi.set(__self__, "time_span", time_span)
        if time_unit is not None:
            pulumi.set(__self__, "time_unit", time_unit)
        if vpc_cidr_block is not None:
            pulumi.set(__self__, "vpc_cidr_block", vpc_cidr_block)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Automatic renewal. 1 is auto renew flag, 0 is not.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet segments that require service activation.
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="deployRegion")
    def deploy_region(self) -> Optional[pulumi.Input[str]]:
        """
        Deploy region.
        """
        return pulumi.get(self, "deploy_region")

    @deploy_region.setter
    def deploy_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_region", value)

    @property
    @pulumi.getter(name="deployZone")
    def deploy_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Deploy zone.
        """
        return pulumi.get(self, "deploy_zone")

    @deploy_zone.setter
    def deploy_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deploy_zone", value)

    @property
    @pulumi.getter(name="packageBandwidth")
    def package_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Number of bandwidth expansion packets (4M), The set value is an integer multiple of 4.
        """
        return pulumi.get(self, "package_bandwidth")

    @package_bandwidth.setter
    def package_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "package_bandwidth", value)

    @property
    @pulumi.getter(name="resourceEdition")
    def resource_edition(self) -> Optional[pulumi.Input[str]]:
        """
        Resource type.Value:standard/pro.
        """
        return pulumi.get(self, "resource_edition")

    @resource_edition.setter
    def resource_edition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_edition", value)

    @property
    @pulumi.getter(name="resourceNode")
    def resource_node(self) -> Optional[pulumi.Input[int]]:
        """
        Number of resource nodes.
        """
        return pulumi.get(self, "resource_node")

    @resource_node.setter
    def resource_node(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "resource_node", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Deploy resource subnetId.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> Optional[pulumi.Input[int]]:
        """
        Billing time. This field is mandatory, with a minimum value of 1.
        """
        return pulumi.get(self, "time_span")

    @time_span.setter
    def time_span(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_span", value)

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Billing cycle, only support m: month. This field is mandatory, fill in m.
        """
        return pulumi.get(self, "time_unit")

    @time_unit.setter
    def time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_unit", value)

    @property
    @pulumi.getter(name="vpcCidrBlock")
    def vpc_cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        The network segment corresponding to the VPC that requires service activation.
        """
        return pulumi.get(self, "vpc_cidr_block")

    @vpc_cidr_block.setter
    def vpc_cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_cidr_block", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Deploy resource vpcId.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class Resource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 deploy_region: Optional[pulumi.Input[str]] = None,
                 deploy_zone: Optional[pulumi.Input[str]] = None,
                 package_bandwidth: Optional[pulumi.Input[int]] = None,
                 resource_edition: Optional[pulumi.Input[str]] = None,
                 resource_node: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 vpc_cidr_block: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a dasb resource

        ## Example Usage

        ### Create a standard version instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.dasb.Resource("example",
            auto_renew_flag=1,
            cidr_block="10.35.20.0/24",
            deploy_region="ap-guangzhou",
            deploy_zone="ap-guangzhou-6",
            package_bandwidth=1,
            resource_edition="standard",
            resource_node=50,
            subnet_id="subnet-g7jhwhi2",
            time_span=1,
            time_unit="m",
            vpc_cidr_block="10.35.0.0/16",
            vpc_id="vpc-fmz6l9nz")
        ```
        <!--End PulumiCodeChooser -->

        ### Create a professional instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.dasb.Resource("example",
            auto_renew_flag=1,
            cidr_block="10.35.20.0/24",
            deploy_region="ap-guangzhou",
            deploy_zone="ap-guangzhou-6",
            package_bandwidth=1,
            resource_edition="pro",
            resource_node=50,
            subnet_id="subnet-g7jhwhi2",
            time_span=1,
            time_unit="m",
            vpc_cidr_block="10.35.0.0/16",
            vpc_id="vpc-fmz6l9nz")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dasb resource can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dasb/resource:Resource example bh-saas-kgckynrt
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Automatic renewal. 1 is auto renew flag, 0 is not.
        :param pulumi.Input[str] cidr_block: Subnet segments that require service activation.
        :param pulumi.Input[str] deploy_region: Deploy region.
        :param pulumi.Input[str] deploy_zone: Deploy zone.
        :param pulumi.Input[int] package_bandwidth: Number of bandwidth expansion packets (4M), The set value is an integer multiple of 4.
        :param pulumi.Input[str] resource_edition: Resource type.Value:standard/pro.
        :param pulumi.Input[int] resource_node: Number of resource nodes.
        :param pulumi.Input[str] subnet_id: Deploy resource subnetId.
        :param pulumi.Input[int] time_span: Billing time. This field is mandatory, with a minimum value of 1.
        :param pulumi.Input[str] time_unit: Billing cycle, only support m: month. This field is mandatory, fill in m.
        :param pulumi.Input[str] vpc_cidr_block: The network segment corresponding to the VPC that requires service activation.
        :param pulumi.Input[str] vpc_id: Deploy resource vpcId.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dasb resource

        ## Example Usage

        ### Create a standard version instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.dasb.Resource("example",
            auto_renew_flag=1,
            cidr_block="10.35.20.0/24",
            deploy_region="ap-guangzhou",
            deploy_zone="ap-guangzhou-6",
            package_bandwidth=1,
            resource_edition="standard",
            resource_node=50,
            subnet_id="subnet-g7jhwhi2",
            time_span=1,
            time_unit="m",
            vpc_cidr_block="10.35.0.0/16",
            vpc_id="vpc-fmz6l9nz")
        ```
        <!--End PulumiCodeChooser -->

        ### Create a professional instance

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.dasb.Resource("example",
            auto_renew_flag=1,
            cidr_block="10.35.20.0/24",
            deploy_region="ap-guangzhou",
            deploy_zone="ap-guangzhou-6",
            package_bandwidth=1,
            resource_edition="pro",
            resource_node=50,
            subnet_id="subnet-g7jhwhi2",
            time_span=1,
            time_unit="m",
            vpc_cidr_block="10.35.0.0/16",
            vpc_id="vpc-fmz6l9nz")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dasb resource can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dasb/resource:Resource example bh-saas-kgckynrt
        ```

        :param str resource_name: The name of the resource.
        :param ResourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 deploy_region: Optional[pulumi.Input[str]] = None,
                 deploy_zone: Optional[pulumi.Input[str]] = None,
                 package_bandwidth: Optional[pulumi.Input[int]] = None,
                 resource_edition: Optional[pulumi.Input[str]] = None,
                 resource_node: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 time_span: Optional[pulumi.Input[int]] = None,
                 time_unit: Optional[pulumi.Input[str]] = None,
                 vpc_cidr_block: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceArgs.__new__(ResourceArgs)

            if auto_renew_flag is None and not opts.urn:
                raise TypeError("Missing required property 'auto_renew_flag'")
            __props__.__dict__["auto_renew_flag"] = auto_renew_flag
            if cidr_block is None and not opts.urn:
                raise TypeError("Missing required property 'cidr_block'")
            __props__.__dict__["cidr_block"] = cidr_block
            if deploy_region is None and not opts.urn:
                raise TypeError("Missing required property 'deploy_region'")
            __props__.__dict__["deploy_region"] = deploy_region
            if deploy_zone is None and not opts.urn:
                raise TypeError("Missing required property 'deploy_zone'")
            __props__.__dict__["deploy_zone"] = deploy_zone
            __props__.__dict__["package_bandwidth"] = package_bandwidth
            if resource_edition is None and not opts.urn:
                raise TypeError("Missing required property 'resource_edition'")
            __props__.__dict__["resource_edition"] = resource_edition
            if resource_node is None and not opts.urn:
                raise TypeError("Missing required property 'resource_node'")
            __props__.__dict__["resource_node"] = resource_node
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["time_span"] = time_span
            __props__.__dict__["time_unit"] = time_unit
            if vpc_cidr_block is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_cidr_block'")
            __props__.__dict__["vpc_cidr_block"] = vpc_cidr_block
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
        super(Resource, __self__).__init__(
            'tencentcloud:Dasb/resource:Resource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew_flag: Optional[pulumi.Input[int]] = None,
            cidr_block: Optional[pulumi.Input[str]] = None,
            deploy_region: Optional[pulumi.Input[str]] = None,
            deploy_zone: Optional[pulumi.Input[str]] = None,
            package_bandwidth: Optional[pulumi.Input[int]] = None,
            resource_edition: Optional[pulumi.Input[str]] = None,
            resource_node: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            time_span: Optional[pulumi.Input[int]] = None,
            time_unit: Optional[pulumi.Input[str]] = None,
            vpc_cidr_block: Optional[pulumi.Input[str]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'Resource':
        """
        Get an existing Resource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Automatic renewal. 1 is auto renew flag, 0 is not.
        :param pulumi.Input[str] cidr_block: Subnet segments that require service activation.
        :param pulumi.Input[str] deploy_region: Deploy region.
        :param pulumi.Input[str] deploy_zone: Deploy zone.
        :param pulumi.Input[int] package_bandwidth: Number of bandwidth expansion packets (4M), The set value is an integer multiple of 4.
        :param pulumi.Input[str] resource_edition: Resource type.Value:standard/pro.
        :param pulumi.Input[int] resource_node: Number of resource nodes.
        :param pulumi.Input[str] subnet_id: Deploy resource subnetId.
        :param pulumi.Input[int] time_span: Billing time. This field is mandatory, with a minimum value of 1.
        :param pulumi.Input[str] time_unit: Billing cycle, only support m: month. This field is mandatory, fill in m.
        :param pulumi.Input[str] vpc_cidr_block: The network segment corresponding to the VPC that requires service activation.
        :param pulumi.Input[str] vpc_id: Deploy resource vpcId.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ResourceState.__new__(_ResourceState)

        __props__.__dict__["auto_renew_flag"] = auto_renew_flag
        __props__.__dict__["cidr_block"] = cidr_block
        __props__.__dict__["deploy_region"] = deploy_region
        __props__.__dict__["deploy_zone"] = deploy_zone
        __props__.__dict__["package_bandwidth"] = package_bandwidth
        __props__.__dict__["resource_edition"] = resource_edition
        __props__.__dict__["resource_node"] = resource_node
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["time_span"] = time_span
        __props__.__dict__["time_unit"] = time_unit
        __props__.__dict__["vpc_cidr_block"] = vpc_cidr_block
        __props__.__dict__["vpc_id"] = vpc_id
        return Resource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> pulumi.Output[int]:
        """
        Automatic renewal. 1 is auto renew flag, 0 is not.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Output[str]:
        """
        Subnet segments that require service activation.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="deployRegion")
    def deploy_region(self) -> pulumi.Output[str]:
        """
        Deploy region.
        """
        return pulumi.get(self, "deploy_region")

    @property
    @pulumi.getter(name="deployZone")
    def deploy_zone(self) -> pulumi.Output[str]:
        """
        Deploy zone.
        """
        return pulumi.get(self, "deploy_zone")

    @property
    @pulumi.getter(name="packageBandwidth")
    def package_bandwidth(self) -> pulumi.Output[int]:
        """
        Number of bandwidth expansion packets (4M), The set value is an integer multiple of 4.
        """
        return pulumi.get(self, "package_bandwidth")

    @property
    @pulumi.getter(name="resourceEdition")
    def resource_edition(self) -> pulumi.Output[str]:
        """
        Resource type.Value:standard/pro.
        """
        return pulumi.get(self, "resource_edition")

    @property
    @pulumi.getter(name="resourceNode")
    def resource_node(self) -> pulumi.Output[int]:
        """
        Number of resource nodes.
        """
        return pulumi.get(self, "resource_node")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        Deploy resource subnetId.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="timeSpan")
    def time_span(self) -> pulumi.Output[Optional[int]]:
        """
        Billing time. This field is mandatory, with a minimum value of 1.
        """
        return pulumi.get(self, "time_span")

    @property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> pulumi.Output[Optional[str]]:
        """
        Billing cycle, only support m: month. This field is mandatory, fill in m.
        """
        return pulumi.get(self, "time_unit")

    @property
    @pulumi.getter(name="vpcCidrBlock")
    def vpc_cidr_block(self) -> pulumi.Output[str]:
        """
        The network segment corresponding to the VPC that requires service activation.
        """
        return pulumi.get(self, "vpc_cidr_block")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        Deploy resource vpcId.
        """
        return pulumi.get(self, "vpc_id")

