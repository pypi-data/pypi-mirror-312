# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['UserGroupArgs', 'UserGroup']

@pulumi.input_type
class UserGroupArgs:
    def __init__(__self__, *,
                 department_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a UserGroup resource.
        :param pulumi.Input[str] department_id: ID of the department to which the user group belongs, such as: 1.2.3.
        :param pulumi.Input[str] name: User group name, maximum length 32 characters.
        """
        if department_id is not None:
            pulumi.set(__self__, "department_id", department_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="departmentId")
    def department_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the department to which the user group belongs, such as: 1.2.3.
        """
        return pulumi.get(self, "department_id")

    @department_id.setter
    def department_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "department_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User group name, maximum length 32 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _UserGroupState:
    def __init__(__self__, *,
                 department_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering UserGroup resources.
        :param pulumi.Input[str] department_id: ID of the department to which the user group belongs, such as: 1.2.3.
        :param pulumi.Input[str] name: User group name, maximum length 32 characters.
        """
        if department_id is not None:
            pulumi.set(__self__, "department_id", department_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="departmentId")
    def department_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the department to which the user group belongs, such as: 1.2.3.
        """
        return pulumi.get(self, "department_id")

    @department_id.setter
    def department_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "department_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User group name, maximum length 32 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class UserGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 department_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a dasb user_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.dasb.UserGroup("example")
        ```
        <!--End PulumiCodeChooser -->

        ### Or

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.dasb.UserGroup("example", department_id="1.2")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dasb user_group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dasb/userGroup:UserGroup example 16
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] department_id: ID of the department to which the user group belongs, such as: 1.2.3.
        :param pulumi.Input[str] name: User group name, maximum length 32 characters.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[UserGroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dasb user_group

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.dasb.UserGroup("example")
        ```
        <!--End PulumiCodeChooser -->

        ### Or

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.dasb.UserGroup("example", department_id="1.2")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dasb user_group can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dasb/userGroup:UserGroup example 16
        ```

        :param str resource_name: The name of the resource.
        :param UserGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 department_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserGroupArgs.__new__(UserGroupArgs)

            __props__.__dict__["department_id"] = department_id
            __props__.__dict__["name"] = name
        super(UserGroup, __self__).__init__(
            'tencentcloud:Dasb/userGroup:UserGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            department_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'UserGroup':
        """
        Get an existing UserGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] department_id: ID of the department to which the user group belongs, such as: 1.2.3.
        :param pulumi.Input[str] name: User group name, maximum length 32 characters.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserGroupState.__new__(_UserGroupState)

        __props__.__dict__["department_id"] = department_id
        __props__.__dict__["name"] = name
        return UserGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="departmentId")
    def department_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the department to which the user group belongs, such as: 1.2.3.
        """
        return pulumi.get(self, "department_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        User group name, maximum length 32 characters.
        """
        return pulumi.get(self, "name")

