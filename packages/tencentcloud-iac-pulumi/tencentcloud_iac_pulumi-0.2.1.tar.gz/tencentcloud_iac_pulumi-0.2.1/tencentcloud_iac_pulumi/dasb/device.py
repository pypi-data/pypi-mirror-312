# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DeviceArgs', 'Device']

@pulumi.input_type
class DeviceArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 os_name: pulumi.Input[str],
                 port: pulumi.Input[int],
                 department_id: Optional[pulumi.Input[str]] = None,
                 ip_port_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Device resource.
        :param pulumi.Input[str] ip: IP address.
        :param pulumi.Input[str] os_name: Operating system name, only Linux, Windows or MySQL.
        :param pulumi.Input[int] port: Management port.
        :param pulumi.Input[str] department_id: The department ID to which the device belongs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_port_sets: Asset multi-node: fields ip and port.
        :param pulumi.Input[str] name: Hostname, can be empty.
        """
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "os_name", os_name)
        pulumi.set(__self__, "port", port)
        if department_id is not None:
            pulumi.set(__self__, "department_id", department_id)
        if ip_port_sets is not None:
            pulumi.set(__self__, "ip_port_sets", ip_port_sets)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        """
        IP address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> pulumi.Input[str]:
        """
        Operating system name, only Linux, Windows or MySQL.
        """
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Management port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="departmentId")
    def department_id(self) -> Optional[pulumi.Input[str]]:
        """
        The department ID to which the device belongs.
        """
        return pulumi.get(self, "department_id")

    @department_id.setter
    def department_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "department_id", value)

    @property
    @pulumi.getter(name="ipPortSets")
    def ip_port_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Asset multi-node: fields ip and port.
        """
        return pulumi.get(self, "ip_port_sets")

    @ip_port_sets.setter
    def ip_port_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_port_sets", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname, can be empty.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _DeviceState:
    def __init__(__self__, *,
                 department_id: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ip_port_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Device resources.
        :param pulumi.Input[str] department_id: The department ID to which the device belongs.
        :param pulumi.Input[str] ip: IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_port_sets: Asset multi-node: fields ip and port.
        :param pulumi.Input[str] name: Hostname, can be empty.
        :param pulumi.Input[str] os_name: Operating system name, only Linux, Windows or MySQL.
        :param pulumi.Input[int] port: Management port.
        """
        if department_id is not None:
            pulumi.set(__self__, "department_id", department_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if ip_port_sets is not None:
            pulumi.set(__self__, "ip_port_sets", ip_port_sets)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="departmentId")
    def department_id(self) -> Optional[pulumi.Input[str]]:
        """
        The department ID to which the device belongs.
        """
        return pulumi.get(self, "department_id")

    @department_id.setter
    def department_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "department_id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="ipPortSets")
    def ip_port_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Asset multi-node: fields ip and port.
        """
        return pulumi.get(self, "ip_port_sets")

    @ip_port_sets.setter
    def ip_port_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_port_sets", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Hostname, can be empty.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system name, only Linux, Windows or MySQL.
        """
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Management port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


class Device(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 department_id: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ip_port_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a dasb device

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.dasb.Device("example",
            department_id="1.2.3",
            ip="192.168.0.1",
            os_name="Linux",
            port=80)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dasb device can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dasb/device:Device example 17
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] department_id: The department ID to which the device belongs.
        :param pulumi.Input[str] ip: IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_port_sets: Asset multi-node: fields ip and port.
        :param pulumi.Input[str] name: Hostname, can be empty.
        :param pulumi.Input[str] os_name: Operating system name, only Linux, Windows or MySQL.
        :param pulumi.Input[int] port: Management port.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dasb device

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.dasb.Device("example",
            department_id="1.2.3",
            ip="192.168.0.1",
            os_name="Linux",
            port=80)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dasb device can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dasb/device:Device example 17
        ```

        :param str resource_name: The name of the resource.
        :param DeviceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 department_id: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 ip_port_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 os_name: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceArgs.__new__(DeviceArgs)

            __props__.__dict__["department_id"] = department_id
            if ip is None and not opts.urn:
                raise TypeError("Missing required property 'ip'")
            __props__.__dict__["ip"] = ip
            __props__.__dict__["ip_port_sets"] = ip_port_sets
            __props__.__dict__["name"] = name
            if os_name is None and not opts.urn:
                raise TypeError("Missing required property 'os_name'")
            __props__.__dict__["os_name"] = os_name
            if port is None and not opts.urn:
                raise TypeError("Missing required property 'port'")
            __props__.__dict__["port"] = port
        super(Device, __self__).__init__(
            'tencentcloud:Dasb/device:Device',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            department_id: Optional[pulumi.Input[str]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            ip_port_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            os_name: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None) -> 'Device':
        """
        Get an existing Device resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] department_id: The department ID to which the device belongs.
        :param pulumi.Input[str] ip: IP address.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_port_sets: Asset multi-node: fields ip and port.
        :param pulumi.Input[str] name: Hostname, can be empty.
        :param pulumi.Input[str] os_name: Operating system name, only Linux, Windows or MySQL.
        :param pulumi.Input[int] port: Management port.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceState.__new__(_DeviceState)

        __props__.__dict__["department_id"] = department_id
        __props__.__dict__["ip"] = ip
        __props__.__dict__["ip_port_sets"] = ip_port_sets
        __props__.__dict__["name"] = name
        __props__.__dict__["os_name"] = os_name
        __props__.__dict__["port"] = port
        return Device(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="departmentId")
    def department_id(self) -> pulumi.Output[Optional[str]]:
        """
        The department ID to which the device belongs.
        """
        return pulumi.get(self, "department_id")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        """
        IP address.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="ipPortSets")
    def ip_port_sets(self) -> pulumi.Output[Sequence[str]]:
        """
        Asset multi-node: fields ip and port.
        """
        return pulumi.get(self, "ip_port_sets")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Hostname, can be empty.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> pulumi.Output[str]:
        """
        Operating system name, only Linux, Windows or MySQL.
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        Management port.
        """
        return pulumi.get(self, "port")

