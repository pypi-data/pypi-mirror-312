# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AclArgs', 'Acl']

@pulumi.input_type
class AclArgs:
    def __init__(__self__, *,
                 allow_any_account: pulumi.Input[bool],
                 allow_disk_redirect: pulumi.Input[bool],
                 ac_template_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 account_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allow_access_credential: Optional[pulumi.Input[bool]] = None,
                 allow_clip_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_clip_file_up: Optional[pulumi.Input[bool]] = None,
                 allow_clip_text_down: Optional[pulumi.Input[bool]] = None,
                 allow_clip_text_up: Optional[pulumi.Input[bool]] = None,
                 allow_disk_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_disk_file_up: Optional[pulumi.Input[bool]] = None,
                 allow_file_del: Optional[pulumi.Input[bool]] = None,
                 allow_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_file_up: Optional[pulumi.Input[bool]] = None,
                 allow_shell_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_shell_file_up: Optional[pulumi.Input[bool]] = None,
                 cmd_template_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 department_id: Optional[pulumi.Input[str]] = None,
                 device_group_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 device_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 max_file_down_size: Optional[pulumi.Input[int]] = None,
                 max_file_up_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_group_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 user_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 validate_from: Optional[pulumi.Input[str]] = None,
                 validate_to: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Acl resource.
        :param pulumi.Input[bool] allow_any_account: Allow any account.
        :param pulumi.Input[bool] allow_disk_redirect: Allow disk redirect.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ac_template_id_sets: Associate high-risk DB template IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_sets: Associated accounts.
        :param pulumi.Input[bool] allow_access_credential: Allow access credential,default allow.
        :param pulumi.Input[bool] allow_clip_file_down: Allow clip file down.
        :param pulumi.Input[bool] allow_clip_file_up: Allow clip file up.
        :param pulumi.Input[bool] allow_clip_text_down: Allow clip text down.
        :param pulumi.Input[bool] allow_clip_text_up: Allow clip text up.
        :param pulumi.Input[bool] allow_disk_file_down: Allow disk file download.
        :param pulumi.Input[bool] allow_disk_file_up: Allow disk file upload.
        :param pulumi.Input[bool] allow_file_del: Allow sftp file delete.
        :param pulumi.Input[bool] allow_file_down: Allow sftp file download.
        :param pulumi.Input[bool] allow_file_up: Allow sftp up file.
        :param pulumi.Input[bool] allow_shell_file_down: Allow shell file download.
        :param pulumi.Input[bool] allow_shell_file_up: Allow shell file upload.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] cmd_template_id_sets: Associated high-risk command template ID.
        :param pulumi.Input[str] department_id: Department id.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] device_group_id_sets: Associated device group ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] device_id_sets: Associated collection of device IDs.
        :param pulumi.Input[int] max_file_down_size: File transfer download size limit (reserved parameter, currently unused).
        :param pulumi.Input[int] max_file_up_size: File upload transfer size limit (artifact parameter, currently unused).
        :param pulumi.Input[str] name: Acl name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] user_group_id_sets: Associated user group ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] user_id_sets: Associated set of user IDs.
        :param pulumi.Input[str] validate_from: Access permission effective time, such as: 2021-09-22T00:00:00+08:00If the effective and expiry time are not filled in, the access rights will be valid for a long time.
        :param pulumi.Input[str] validate_to: Access permission expiration time, such as: 2021-09-23T00:00:00+08:00If the effective and expiry time are not filled in, the access rights will be valid for a long time.
        """
        pulumi.set(__self__, "allow_any_account", allow_any_account)
        pulumi.set(__self__, "allow_disk_redirect", allow_disk_redirect)
        if ac_template_id_sets is not None:
            pulumi.set(__self__, "ac_template_id_sets", ac_template_id_sets)
        if account_sets is not None:
            pulumi.set(__self__, "account_sets", account_sets)
        if allow_access_credential is not None:
            pulumi.set(__self__, "allow_access_credential", allow_access_credential)
        if allow_clip_file_down is not None:
            pulumi.set(__self__, "allow_clip_file_down", allow_clip_file_down)
        if allow_clip_file_up is not None:
            pulumi.set(__self__, "allow_clip_file_up", allow_clip_file_up)
        if allow_clip_text_down is not None:
            pulumi.set(__self__, "allow_clip_text_down", allow_clip_text_down)
        if allow_clip_text_up is not None:
            pulumi.set(__self__, "allow_clip_text_up", allow_clip_text_up)
        if allow_disk_file_down is not None:
            pulumi.set(__self__, "allow_disk_file_down", allow_disk_file_down)
        if allow_disk_file_up is not None:
            pulumi.set(__self__, "allow_disk_file_up", allow_disk_file_up)
        if allow_file_del is not None:
            pulumi.set(__self__, "allow_file_del", allow_file_del)
        if allow_file_down is not None:
            pulumi.set(__self__, "allow_file_down", allow_file_down)
        if allow_file_up is not None:
            pulumi.set(__self__, "allow_file_up", allow_file_up)
        if allow_shell_file_down is not None:
            pulumi.set(__self__, "allow_shell_file_down", allow_shell_file_down)
        if allow_shell_file_up is not None:
            pulumi.set(__self__, "allow_shell_file_up", allow_shell_file_up)
        if cmd_template_id_sets is not None:
            pulumi.set(__self__, "cmd_template_id_sets", cmd_template_id_sets)
        if department_id is not None:
            pulumi.set(__self__, "department_id", department_id)
        if device_group_id_sets is not None:
            pulumi.set(__self__, "device_group_id_sets", device_group_id_sets)
        if device_id_sets is not None:
            pulumi.set(__self__, "device_id_sets", device_id_sets)
        if max_file_down_size is not None:
            pulumi.set(__self__, "max_file_down_size", max_file_down_size)
        if max_file_up_size is not None:
            pulumi.set(__self__, "max_file_up_size", max_file_up_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if user_group_id_sets is not None:
            pulumi.set(__self__, "user_group_id_sets", user_group_id_sets)
        if user_id_sets is not None:
            pulumi.set(__self__, "user_id_sets", user_id_sets)
        if validate_from is not None:
            pulumi.set(__self__, "validate_from", validate_from)
        if validate_to is not None:
            pulumi.set(__self__, "validate_to", validate_to)

    @property
    @pulumi.getter(name="allowAnyAccount")
    def allow_any_account(self) -> pulumi.Input[bool]:
        """
        Allow any account.
        """
        return pulumi.get(self, "allow_any_account")

    @allow_any_account.setter
    def allow_any_account(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_any_account", value)

    @property
    @pulumi.getter(name="allowDiskRedirect")
    def allow_disk_redirect(self) -> pulumi.Input[bool]:
        """
        Allow disk redirect.
        """
        return pulumi.get(self, "allow_disk_redirect")

    @allow_disk_redirect.setter
    def allow_disk_redirect(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_disk_redirect", value)

    @property
    @pulumi.getter(name="acTemplateIdSets")
    def ac_template_id_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Associate high-risk DB template IDs.
        """
        return pulumi.get(self, "ac_template_id_sets")

    @ac_template_id_sets.setter
    def ac_template_id_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ac_template_id_sets", value)

    @property
    @pulumi.getter(name="accountSets")
    def account_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Associated accounts.
        """
        return pulumi.get(self, "account_sets")

    @account_sets.setter
    def account_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_sets", value)

    @property
    @pulumi.getter(name="allowAccessCredential")
    def allow_access_credential(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow access credential,default allow.
        """
        return pulumi.get(self, "allow_access_credential")

    @allow_access_credential.setter
    def allow_access_credential(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_access_credential", value)

    @property
    @pulumi.getter(name="allowClipFileDown")
    def allow_clip_file_down(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow clip file down.
        """
        return pulumi.get(self, "allow_clip_file_down")

    @allow_clip_file_down.setter
    def allow_clip_file_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_clip_file_down", value)

    @property
    @pulumi.getter(name="allowClipFileUp")
    def allow_clip_file_up(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow clip file up.
        """
        return pulumi.get(self, "allow_clip_file_up")

    @allow_clip_file_up.setter
    def allow_clip_file_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_clip_file_up", value)

    @property
    @pulumi.getter(name="allowClipTextDown")
    def allow_clip_text_down(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow clip text down.
        """
        return pulumi.get(self, "allow_clip_text_down")

    @allow_clip_text_down.setter
    def allow_clip_text_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_clip_text_down", value)

    @property
    @pulumi.getter(name="allowClipTextUp")
    def allow_clip_text_up(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow clip text up.
        """
        return pulumi.get(self, "allow_clip_text_up")

    @allow_clip_text_up.setter
    def allow_clip_text_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_clip_text_up", value)

    @property
    @pulumi.getter(name="allowDiskFileDown")
    def allow_disk_file_down(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow disk file download.
        """
        return pulumi.get(self, "allow_disk_file_down")

    @allow_disk_file_down.setter
    def allow_disk_file_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_disk_file_down", value)

    @property
    @pulumi.getter(name="allowDiskFileUp")
    def allow_disk_file_up(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow disk file upload.
        """
        return pulumi.get(self, "allow_disk_file_up")

    @allow_disk_file_up.setter
    def allow_disk_file_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_disk_file_up", value)

    @property
    @pulumi.getter(name="allowFileDel")
    def allow_file_del(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow sftp file delete.
        """
        return pulumi.get(self, "allow_file_del")

    @allow_file_del.setter
    def allow_file_del(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_file_del", value)

    @property
    @pulumi.getter(name="allowFileDown")
    def allow_file_down(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow sftp file download.
        """
        return pulumi.get(self, "allow_file_down")

    @allow_file_down.setter
    def allow_file_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_file_down", value)

    @property
    @pulumi.getter(name="allowFileUp")
    def allow_file_up(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow sftp up file.
        """
        return pulumi.get(self, "allow_file_up")

    @allow_file_up.setter
    def allow_file_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_file_up", value)

    @property
    @pulumi.getter(name="allowShellFileDown")
    def allow_shell_file_down(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow shell file download.
        """
        return pulumi.get(self, "allow_shell_file_down")

    @allow_shell_file_down.setter
    def allow_shell_file_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_shell_file_down", value)

    @property
    @pulumi.getter(name="allowShellFileUp")
    def allow_shell_file_up(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow shell file upload.
        """
        return pulumi.get(self, "allow_shell_file_up")

    @allow_shell_file_up.setter
    def allow_shell_file_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_shell_file_up", value)

    @property
    @pulumi.getter(name="cmdTemplateIdSets")
    def cmd_template_id_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Associated high-risk command template ID.
        """
        return pulumi.get(self, "cmd_template_id_sets")

    @cmd_template_id_sets.setter
    def cmd_template_id_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "cmd_template_id_sets", value)

    @property
    @pulumi.getter(name="departmentId")
    def department_id(self) -> Optional[pulumi.Input[str]]:
        """
        Department id.
        """
        return pulumi.get(self, "department_id")

    @department_id.setter
    def department_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "department_id", value)

    @property
    @pulumi.getter(name="deviceGroupIdSets")
    def device_group_id_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Associated device group ID.
        """
        return pulumi.get(self, "device_group_id_sets")

    @device_group_id_sets.setter
    def device_group_id_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "device_group_id_sets", value)

    @property
    @pulumi.getter(name="deviceIdSets")
    def device_id_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Associated collection of device IDs.
        """
        return pulumi.get(self, "device_id_sets")

    @device_id_sets.setter
    def device_id_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "device_id_sets", value)

    @property
    @pulumi.getter(name="maxFileDownSize")
    def max_file_down_size(self) -> Optional[pulumi.Input[int]]:
        """
        File transfer download size limit (reserved parameter, currently unused).
        """
        return pulumi.get(self, "max_file_down_size")

    @max_file_down_size.setter
    def max_file_down_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_file_down_size", value)

    @property
    @pulumi.getter(name="maxFileUpSize")
    def max_file_up_size(self) -> Optional[pulumi.Input[int]]:
        """
        File upload transfer size limit (artifact parameter, currently unused).
        """
        return pulumi.get(self, "max_file_up_size")

    @max_file_up_size.setter
    def max_file_up_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_file_up_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Acl name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="userGroupIdSets")
    def user_group_id_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Associated user group ID.
        """
        return pulumi.get(self, "user_group_id_sets")

    @user_group_id_sets.setter
    def user_group_id_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "user_group_id_sets", value)

    @property
    @pulumi.getter(name="userIdSets")
    def user_id_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Associated set of user IDs.
        """
        return pulumi.get(self, "user_id_sets")

    @user_id_sets.setter
    def user_id_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "user_id_sets", value)

    @property
    @pulumi.getter(name="validateFrom")
    def validate_from(self) -> Optional[pulumi.Input[str]]:
        """
        Access permission effective time, such as: 2021-09-22T00:00:00+08:00If the effective and expiry time are not filled in, the access rights will be valid for a long time.
        """
        return pulumi.get(self, "validate_from")

    @validate_from.setter
    def validate_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "validate_from", value)

    @property
    @pulumi.getter(name="validateTo")
    def validate_to(self) -> Optional[pulumi.Input[str]]:
        """
        Access permission expiration time, such as: 2021-09-23T00:00:00+08:00If the effective and expiry time are not filled in, the access rights will be valid for a long time.
        """
        return pulumi.get(self, "validate_to")

    @validate_to.setter
    def validate_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "validate_to", value)


@pulumi.input_type
class _AclState:
    def __init__(__self__, *,
                 ac_template_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 account_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allow_access_credential: Optional[pulumi.Input[bool]] = None,
                 allow_any_account: Optional[pulumi.Input[bool]] = None,
                 allow_clip_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_clip_file_up: Optional[pulumi.Input[bool]] = None,
                 allow_clip_text_down: Optional[pulumi.Input[bool]] = None,
                 allow_clip_text_up: Optional[pulumi.Input[bool]] = None,
                 allow_disk_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_disk_file_up: Optional[pulumi.Input[bool]] = None,
                 allow_disk_redirect: Optional[pulumi.Input[bool]] = None,
                 allow_file_del: Optional[pulumi.Input[bool]] = None,
                 allow_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_file_up: Optional[pulumi.Input[bool]] = None,
                 allow_shell_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_shell_file_up: Optional[pulumi.Input[bool]] = None,
                 cmd_template_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 department_id: Optional[pulumi.Input[str]] = None,
                 device_group_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 device_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 max_file_down_size: Optional[pulumi.Input[int]] = None,
                 max_file_up_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_group_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 user_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 validate_from: Optional[pulumi.Input[str]] = None,
                 validate_to: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Acl resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ac_template_id_sets: Associate high-risk DB template IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_sets: Associated accounts.
        :param pulumi.Input[bool] allow_access_credential: Allow access credential,default allow.
        :param pulumi.Input[bool] allow_any_account: Allow any account.
        :param pulumi.Input[bool] allow_clip_file_down: Allow clip file down.
        :param pulumi.Input[bool] allow_clip_file_up: Allow clip file up.
        :param pulumi.Input[bool] allow_clip_text_down: Allow clip text down.
        :param pulumi.Input[bool] allow_clip_text_up: Allow clip text up.
        :param pulumi.Input[bool] allow_disk_file_down: Allow disk file download.
        :param pulumi.Input[bool] allow_disk_file_up: Allow disk file upload.
        :param pulumi.Input[bool] allow_disk_redirect: Allow disk redirect.
        :param pulumi.Input[bool] allow_file_del: Allow sftp file delete.
        :param pulumi.Input[bool] allow_file_down: Allow sftp file download.
        :param pulumi.Input[bool] allow_file_up: Allow sftp up file.
        :param pulumi.Input[bool] allow_shell_file_down: Allow shell file download.
        :param pulumi.Input[bool] allow_shell_file_up: Allow shell file upload.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] cmd_template_id_sets: Associated high-risk command template ID.
        :param pulumi.Input[str] department_id: Department id.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] device_group_id_sets: Associated device group ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] device_id_sets: Associated collection of device IDs.
        :param pulumi.Input[int] max_file_down_size: File transfer download size limit (reserved parameter, currently unused).
        :param pulumi.Input[int] max_file_up_size: File upload transfer size limit (artifact parameter, currently unused).
        :param pulumi.Input[str] name: Acl name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] user_group_id_sets: Associated user group ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] user_id_sets: Associated set of user IDs.
        :param pulumi.Input[str] validate_from: Access permission effective time, such as: 2021-09-22T00:00:00+08:00If the effective and expiry time are not filled in, the access rights will be valid for a long time.
        :param pulumi.Input[str] validate_to: Access permission expiration time, such as: 2021-09-23T00:00:00+08:00If the effective and expiry time are not filled in, the access rights will be valid for a long time.
        """
        if ac_template_id_sets is not None:
            pulumi.set(__self__, "ac_template_id_sets", ac_template_id_sets)
        if account_sets is not None:
            pulumi.set(__self__, "account_sets", account_sets)
        if allow_access_credential is not None:
            pulumi.set(__self__, "allow_access_credential", allow_access_credential)
        if allow_any_account is not None:
            pulumi.set(__self__, "allow_any_account", allow_any_account)
        if allow_clip_file_down is not None:
            pulumi.set(__self__, "allow_clip_file_down", allow_clip_file_down)
        if allow_clip_file_up is not None:
            pulumi.set(__self__, "allow_clip_file_up", allow_clip_file_up)
        if allow_clip_text_down is not None:
            pulumi.set(__self__, "allow_clip_text_down", allow_clip_text_down)
        if allow_clip_text_up is not None:
            pulumi.set(__self__, "allow_clip_text_up", allow_clip_text_up)
        if allow_disk_file_down is not None:
            pulumi.set(__self__, "allow_disk_file_down", allow_disk_file_down)
        if allow_disk_file_up is not None:
            pulumi.set(__self__, "allow_disk_file_up", allow_disk_file_up)
        if allow_disk_redirect is not None:
            pulumi.set(__self__, "allow_disk_redirect", allow_disk_redirect)
        if allow_file_del is not None:
            pulumi.set(__self__, "allow_file_del", allow_file_del)
        if allow_file_down is not None:
            pulumi.set(__self__, "allow_file_down", allow_file_down)
        if allow_file_up is not None:
            pulumi.set(__self__, "allow_file_up", allow_file_up)
        if allow_shell_file_down is not None:
            pulumi.set(__self__, "allow_shell_file_down", allow_shell_file_down)
        if allow_shell_file_up is not None:
            pulumi.set(__self__, "allow_shell_file_up", allow_shell_file_up)
        if cmd_template_id_sets is not None:
            pulumi.set(__self__, "cmd_template_id_sets", cmd_template_id_sets)
        if department_id is not None:
            pulumi.set(__self__, "department_id", department_id)
        if device_group_id_sets is not None:
            pulumi.set(__self__, "device_group_id_sets", device_group_id_sets)
        if device_id_sets is not None:
            pulumi.set(__self__, "device_id_sets", device_id_sets)
        if max_file_down_size is not None:
            pulumi.set(__self__, "max_file_down_size", max_file_down_size)
        if max_file_up_size is not None:
            pulumi.set(__self__, "max_file_up_size", max_file_up_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if user_group_id_sets is not None:
            pulumi.set(__self__, "user_group_id_sets", user_group_id_sets)
        if user_id_sets is not None:
            pulumi.set(__self__, "user_id_sets", user_id_sets)
        if validate_from is not None:
            pulumi.set(__self__, "validate_from", validate_from)
        if validate_to is not None:
            pulumi.set(__self__, "validate_to", validate_to)

    @property
    @pulumi.getter(name="acTemplateIdSets")
    def ac_template_id_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Associate high-risk DB template IDs.
        """
        return pulumi.get(self, "ac_template_id_sets")

    @ac_template_id_sets.setter
    def ac_template_id_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ac_template_id_sets", value)

    @property
    @pulumi.getter(name="accountSets")
    def account_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Associated accounts.
        """
        return pulumi.get(self, "account_sets")

    @account_sets.setter
    def account_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_sets", value)

    @property
    @pulumi.getter(name="allowAccessCredential")
    def allow_access_credential(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow access credential,default allow.
        """
        return pulumi.get(self, "allow_access_credential")

    @allow_access_credential.setter
    def allow_access_credential(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_access_credential", value)

    @property
    @pulumi.getter(name="allowAnyAccount")
    def allow_any_account(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow any account.
        """
        return pulumi.get(self, "allow_any_account")

    @allow_any_account.setter
    def allow_any_account(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_any_account", value)

    @property
    @pulumi.getter(name="allowClipFileDown")
    def allow_clip_file_down(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow clip file down.
        """
        return pulumi.get(self, "allow_clip_file_down")

    @allow_clip_file_down.setter
    def allow_clip_file_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_clip_file_down", value)

    @property
    @pulumi.getter(name="allowClipFileUp")
    def allow_clip_file_up(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow clip file up.
        """
        return pulumi.get(self, "allow_clip_file_up")

    @allow_clip_file_up.setter
    def allow_clip_file_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_clip_file_up", value)

    @property
    @pulumi.getter(name="allowClipTextDown")
    def allow_clip_text_down(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow clip text down.
        """
        return pulumi.get(self, "allow_clip_text_down")

    @allow_clip_text_down.setter
    def allow_clip_text_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_clip_text_down", value)

    @property
    @pulumi.getter(name="allowClipTextUp")
    def allow_clip_text_up(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow clip text up.
        """
        return pulumi.get(self, "allow_clip_text_up")

    @allow_clip_text_up.setter
    def allow_clip_text_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_clip_text_up", value)

    @property
    @pulumi.getter(name="allowDiskFileDown")
    def allow_disk_file_down(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow disk file download.
        """
        return pulumi.get(self, "allow_disk_file_down")

    @allow_disk_file_down.setter
    def allow_disk_file_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_disk_file_down", value)

    @property
    @pulumi.getter(name="allowDiskFileUp")
    def allow_disk_file_up(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow disk file upload.
        """
        return pulumi.get(self, "allow_disk_file_up")

    @allow_disk_file_up.setter
    def allow_disk_file_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_disk_file_up", value)

    @property
    @pulumi.getter(name="allowDiskRedirect")
    def allow_disk_redirect(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow disk redirect.
        """
        return pulumi.get(self, "allow_disk_redirect")

    @allow_disk_redirect.setter
    def allow_disk_redirect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_disk_redirect", value)

    @property
    @pulumi.getter(name="allowFileDel")
    def allow_file_del(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow sftp file delete.
        """
        return pulumi.get(self, "allow_file_del")

    @allow_file_del.setter
    def allow_file_del(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_file_del", value)

    @property
    @pulumi.getter(name="allowFileDown")
    def allow_file_down(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow sftp file download.
        """
        return pulumi.get(self, "allow_file_down")

    @allow_file_down.setter
    def allow_file_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_file_down", value)

    @property
    @pulumi.getter(name="allowFileUp")
    def allow_file_up(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow sftp up file.
        """
        return pulumi.get(self, "allow_file_up")

    @allow_file_up.setter
    def allow_file_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_file_up", value)

    @property
    @pulumi.getter(name="allowShellFileDown")
    def allow_shell_file_down(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow shell file download.
        """
        return pulumi.get(self, "allow_shell_file_down")

    @allow_shell_file_down.setter
    def allow_shell_file_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_shell_file_down", value)

    @property
    @pulumi.getter(name="allowShellFileUp")
    def allow_shell_file_up(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow shell file upload.
        """
        return pulumi.get(self, "allow_shell_file_up")

    @allow_shell_file_up.setter
    def allow_shell_file_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_shell_file_up", value)

    @property
    @pulumi.getter(name="cmdTemplateIdSets")
    def cmd_template_id_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Associated high-risk command template ID.
        """
        return pulumi.get(self, "cmd_template_id_sets")

    @cmd_template_id_sets.setter
    def cmd_template_id_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "cmd_template_id_sets", value)

    @property
    @pulumi.getter(name="departmentId")
    def department_id(self) -> Optional[pulumi.Input[str]]:
        """
        Department id.
        """
        return pulumi.get(self, "department_id")

    @department_id.setter
    def department_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "department_id", value)

    @property
    @pulumi.getter(name="deviceGroupIdSets")
    def device_group_id_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Associated device group ID.
        """
        return pulumi.get(self, "device_group_id_sets")

    @device_group_id_sets.setter
    def device_group_id_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "device_group_id_sets", value)

    @property
    @pulumi.getter(name="deviceIdSets")
    def device_id_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Associated collection of device IDs.
        """
        return pulumi.get(self, "device_id_sets")

    @device_id_sets.setter
    def device_id_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "device_id_sets", value)

    @property
    @pulumi.getter(name="maxFileDownSize")
    def max_file_down_size(self) -> Optional[pulumi.Input[int]]:
        """
        File transfer download size limit (reserved parameter, currently unused).
        """
        return pulumi.get(self, "max_file_down_size")

    @max_file_down_size.setter
    def max_file_down_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_file_down_size", value)

    @property
    @pulumi.getter(name="maxFileUpSize")
    def max_file_up_size(self) -> Optional[pulumi.Input[int]]:
        """
        File upload transfer size limit (artifact parameter, currently unused).
        """
        return pulumi.get(self, "max_file_up_size")

    @max_file_up_size.setter
    def max_file_up_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_file_up_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Acl name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="userGroupIdSets")
    def user_group_id_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Associated user group ID.
        """
        return pulumi.get(self, "user_group_id_sets")

    @user_group_id_sets.setter
    def user_group_id_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "user_group_id_sets", value)

    @property
    @pulumi.getter(name="userIdSets")
    def user_id_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Associated set of user IDs.
        """
        return pulumi.get(self, "user_id_sets")

    @user_id_sets.setter
    def user_id_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "user_id_sets", value)

    @property
    @pulumi.getter(name="validateFrom")
    def validate_from(self) -> Optional[pulumi.Input[str]]:
        """
        Access permission effective time, such as: 2021-09-22T00:00:00+08:00If the effective and expiry time are not filled in, the access rights will be valid for a long time.
        """
        return pulumi.get(self, "validate_from")

    @validate_from.setter
    def validate_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "validate_from", value)

    @property
    @pulumi.getter(name="validateTo")
    def validate_to(self) -> Optional[pulumi.Input[str]]:
        """
        Access permission expiration time, such as: 2021-09-23T00:00:00+08:00If the effective and expiry time are not filled in, the access rights will be valid for a long time.
        """
        return pulumi.get(self, "validate_to")

    @validate_to.setter
    def validate_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "validate_to", value)


class Acl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ac_template_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 account_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allow_access_credential: Optional[pulumi.Input[bool]] = None,
                 allow_any_account: Optional[pulumi.Input[bool]] = None,
                 allow_clip_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_clip_file_up: Optional[pulumi.Input[bool]] = None,
                 allow_clip_text_down: Optional[pulumi.Input[bool]] = None,
                 allow_clip_text_up: Optional[pulumi.Input[bool]] = None,
                 allow_disk_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_disk_file_up: Optional[pulumi.Input[bool]] = None,
                 allow_disk_redirect: Optional[pulumi.Input[bool]] = None,
                 allow_file_del: Optional[pulumi.Input[bool]] = None,
                 allow_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_file_up: Optional[pulumi.Input[bool]] = None,
                 allow_shell_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_shell_file_up: Optional[pulumi.Input[bool]] = None,
                 cmd_template_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 department_id: Optional[pulumi.Input[str]] = None,
                 device_group_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 device_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 max_file_down_size: Optional[pulumi.Input[int]] = None,
                 max_file_up_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_group_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 user_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 validate_from: Optional[pulumi.Input[str]] = None,
                 validate_to: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a dasb acl

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_user = tencentcloud.dasb.User("exampleUser",
            user_name="tf_example",
            real_name="terraform",
            phone="+86|18345678782",
            email="demo@tencent.com",
            auth_type=0)
        example_user_group = tencentcloud.dasb.UserGroup("exampleUserGroup")
        example_device = tencentcloud.dasb.Device("exampleDevice",
            os_name="Linux",
            ip="192.168.0.1",
            port=80)
        example_device_group = tencentcloud.dasb.DeviceGroup("exampleDeviceGroup")
        example_device_account = tencentcloud.dasb.DeviceAccount("exampleDeviceAccount",
            device_id=example_device.id,
            account="root")
        example_cmd_template = tencentcloud.dasb.CmdTemplate("exampleCmdTemplate", cmd_list="rm -rf*")
        example_acl = tencentcloud.dasb.Acl("exampleAcl",
            allow_disk_redirect=True,
            allow_any_account=False,
            allow_clip_file_up=True,
            allow_clip_file_down=True,
            allow_clip_text_up=True,
            allow_clip_text_down=True,
            allow_file_up=True,
            allow_file_down=True,
            max_file_up_size=0,
            max_file_down_size=0,
            user_id_sets=[example_user.id],
            user_group_id_sets=[example_user_group.id],
            device_id_sets=[example_device.id],
            device_group_id_sets=[example_device_group.id],
            account_sets=[example_device_account.id],
            cmd_template_id_sets=[example_cmd_template.id],
            ac_template_id_sets=[],
            allow_disk_file_up=True,
            allow_disk_file_down=True,
            allow_shell_file_up=True,
            allow_shell_file_down=True,
            allow_file_del=True,
            allow_access_credential=True)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dasb acl can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dasb/acl:Acl example 132
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ac_template_id_sets: Associate high-risk DB template IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_sets: Associated accounts.
        :param pulumi.Input[bool] allow_access_credential: Allow access credential,default allow.
        :param pulumi.Input[bool] allow_any_account: Allow any account.
        :param pulumi.Input[bool] allow_clip_file_down: Allow clip file down.
        :param pulumi.Input[bool] allow_clip_file_up: Allow clip file up.
        :param pulumi.Input[bool] allow_clip_text_down: Allow clip text down.
        :param pulumi.Input[bool] allow_clip_text_up: Allow clip text up.
        :param pulumi.Input[bool] allow_disk_file_down: Allow disk file download.
        :param pulumi.Input[bool] allow_disk_file_up: Allow disk file upload.
        :param pulumi.Input[bool] allow_disk_redirect: Allow disk redirect.
        :param pulumi.Input[bool] allow_file_del: Allow sftp file delete.
        :param pulumi.Input[bool] allow_file_down: Allow sftp file download.
        :param pulumi.Input[bool] allow_file_up: Allow sftp up file.
        :param pulumi.Input[bool] allow_shell_file_down: Allow shell file download.
        :param pulumi.Input[bool] allow_shell_file_up: Allow shell file upload.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] cmd_template_id_sets: Associated high-risk command template ID.
        :param pulumi.Input[str] department_id: Department id.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] device_group_id_sets: Associated device group ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] device_id_sets: Associated collection of device IDs.
        :param pulumi.Input[int] max_file_down_size: File transfer download size limit (reserved parameter, currently unused).
        :param pulumi.Input[int] max_file_up_size: File upload transfer size limit (artifact parameter, currently unused).
        :param pulumi.Input[str] name: Acl name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] user_group_id_sets: Associated user group ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] user_id_sets: Associated set of user IDs.
        :param pulumi.Input[str] validate_from: Access permission effective time, such as: 2021-09-22T00:00:00+08:00If the effective and expiry time are not filled in, the access rights will be valid for a long time.
        :param pulumi.Input[str] validate_to: Access permission expiration time, such as: 2021-09-23T00:00:00+08:00If the effective and expiry time are not filled in, the access rights will be valid for a long time.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AclArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dasb acl

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_user = tencentcloud.dasb.User("exampleUser",
            user_name="tf_example",
            real_name="terraform",
            phone="+86|18345678782",
            email="demo@tencent.com",
            auth_type=0)
        example_user_group = tencentcloud.dasb.UserGroup("exampleUserGroup")
        example_device = tencentcloud.dasb.Device("exampleDevice",
            os_name="Linux",
            ip="192.168.0.1",
            port=80)
        example_device_group = tencentcloud.dasb.DeviceGroup("exampleDeviceGroup")
        example_device_account = tencentcloud.dasb.DeviceAccount("exampleDeviceAccount",
            device_id=example_device.id,
            account="root")
        example_cmd_template = tencentcloud.dasb.CmdTemplate("exampleCmdTemplate", cmd_list="rm -rf*")
        example_acl = tencentcloud.dasb.Acl("exampleAcl",
            allow_disk_redirect=True,
            allow_any_account=False,
            allow_clip_file_up=True,
            allow_clip_file_down=True,
            allow_clip_text_up=True,
            allow_clip_text_down=True,
            allow_file_up=True,
            allow_file_down=True,
            max_file_up_size=0,
            max_file_down_size=0,
            user_id_sets=[example_user.id],
            user_group_id_sets=[example_user_group.id],
            device_id_sets=[example_device.id],
            device_group_id_sets=[example_device_group.id],
            account_sets=[example_device_account.id],
            cmd_template_id_sets=[example_cmd_template.id],
            ac_template_id_sets=[],
            allow_disk_file_up=True,
            allow_disk_file_down=True,
            allow_shell_file_up=True,
            allow_shell_file_down=True,
            allow_file_del=True,
            allow_access_credential=True)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dasb acl can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dasb/acl:Acl example 132
        ```

        :param str resource_name: The name of the resource.
        :param AclArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AclArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ac_template_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 account_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allow_access_credential: Optional[pulumi.Input[bool]] = None,
                 allow_any_account: Optional[pulumi.Input[bool]] = None,
                 allow_clip_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_clip_file_up: Optional[pulumi.Input[bool]] = None,
                 allow_clip_text_down: Optional[pulumi.Input[bool]] = None,
                 allow_clip_text_up: Optional[pulumi.Input[bool]] = None,
                 allow_disk_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_disk_file_up: Optional[pulumi.Input[bool]] = None,
                 allow_disk_redirect: Optional[pulumi.Input[bool]] = None,
                 allow_file_del: Optional[pulumi.Input[bool]] = None,
                 allow_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_file_up: Optional[pulumi.Input[bool]] = None,
                 allow_shell_file_down: Optional[pulumi.Input[bool]] = None,
                 allow_shell_file_up: Optional[pulumi.Input[bool]] = None,
                 cmd_template_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 department_id: Optional[pulumi.Input[str]] = None,
                 device_group_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 device_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 max_file_down_size: Optional[pulumi.Input[int]] = None,
                 max_file_up_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 user_group_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 user_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 validate_from: Optional[pulumi.Input[str]] = None,
                 validate_to: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AclArgs.__new__(AclArgs)

            __props__.__dict__["ac_template_id_sets"] = ac_template_id_sets
            __props__.__dict__["account_sets"] = account_sets
            __props__.__dict__["allow_access_credential"] = allow_access_credential
            if allow_any_account is None and not opts.urn:
                raise TypeError("Missing required property 'allow_any_account'")
            __props__.__dict__["allow_any_account"] = allow_any_account
            __props__.__dict__["allow_clip_file_down"] = allow_clip_file_down
            __props__.__dict__["allow_clip_file_up"] = allow_clip_file_up
            __props__.__dict__["allow_clip_text_down"] = allow_clip_text_down
            __props__.__dict__["allow_clip_text_up"] = allow_clip_text_up
            __props__.__dict__["allow_disk_file_down"] = allow_disk_file_down
            __props__.__dict__["allow_disk_file_up"] = allow_disk_file_up
            if allow_disk_redirect is None and not opts.urn:
                raise TypeError("Missing required property 'allow_disk_redirect'")
            __props__.__dict__["allow_disk_redirect"] = allow_disk_redirect
            __props__.__dict__["allow_file_del"] = allow_file_del
            __props__.__dict__["allow_file_down"] = allow_file_down
            __props__.__dict__["allow_file_up"] = allow_file_up
            __props__.__dict__["allow_shell_file_down"] = allow_shell_file_down
            __props__.__dict__["allow_shell_file_up"] = allow_shell_file_up
            __props__.__dict__["cmd_template_id_sets"] = cmd_template_id_sets
            __props__.__dict__["department_id"] = department_id
            __props__.__dict__["device_group_id_sets"] = device_group_id_sets
            __props__.__dict__["device_id_sets"] = device_id_sets
            __props__.__dict__["max_file_down_size"] = max_file_down_size
            __props__.__dict__["max_file_up_size"] = max_file_up_size
            __props__.__dict__["name"] = name
            __props__.__dict__["user_group_id_sets"] = user_group_id_sets
            __props__.__dict__["user_id_sets"] = user_id_sets
            __props__.__dict__["validate_from"] = validate_from
            __props__.__dict__["validate_to"] = validate_to
        super(Acl, __self__).__init__(
            'tencentcloud:Dasb/acl:Acl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ac_template_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            account_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            allow_access_credential: Optional[pulumi.Input[bool]] = None,
            allow_any_account: Optional[pulumi.Input[bool]] = None,
            allow_clip_file_down: Optional[pulumi.Input[bool]] = None,
            allow_clip_file_up: Optional[pulumi.Input[bool]] = None,
            allow_clip_text_down: Optional[pulumi.Input[bool]] = None,
            allow_clip_text_up: Optional[pulumi.Input[bool]] = None,
            allow_disk_file_down: Optional[pulumi.Input[bool]] = None,
            allow_disk_file_up: Optional[pulumi.Input[bool]] = None,
            allow_disk_redirect: Optional[pulumi.Input[bool]] = None,
            allow_file_del: Optional[pulumi.Input[bool]] = None,
            allow_file_down: Optional[pulumi.Input[bool]] = None,
            allow_file_up: Optional[pulumi.Input[bool]] = None,
            allow_shell_file_down: Optional[pulumi.Input[bool]] = None,
            allow_shell_file_up: Optional[pulumi.Input[bool]] = None,
            cmd_template_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            department_id: Optional[pulumi.Input[str]] = None,
            device_group_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            device_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            max_file_down_size: Optional[pulumi.Input[int]] = None,
            max_file_up_size: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            user_group_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            user_id_sets: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            validate_from: Optional[pulumi.Input[str]] = None,
            validate_to: Optional[pulumi.Input[str]] = None) -> 'Acl':
        """
        Get an existing Acl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ac_template_id_sets: Associate high-risk DB template IDs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_sets: Associated accounts.
        :param pulumi.Input[bool] allow_access_credential: Allow access credential,default allow.
        :param pulumi.Input[bool] allow_any_account: Allow any account.
        :param pulumi.Input[bool] allow_clip_file_down: Allow clip file down.
        :param pulumi.Input[bool] allow_clip_file_up: Allow clip file up.
        :param pulumi.Input[bool] allow_clip_text_down: Allow clip text down.
        :param pulumi.Input[bool] allow_clip_text_up: Allow clip text up.
        :param pulumi.Input[bool] allow_disk_file_down: Allow disk file download.
        :param pulumi.Input[bool] allow_disk_file_up: Allow disk file upload.
        :param pulumi.Input[bool] allow_disk_redirect: Allow disk redirect.
        :param pulumi.Input[bool] allow_file_del: Allow sftp file delete.
        :param pulumi.Input[bool] allow_file_down: Allow sftp file download.
        :param pulumi.Input[bool] allow_file_up: Allow sftp up file.
        :param pulumi.Input[bool] allow_shell_file_down: Allow shell file download.
        :param pulumi.Input[bool] allow_shell_file_up: Allow shell file upload.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] cmd_template_id_sets: Associated high-risk command template ID.
        :param pulumi.Input[str] department_id: Department id.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] device_group_id_sets: Associated device group ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] device_id_sets: Associated collection of device IDs.
        :param pulumi.Input[int] max_file_down_size: File transfer download size limit (reserved parameter, currently unused).
        :param pulumi.Input[int] max_file_up_size: File upload transfer size limit (artifact parameter, currently unused).
        :param pulumi.Input[str] name: Acl name.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] user_group_id_sets: Associated user group ID.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] user_id_sets: Associated set of user IDs.
        :param pulumi.Input[str] validate_from: Access permission effective time, such as: 2021-09-22T00:00:00+08:00If the effective and expiry time are not filled in, the access rights will be valid for a long time.
        :param pulumi.Input[str] validate_to: Access permission expiration time, such as: 2021-09-23T00:00:00+08:00If the effective and expiry time are not filled in, the access rights will be valid for a long time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AclState.__new__(_AclState)

        __props__.__dict__["ac_template_id_sets"] = ac_template_id_sets
        __props__.__dict__["account_sets"] = account_sets
        __props__.__dict__["allow_access_credential"] = allow_access_credential
        __props__.__dict__["allow_any_account"] = allow_any_account
        __props__.__dict__["allow_clip_file_down"] = allow_clip_file_down
        __props__.__dict__["allow_clip_file_up"] = allow_clip_file_up
        __props__.__dict__["allow_clip_text_down"] = allow_clip_text_down
        __props__.__dict__["allow_clip_text_up"] = allow_clip_text_up
        __props__.__dict__["allow_disk_file_down"] = allow_disk_file_down
        __props__.__dict__["allow_disk_file_up"] = allow_disk_file_up
        __props__.__dict__["allow_disk_redirect"] = allow_disk_redirect
        __props__.__dict__["allow_file_del"] = allow_file_del
        __props__.__dict__["allow_file_down"] = allow_file_down
        __props__.__dict__["allow_file_up"] = allow_file_up
        __props__.__dict__["allow_shell_file_down"] = allow_shell_file_down
        __props__.__dict__["allow_shell_file_up"] = allow_shell_file_up
        __props__.__dict__["cmd_template_id_sets"] = cmd_template_id_sets
        __props__.__dict__["department_id"] = department_id
        __props__.__dict__["device_group_id_sets"] = device_group_id_sets
        __props__.__dict__["device_id_sets"] = device_id_sets
        __props__.__dict__["max_file_down_size"] = max_file_down_size
        __props__.__dict__["max_file_up_size"] = max_file_up_size
        __props__.__dict__["name"] = name
        __props__.__dict__["user_group_id_sets"] = user_group_id_sets
        __props__.__dict__["user_id_sets"] = user_id_sets
        __props__.__dict__["validate_from"] = validate_from
        __props__.__dict__["validate_to"] = validate_to
        return Acl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acTemplateIdSets")
    def ac_template_id_sets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Associate high-risk DB template IDs.
        """
        return pulumi.get(self, "ac_template_id_sets")

    @property
    @pulumi.getter(name="accountSets")
    def account_sets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Associated accounts.
        """
        return pulumi.get(self, "account_sets")

    @property
    @pulumi.getter(name="allowAccessCredential")
    def allow_access_credential(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow access credential,default allow.
        """
        return pulumi.get(self, "allow_access_credential")

    @property
    @pulumi.getter(name="allowAnyAccount")
    def allow_any_account(self) -> pulumi.Output[bool]:
        """
        Allow any account.
        """
        return pulumi.get(self, "allow_any_account")

    @property
    @pulumi.getter(name="allowClipFileDown")
    def allow_clip_file_down(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow clip file down.
        """
        return pulumi.get(self, "allow_clip_file_down")

    @property
    @pulumi.getter(name="allowClipFileUp")
    def allow_clip_file_up(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow clip file up.
        """
        return pulumi.get(self, "allow_clip_file_up")

    @property
    @pulumi.getter(name="allowClipTextDown")
    def allow_clip_text_down(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow clip text down.
        """
        return pulumi.get(self, "allow_clip_text_down")

    @property
    @pulumi.getter(name="allowClipTextUp")
    def allow_clip_text_up(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow clip text up.
        """
        return pulumi.get(self, "allow_clip_text_up")

    @property
    @pulumi.getter(name="allowDiskFileDown")
    def allow_disk_file_down(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow disk file download.
        """
        return pulumi.get(self, "allow_disk_file_down")

    @property
    @pulumi.getter(name="allowDiskFileUp")
    def allow_disk_file_up(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow disk file upload.
        """
        return pulumi.get(self, "allow_disk_file_up")

    @property
    @pulumi.getter(name="allowDiskRedirect")
    def allow_disk_redirect(self) -> pulumi.Output[bool]:
        """
        Allow disk redirect.
        """
        return pulumi.get(self, "allow_disk_redirect")

    @property
    @pulumi.getter(name="allowFileDel")
    def allow_file_del(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow sftp file delete.
        """
        return pulumi.get(self, "allow_file_del")

    @property
    @pulumi.getter(name="allowFileDown")
    def allow_file_down(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow sftp file download.
        """
        return pulumi.get(self, "allow_file_down")

    @property
    @pulumi.getter(name="allowFileUp")
    def allow_file_up(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow sftp up file.
        """
        return pulumi.get(self, "allow_file_up")

    @property
    @pulumi.getter(name="allowShellFileDown")
    def allow_shell_file_down(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow shell file download.
        """
        return pulumi.get(self, "allow_shell_file_down")

    @property
    @pulumi.getter(name="allowShellFileUp")
    def allow_shell_file_up(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow shell file upload.
        """
        return pulumi.get(self, "allow_shell_file_up")

    @property
    @pulumi.getter(name="cmdTemplateIdSets")
    def cmd_template_id_sets(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Associated high-risk command template ID.
        """
        return pulumi.get(self, "cmd_template_id_sets")

    @property
    @pulumi.getter(name="departmentId")
    def department_id(self) -> pulumi.Output[Optional[str]]:
        """
        Department id.
        """
        return pulumi.get(self, "department_id")

    @property
    @pulumi.getter(name="deviceGroupIdSets")
    def device_group_id_sets(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Associated device group ID.
        """
        return pulumi.get(self, "device_group_id_sets")

    @property
    @pulumi.getter(name="deviceIdSets")
    def device_id_sets(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Associated collection of device IDs.
        """
        return pulumi.get(self, "device_id_sets")

    @property
    @pulumi.getter(name="maxFileDownSize")
    def max_file_down_size(self) -> pulumi.Output[Optional[int]]:
        """
        File transfer download size limit (reserved parameter, currently unused).
        """
        return pulumi.get(self, "max_file_down_size")

    @property
    @pulumi.getter(name="maxFileUpSize")
    def max_file_up_size(self) -> pulumi.Output[Optional[int]]:
        """
        File upload transfer size limit (artifact parameter, currently unused).
        """
        return pulumi.get(self, "max_file_up_size")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Acl name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="userGroupIdSets")
    def user_group_id_sets(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Associated user group ID.
        """
        return pulumi.get(self, "user_group_id_sets")

    @property
    @pulumi.getter(name="userIdSets")
    def user_id_sets(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        Associated set of user IDs.
        """
        return pulumi.get(self, "user_id_sets")

    @property
    @pulumi.getter(name="validateFrom")
    def validate_from(self) -> pulumi.Output[str]:
        """
        Access permission effective time, such as: 2021-09-22T00:00:00+08:00If the effective and expiry time are not filled in, the access rights will be valid for a long time.
        """
        return pulumi.get(self, "validate_from")

    @property
    @pulumi.getter(name="validateTo")
    def validate_to(self) -> pulumi.Output[str]:
        """
        Access permission expiration time, such as: 2021-09-23T00:00:00+08:00If the effective and expiry time are not filled in, the access rights will be valid for a long time.
        """
        return pulumi.get(self, "validate_to")

