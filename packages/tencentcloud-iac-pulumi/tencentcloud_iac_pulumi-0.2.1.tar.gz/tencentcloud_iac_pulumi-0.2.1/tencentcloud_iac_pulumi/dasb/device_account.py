# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DeviceAccountArgs', 'DeviceAccount']

@pulumi.input_type
class DeviceAccountArgs:
    def __init__(__self__, *,
                 account: pulumi.Input[str],
                 device_id: pulumi.Input[int]):
        """
        The set of arguments for constructing a DeviceAccount resource.
        :param pulumi.Input[str] account: Device account.
        :param pulumi.Input[int] device_id: Device ID.
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "device_id", device_id)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Input[str]:
        """
        Device account.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: pulumi.Input[str]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Input[int]:
        """
        Device ID.
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "device_id", value)


@pulumi.input_type
class _DeviceAccountState:
    def __init__(__self__, *,
                 account: Optional[pulumi.Input[str]] = None,
                 device_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering DeviceAccount resources.
        :param pulumi.Input[str] account: Device account.
        :param pulumi.Input[int] device_id: Device ID.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[str]]:
        """
        Device account.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[pulumi.Input[int]]:
        """
        Device ID.
        """
        return pulumi.get(self, "device_id")

    @device_id.setter
    def device_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_id", value)


class DeviceAccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[str]] = None,
                 device_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a dasb device_account

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_device = tencentcloud.dasb.Device("exampleDevice",
            os_name="Linux",
            ip="192.168.0.1",
            port=80)
        example_device_account = tencentcloud.dasb.DeviceAccount("exampleDeviceAccount",
            device_id=example_device.id,
            account="root")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dasb device_account can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dasb/deviceAccount:DeviceAccount example 11
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account: Device account.
        :param pulumi.Input[int] device_id: Device ID.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceAccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dasb device_account

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example_device = tencentcloud.dasb.Device("exampleDevice",
            os_name="Linux",
            ip="192.168.0.1",
            port=80)
        example_device_account = tencentcloud.dasb.DeviceAccount("exampleDeviceAccount",
            device_id=example_device.id,
            account="root")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dasb device_account can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dasb/deviceAccount:DeviceAccount example 11
        ```

        :param str resource_name: The name of the resource.
        :param DeviceAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account: Optional[pulumi.Input[str]] = None,
                 device_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceAccountArgs.__new__(DeviceAccountArgs)

            if account is None and not opts.urn:
                raise TypeError("Missing required property 'account'")
            __props__.__dict__["account"] = account
            if device_id is None and not opts.urn:
                raise TypeError("Missing required property 'device_id'")
            __props__.__dict__["device_id"] = device_id
        super(DeviceAccount, __self__).__init__(
            'tencentcloud:Dasb/deviceAccount:DeviceAccount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account: Optional[pulumi.Input[str]] = None,
            device_id: Optional[pulumi.Input[int]] = None) -> 'DeviceAccount':
        """
        Get an existing DeviceAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account: Device account.
        :param pulumi.Input[int] device_id: Device ID.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceAccountState.__new__(_DeviceAccountState)

        __props__.__dict__["account"] = account
        __props__.__dict__["device_id"] = device_id
        return DeviceAccount(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def account(self) -> pulumi.Output[str]:
        """
        Device account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> pulumi.Output[int]:
        """
        Device ID.
        """
        return pulumi.get(self, "device_id")

