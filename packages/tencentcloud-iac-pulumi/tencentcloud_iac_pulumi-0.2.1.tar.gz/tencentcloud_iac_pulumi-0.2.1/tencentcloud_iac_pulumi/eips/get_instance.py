# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceResult',
    'AwaitableGetInstanceResult',
    'get_instance',
    'get_instance_output',
]

@pulumi.output_type
class GetInstanceResult:
    """
    A collection of values returned by getInstance.
    """
    def __init__(__self__, eip_id=None, eip_lists=None, eip_name=None, id=None, public_ip=None, result_output_file=None, tags=None):
        if eip_id and not isinstance(eip_id, str):
            raise TypeError("Expected argument 'eip_id' to be a str")
        pulumi.set(__self__, "eip_id", eip_id)
        if eip_lists and not isinstance(eip_lists, list):
            raise TypeError("Expected argument 'eip_lists' to be a list")
        pulumi.set(__self__, "eip_lists", eip_lists)
        if eip_name and not isinstance(eip_name, str):
            raise TypeError("Expected argument 'eip_name' to be a str")
        pulumi.set(__self__, "eip_name", eip_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[str]:
        """
        ID of the EIP.
        """
        return pulumi.get(self, "eip_id")

    @property
    @pulumi.getter(name="eipLists")
    def eip_lists(self) -> Sequence['outputs.GetInstanceEipListResult']:
        """
        An information list of EIP. Each element contains the following attributes:
        """
        return pulumi.get(self, "eip_lists")

    @property
    @pulumi.getter(name="eipName")
    def eip_name(self) -> Optional[str]:
        """
        Name of the EIP.
        """
        return pulumi.get(self, "eip_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        """
        The elastic ip address.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, Any]]:
        """
        Tags of the EIP.
        """
        return pulumi.get(self, "tags")


class AwaitableGetInstanceResult(GetInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceResult(
            eip_id=self.eip_id,
            eip_lists=self.eip_lists,
            eip_name=self.eip_name,
            id=self.id,
            public_ip=self.public_ip,
            result_output_file=self.result_output_file,
            tags=self.tags)


def get_instance(eip_id: Optional[str] = None,
                 eip_name: Optional[str] = None,
                 public_ip: Optional[str] = None,
                 result_output_file: Optional[str] = None,
                 tags: Optional[Mapping[str, Any]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceResult:
    """
    Use this data source to query eip instances.

    ## Example Usage

    ### Query all eip instances

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Eips.get_instance()
    ```
    <!--End PulumiCodeChooser -->

    ### Query eip instances by eip ID

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Eips.get_instance(eip_id="eip-ry9h95hg")
    ```
    <!--End PulumiCodeChooser -->

    ### Query eip instances by eip name

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Eips.get_instance(eip_name="tf-example")
    ```
    <!--End PulumiCodeChooser -->

    ### Query eip instances by public ip

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Eips.get_instance(public_ip="1.12.62.3")
    ```
    <!--End PulumiCodeChooser -->

    ### Query eip instances by tags

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Eips.get_instance(tags={
        "test": "test",
    })
    ```
    <!--End PulumiCodeChooser -->


    :param str eip_id: ID of the EIP to be queried.
    :param str eip_name: Name of the EIP to be queried.
    :param str public_ip: The elastic ip address.
    :param str result_output_file: Used to save results.
    :param Mapping[str, Any] tags: The tags of EIP.
    """
    __args__ = dict()
    __args__['eipId'] = eip_id
    __args__['eipName'] = eip_name
    __args__['publicIp'] = public_ip
    __args__['resultOutputFile'] = result_output_file
    __args__['tags'] = tags
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Eips/getInstance:getInstance', __args__, opts=opts, typ=GetInstanceResult).value

    return AwaitableGetInstanceResult(
        eip_id=pulumi.get(__ret__, 'eip_id'),
        eip_lists=pulumi.get(__ret__, 'eip_lists'),
        eip_name=pulumi.get(__ret__, 'eip_name'),
        id=pulumi.get(__ret__, 'id'),
        public_ip=pulumi.get(__ret__, 'public_ip'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_instance)
def get_instance_output(eip_id: Optional[pulumi.Input[Optional[str]]] = None,
                        eip_name: Optional[pulumi.Input[Optional[str]]] = None,
                        public_ip: Optional[pulumi.Input[Optional[str]]] = None,
                        result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                        tags: Optional[pulumi.Input[Optional[Mapping[str, Any]]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceResult]:
    """
    Use this data source to query eip instances.

    ## Example Usage

    ### Query all eip instances

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Eips.get_instance()
    ```
    <!--End PulumiCodeChooser -->

    ### Query eip instances by eip ID

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Eips.get_instance(eip_id="eip-ry9h95hg")
    ```
    <!--End PulumiCodeChooser -->

    ### Query eip instances by eip name

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Eips.get_instance(eip_name="tf-example")
    ```
    <!--End PulumiCodeChooser -->

    ### Query eip instances by public ip

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Eips.get_instance(public_ip="1.12.62.3")
    ```
    <!--End PulumiCodeChooser -->

    ### Query eip instances by tags

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    example = tencentcloud.Eips.get_instance(tags={
        "test": "test",
    })
    ```
    <!--End PulumiCodeChooser -->


    :param str eip_id: ID of the EIP to be queried.
    :param str eip_name: Name of the EIP to be queried.
    :param str public_ip: The elastic ip address.
    :param str result_output_file: Used to save results.
    :param Mapping[str, Any] tags: The tags of EIP.
    """
    ...
