# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProxyArgs', 'Proxy']

@pulumi.input_type
class ProxyArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 proxy_node_customs: pulumi.Input[Sequence[pulumi.Input['ProxyProxyNodeCustomArgs']]],
                 uniq_subnet_id: pulumi.Input[str],
                 uniq_vpc_id: pulumi.Input[str],
                 connection_pool_limit: Optional[pulumi.Input[int]] = None,
                 desc: Optional[pulumi.Input[str]] = None,
                 proxy_version: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 upgrade_time: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Proxy resource.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyProxyNodeCustomArgs']]] proxy_node_customs: Node specification configuration.
        :param pulumi.Input[str] uniq_subnet_id: Subnet id.
        :param pulumi.Input[str] uniq_vpc_id: Vpc id.
        :param pulumi.Input[int] connection_pool_limit: Connection Pool Threshold.
        :param pulumi.Input[str] desc: Describe.
        :param pulumi.Input[str] proxy_version: The current version of the database agent. No need to fill in when creating.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security group.
        :param pulumi.Input[str] upgrade_time: Upgrade time: nowTime (upgrade completed) timeWindow (instance maintenance time), Required when modifying the agent version, No need to fill in when creating.
        :param pulumi.Input[str] vip: IP address.
        :param pulumi.Input[int] vport: Port.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "proxy_node_customs", proxy_node_customs)
        pulumi.set(__self__, "uniq_subnet_id", uniq_subnet_id)
        pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        if connection_pool_limit is not None:
            pulumi.set(__self__, "connection_pool_limit", connection_pool_limit)
        if desc is not None:
            pulumi.set(__self__, "desc", desc)
        if proxy_version is not None:
            pulumi.set(__self__, "proxy_version", proxy_version)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if upgrade_time is not None:
            pulumi.set(__self__, "upgrade_time", upgrade_time)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vport is not None:
            pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="proxyNodeCustoms")
    def proxy_node_customs(self) -> pulumi.Input[Sequence[pulumi.Input['ProxyProxyNodeCustomArgs']]]:
        """
        Node specification configuration.
        """
        return pulumi.get(self, "proxy_node_customs")

    @proxy_node_customs.setter
    def proxy_node_customs(self, value: pulumi.Input[Sequence[pulumi.Input['ProxyProxyNodeCustomArgs']]]):
        pulumi.set(self, "proxy_node_customs", value)

    @property
    @pulumi.getter(name="uniqSubnetId")
    def uniq_subnet_id(self) -> pulumi.Input[str]:
        """
        Subnet id.
        """
        return pulumi.get(self, "uniq_subnet_id")

    @uniq_subnet_id.setter
    def uniq_subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "uniq_subnet_id", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> pulumi.Input[str]:
        """
        Vpc id.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "uniq_vpc_id", value)

    @property
    @pulumi.getter(name="connectionPoolLimit")
    def connection_pool_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Connection Pool Threshold.
        """
        return pulumi.get(self, "connection_pool_limit")

    @connection_pool_limit.setter
    def connection_pool_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_pool_limit", value)

    @property
    @pulumi.getter
    def desc(self) -> Optional[pulumi.Input[str]]:
        """
        Describe.
        """
        return pulumi.get(self, "desc")

    @desc.setter
    def desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desc", value)

    @property
    @pulumi.getter(name="proxyVersion")
    def proxy_version(self) -> Optional[pulumi.Input[str]]:
        """
        The current version of the database agent. No need to fill in when creating.
        """
        return pulumi.get(self, "proxy_version")

    @proxy_version.setter
    def proxy_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_version", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="upgradeTime")
    def upgrade_time(self) -> Optional[pulumi.Input[str]]:
        """
        Upgrade time: nowTime (upgrade completed) timeWindow (instance maintenance time), Required when modifying the agent version, No need to fill in when creating.
        """
        return pulumi.get(self, "upgrade_time")

    @upgrade_time.setter
    def upgrade_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_time", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter
    def vport(self) -> Optional[pulumi.Input[int]]:
        """
        Port.
        """
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vport", value)


@pulumi.input_type
class _ProxyState:
    def __init__(__self__, *,
                 connection_pool_limit: Optional[pulumi.Input[int]] = None,
                 desc: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 proxy_address_id: Optional[pulumi.Input[str]] = None,
                 proxy_group_id: Optional[pulumi.Input[str]] = None,
                 proxy_node_customs: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyProxyNodeCustomArgs']]]] = None,
                 proxy_version: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 uniq_subnet_id: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 upgrade_time: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Proxy resources.
        :param pulumi.Input[int] connection_pool_limit: Connection Pool Threshold.
        :param pulumi.Input[str] desc: Describe.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[str] proxy_address_id: Proxy address id.
        :param pulumi.Input[str] proxy_group_id: Proxy group id.
        :param pulumi.Input[Sequence[pulumi.Input['ProxyProxyNodeCustomArgs']]] proxy_node_customs: Node specification configuration.
        :param pulumi.Input[str] proxy_version: The current version of the database agent. No need to fill in when creating.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security group.
        :param pulumi.Input[str] uniq_subnet_id: Subnet id.
        :param pulumi.Input[str] uniq_vpc_id: Vpc id.
        :param pulumi.Input[str] upgrade_time: Upgrade time: nowTime (upgrade completed) timeWindow (instance maintenance time), Required when modifying the agent version, No need to fill in when creating.
        :param pulumi.Input[str] vip: IP address.
        :param pulumi.Input[int] vport: Port.
        """
        if connection_pool_limit is not None:
            pulumi.set(__self__, "connection_pool_limit", connection_pool_limit)
        if desc is not None:
            pulumi.set(__self__, "desc", desc)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if proxy_address_id is not None:
            pulumi.set(__self__, "proxy_address_id", proxy_address_id)
        if proxy_group_id is not None:
            pulumi.set(__self__, "proxy_group_id", proxy_group_id)
        if proxy_node_customs is not None:
            pulumi.set(__self__, "proxy_node_customs", proxy_node_customs)
        if proxy_version is not None:
            pulumi.set(__self__, "proxy_version", proxy_version)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if uniq_subnet_id is not None:
            pulumi.set(__self__, "uniq_subnet_id", uniq_subnet_id)
        if uniq_vpc_id is not None:
            pulumi.set(__self__, "uniq_vpc_id", uniq_vpc_id)
        if upgrade_time is not None:
            pulumi.set(__self__, "upgrade_time", upgrade_time)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)
        if vport is not None:
            pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter(name="connectionPoolLimit")
    def connection_pool_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Connection Pool Threshold.
        """
        return pulumi.get(self, "connection_pool_limit")

    @connection_pool_limit.setter
    def connection_pool_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connection_pool_limit", value)

    @property
    @pulumi.getter
    def desc(self) -> Optional[pulumi.Input[str]]:
        """
        Describe.
        """
        return pulumi.get(self, "desc")

    @desc.setter
    def desc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desc", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="proxyAddressId")
    def proxy_address_id(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy address id.
        """
        return pulumi.get(self, "proxy_address_id")

    @proxy_address_id.setter
    def proxy_address_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_address_id", value)

    @property
    @pulumi.getter(name="proxyGroupId")
    def proxy_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Proxy group id.
        """
        return pulumi.get(self, "proxy_group_id")

    @proxy_group_id.setter
    def proxy_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_group_id", value)

    @property
    @pulumi.getter(name="proxyNodeCustoms")
    def proxy_node_customs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProxyProxyNodeCustomArgs']]]]:
        """
        Node specification configuration.
        """
        return pulumi.get(self, "proxy_node_customs")

    @proxy_node_customs.setter
    def proxy_node_customs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProxyProxyNodeCustomArgs']]]]):
        pulumi.set(self, "proxy_node_customs", value)

    @property
    @pulumi.getter(name="proxyVersion")
    def proxy_version(self) -> Optional[pulumi.Input[str]]:
        """
        The current version of the database agent. No need to fill in when creating.
        """
        return pulumi.get(self, "proxy_version")

    @proxy_version.setter
    def proxy_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_version", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security group.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="uniqSubnetId")
    def uniq_subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet id.
        """
        return pulumi.get(self, "uniq_subnet_id")

    @uniq_subnet_id.setter
    def uniq_subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_subnet_id", value)

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Vpc id.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @uniq_vpc_id.setter
    def uniq_vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uniq_vpc_id", value)

    @property
    @pulumi.getter(name="upgradeTime")
    def upgrade_time(self) -> Optional[pulumi.Input[str]]:
        """
        Upgrade time: nowTime (upgrade completed) timeWindow (instance maintenance time), Required when modifying the agent version, No need to fill in when creating.
        """
        return pulumi.get(self, "upgrade_time")

    @upgrade_time.setter
    def upgrade_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upgrade_time", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address.
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vip", value)

    @property
    @pulumi.getter
    def vport(self) -> Optional[pulumi.Input[int]]:
        """
        Port.
        """
        return pulumi.get(self, "vport")

    @vport.setter
    def vport(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vport", value)


class Proxy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_pool_limit: Optional[pulumi.Input[int]] = None,
                 desc: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 proxy_node_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyProxyNodeCustomArgs']]]]] = None,
                 proxy_version: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 uniq_subnet_id: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 upgrade_time: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Provides a resource to create a mysql proxy

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cdb")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="mysql test")
        example_instance = tencentcloud.mysql.Instance("exampleInstance",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=1,
            availability_zone=zones.zones[0].name,
            first_slave_zone=zones.zones[1].name,
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        example_proxy = tencentcloud.mysql.Proxy("exampleProxy",
            instance_id=example_instance.id,
            uniq_vpc_id=vpc.id,
            uniq_subnet_id=subnet.id,
            proxy_node_customs=[tencentcloud.mysql.ProxyProxyNodeCustomArgs(
                node_count=1,
                cpu=2,
                mem=4000,
                region="ap-guangzhou",
                zone="ap-guangzhou-3",
            )],
            security_groups=[security_group.id],
            desc="desc.",
            connection_pool_limit=2,
            vip="10.0.0.120",
            vport=3306)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] connection_pool_limit: Connection Pool Threshold.
        :param pulumi.Input[str] desc: Describe.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyProxyNodeCustomArgs']]]] proxy_node_customs: Node specification configuration.
        :param pulumi.Input[str] proxy_version: The current version of the database agent. No need to fill in when creating.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security group.
        :param pulumi.Input[str] uniq_subnet_id: Subnet id.
        :param pulumi.Input[str] uniq_vpc_id: Vpc id.
        :param pulumi.Input[str] upgrade_time: Upgrade time: nowTime (upgrade completed) timeWindow (instance maintenance time), Required when modifying the agent version, No need to fill in when creating.
        :param pulumi.Input[str] vip: IP address.
        :param pulumi.Input[int] vport: Port.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProxyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mysql proxy

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cdb")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="mysql test")
        example_instance = tencentcloud.mysql.Instance("exampleInstance",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=1,
            availability_zone=zones.zones[0].name,
            first_slave_zone=zones.zones[1].name,
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        example_proxy = tencentcloud.mysql.Proxy("exampleProxy",
            instance_id=example_instance.id,
            uniq_vpc_id=vpc.id,
            uniq_subnet_id=subnet.id,
            proxy_node_customs=[tencentcloud.mysql.ProxyProxyNodeCustomArgs(
                node_count=1,
                cpu=2,
                mem=4000,
                region="ap-guangzhou",
                zone="ap-guangzhou-3",
            )],
            security_groups=[security_group.id],
            desc="desc.",
            connection_pool_limit=2,
            vip="10.0.0.120",
            vport=3306)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ProxyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProxyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_pool_limit: Optional[pulumi.Input[int]] = None,
                 desc: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 proxy_node_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyProxyNodeCustomArgs']]]]] = None,
                 proxy_version: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 uniq_subnet_id: Optional[pulumi.Input[str]] = None,
                 uniq_vpc_id: Optional[pulumi.Input[str]] = None,
                 upgrade_time: Optional[pulumi.Input[str]] = None,
                 vip: Optional[pulumi.Input[str]] = None,
                 vport: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProxyArgs.__new__(ProxyArgs)

            __props__.__dict__["connection_pool_limit"] = connection_pool_limit
            __props__.__dict__["desc"] = desc
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if proxy_node_customs is None and not opts.urn:
                raise TypeError("Missing required property 'proxy_node_customs'")
            __props__.__dict__["proxy_node_customs"] = proxy_node_customs
            __props__.__dict__["proxy_version"] = proxy_version
            __props__.__dict__["security_groups"] = security_groups
            if uniq_subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'uniq_subnet_id'")
            __props__.__dict__["uniq_subnet_id"] = uniq_subnet_id
            if uniq_vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'uniq_vpc_id'")
            __props__.__dict__["uniq_vpc_id"] = uniq_vpc_id
            __props__.__dict__["upgrade_time"] = upgrade_time
            __props__.__dict__["vip"] = vip
            __props__.__dict__["vport"] = vport
            __props__.__dict__["proxy_address_id"] = None
            __props__.__dict__["proxy_group_id"] = None
        super(Proxy, __self__).__init__(
            'tencentcloud:Mysql/proxy:Proxy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            connection_pool_limit: Optional[pulumi.Input[int]] = None,
            desc: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            proxy_address_id: Optional[pulumi.Input[str]] = None,
            proxy_group_id: Optional[pulumi.Input[str]] = None,
            proxy_node_customs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyProxyNodeCustomArgs']]]]] = None,
            proxy_version: Optional[pulumi.Input[str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            uniq_subnet_id: Optional[pulumi.Input[str]] = None,
            uniq_vpc_id: Optional[pulumi.Input[str]] = None,
            upgrade_time: Optional[pulumi.Input[str]] = None,
            vip: Optional[pulumi.Input[str]] = None,
            vport: Optional[pulumi.Input[int]] = None) -> 'Proxy':
        """
        Get an existing Proxy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] connection_pool_limit: Connection Pool Threshold.
        :param pulumi.Input[str] desc: Describe.
        :param pulumi.Input[str] instance_id: Instance id.
        :param pulumi.Input[str] proxy_address_id: Proxy address id.
        :param pulumi.Input[str] proxy_group_id: Proxy group id.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProxyProxyNodeCustomArgs']]]] proxy_node_customs: Node specification configuration.
        :param pulumi.Input[str] proxy_version: The current version of the database agent. No need to fill in when creating.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security group.
        :param pulumi.Input[str] uniq_subnet_id: Subnet id.
        :param pulumi.Input[str] uniq_vpc_id: Vpc id.
        :param pulumi.Input[str] upgrade_time: Upgrade time: nowTime (upgrade completed) timeWindow (instance maintenance time), Required when modifying the agent version, No need to fill in when creating.
        :param pulumi.Input[str] vip: IP address.
        :param pulumi.Input[int] vport: Port.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProxyState.__new__(_ProxyState)

        __props__.__dict__["connection_pool_limit"] = connection_pool_limit
        __props__.__dict__["desc"] = desc
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["proxy_address_id"] = proxy_address_id
        __props__.__dict__["proxy_group_id"] = proxy_group_id
        __props__.__dict__["proxy_node_customs"] = proxy_node_customs
        __props__.__dict__["proxy_version"] = proxy_version
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["uniq_subnet_id"] = uniq_subnet_id
        __props__.__dict__["uniq_vpc_id"] = uniq_vpc_id
        __props__.__dict__["upgrade_time"] = upgrade_time
        __props__.__dict__["vip"] = vip
        __props__.__dict__["vport"] = vport
        return Proxy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectionPoolLimit")
    def connection_pool_limit(self) -> pulumi.Output[Optional[int]]:
        """
        Connection Pool Threshold.
        """
        return pulumi.get(self, "connection_pool_limit")

    @property
    @pulumi.getter
    def desc(self) -> pulumi.Output[Optional[str]]:
        """
        Describe.
        """
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="proxyAddressId")
    def proxy_address_id(self) -> pulumi.Output[str]:
        """
        Proxy address id.
        """
        return pulumi.get(self, "proxy_address_id")

    @property
    @pulumi.getter(name="proxyGroupId")
    def proxy_group_id(self) -> pulumi.Output[str]:
        """
        Proxy group id.
        """
        return pulumi.get(self, "proxy_group_id")

    @property
    @pulumi.getter(name="proxyNodeCustoms")
    def proxy_node_customs(self) -> pulumi.Output[Sequence['outputs.ProxyProxyNodeCustom']]:
        """
        Node specification configuration.
        """
        return pulumi.get(self, "proxy_node_customs")

    @property
    @pulumi.getter(name="proxyVersion")
    def proxy_version(self) -> pulumi.Output[str]:
        """
        The current version of the database agent. No need to fill in when creating.
        """
        return pulumi.get(self, "proxy_version")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security group.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="uniqSubnetId")
    def uniq_subnet_id(self) -> pulumi.Output[str]:
        """
        Subnet id.
        """
        return pulumi.get(self, "uniq_subnet_id")

    @property
    @pulumi.getter(name="uniqVpcId")
    def uniq_vpc_id(self) -> pulumi.Output[str]:
        """
        Vpc id.
        """
        return pulumi.get(self, "uniq_vpc_id")

    @property
    @pulumi.getter(name="upgradeTime")
    def upgrade_time(self) -> pulumi.Output[Optional[str]]:
        """
        Upgrade time: nowTime (upgrade completed) timeWindow (instance maintenance time), Required when modifying the agent version, No need to fill in when creating.
        """
        return pulumi.get(self, "upgrade_time")

    @property
    @pulumi.getter
    def vip(self) -> pulumi.Output[str]:
        """
        IP address.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def vport(self) -> pulumi.Output[int]:
        """
        Port.
        """
        return pulumi.get(self, "vport")

