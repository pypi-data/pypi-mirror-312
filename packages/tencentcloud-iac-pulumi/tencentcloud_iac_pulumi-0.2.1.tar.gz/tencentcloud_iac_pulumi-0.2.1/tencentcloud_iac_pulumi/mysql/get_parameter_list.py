# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetParameterListResult',
    'AwaitableGetParameterListResult',
    'get_parameter_list',
    'get_parameter_list_output',
]

@pulumi.output_type
class GetParameterListResult:
    """
    A collection of values returned by getParameterList.
    """
    def __init__(__self__, engine_version=None, id=None, mysql_id=None, parameter_lists=None, result_output_file=None):
        if engine_version and not isinstance(engine_version, str):
            raise TypeError("Expected argument 'engine_version' to be a str")
        pulumi.set(__self__, "engine_version", engine_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mysql_id and not isinstance(mysql_id, str):
            raise TypeError("Expected argument 'mysql_id' to be a str")
        pulumi.set(__self__, "mysql_id", mysql_id)
        if parameter_lists and not isinstance(parameter_lists, list):
            raise TypeError("Expected argument 'parameter_lists' to be a list")
        pulumi.set(__self__, "parameter_lists", parameter_lists)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[str]:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mysqlId")
    def mysql_id(self) -> Optional[str]:
        return pulumi.get(self, "mysql_id")

    @property
    @pulumi.getter(name="parameterLists")
    def parameter_lists(self) -> Sequence['outputs.GetParameterListParameterListResult']:
        """
        A list of parameters. Each element contains the following attributes:
        """
        return pulumi.get(self, "parameter_lists")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetParameterListResult(GetParameterListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetParameterListResult(
            engine_version=self.engine_version,
            id=self.id,
            mysql_id=self.mysql_id,
            parameter_lists=self.parameter_lists,
            result_output_file=self.result_output_file)


def get_parameter_list(engine_version: Optional[str] = None,
                       mysql_id: Optional[str] = None,
                       result_output_file: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetParameterListResult:
    """
    Use this data source to get information about a parameter group of a database instance.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    mysql = tencentcloud.Mysql.get_parameter_list(engine_version="5.5",
        mysql_id="terraform-test-local-database",
        result_output_file="mytestpath")
    ```
    <!--End PulumiCodeChooser -->


    :param str engine_version: The version number of the database engine to use. Supported versions include 5.5/5.6/5.7/8.0.
    :param str mysql_id: Instance ID.
    :param str result_output_file: Used to store results.
    """
    __args__ = dict()
    __args__['engineVersion'] = engine_version
    __args__['mysqlId'] = mysql_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mysql/getParameterList:getParameterList', __args__, opts=opts, typ=GetParameterListResult).value

    return AwaitableGetParameterListResult(
        engine_version=pulumi.get(__ret__, 'engine_version'),
        id=pulumi.get(__ret__, 'id'),
        mysql_id=pulumi.get(__ret__, 'mysql_id'),
        parameter_lists=pulumi.get(__ret__, 'parameter_lists'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_parameter_list)
def get_parameter_list_output(engine_version: Optional[pulumi.Input[Optional[str]]] = None,
                              mysql_id: Optional[pulumi.Input[Optional[str]]] = None,
                              result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetParameterListResult]:
    """
    Use this data source to get information about a parameter group of a database instance.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    mysql = tencentcloud.Mysql.get_parameter_list(engine_version="5.5",
        mysql_id="terraform-test-local-database",
        result_output_file="mytestpath")
    ```
    <!--End PulumiCodeChooser -->


    :param str engine_version: The version number of the database engine to use. Supported versions include 5.5/5.6/5.7/8.0.
    :param str mysql_id: Instance ID.
    :param str result_output_file: Used to store results.
    """
    ...
