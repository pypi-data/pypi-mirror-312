# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DrInstanceArgs', 'DrInstance']

@pulumi.input_type
class DrInstanceArgs:
    def __init__(__self__, *,
                 instance_name: pulumi.Input[str],
                 master_instance_id: pulumi.Input[str],
                 master_region: pulumi.Input[str],
                 mem_size: pulumi.Input[int],
                 volume_size: pulumi.Input[int],
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 first_slave_zone: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 intranet_port: Optional[pulumi.Input[int]] = None,
                 pay_type: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 second_slave_zone: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slave_deploy_mode: Optional[pulumi.Input[int]] = None,
                 slave_sync_mode: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DrInstance resource.
        :param pulumi.Input[str] instance_name: The name of a mysql instance.
        :param pulumi.Input[str] master_instance_id: Indicates the master instance ID of recovery instances.
        :param pulumi.Input[str] master_region: The zone information of the primary instance is required when you purchase a disaster recovery instance.
        :param pulumi.Input[int] mem_size: Memory size (in MB).
        :param pulumi.Input[int] volume_size: Disk size (in GB).
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] availability_zone: Indicates which availability zone will be used.
        :param pulumi.Input[str] charge_type: Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        :param pulumi.Input[int] cpu: CPU cores.
        :param pulumi.Input[str] device_type: Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        :param pulumi.Input[str] first_slave_zone: Zone information about first slave instance.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance.
        :param pulumi.Input[int] intranet_port: Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        :param pulumi.Input[int] pay_type: It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        :param pulumi.Input[int] period: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] prepaid_period: Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[str] second_slave_zone: Zone information about second slave instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups to use.
        :param pulumi.Input[int] slave_deploy_mode: Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        :param pulumi.Input[int] slave_sync_mode: Data replication mode. 0 - Async replication; 1 - Semisync replication; 2 - Strongsync replication.
        :param pulumi.Input[str] subnet_id: Private network ID. If `vpc_id` is set, this value is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[str] vpc_id: ID of VPC, which can be modified once every 24 hours and can't be removed.
        """
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "master_instance_id", master_instance_id)
        pulumi.set(__self__, "master_region", master_region)
        pulumi.set(__self__, "mem_size", mem_size)
        pulumi.set(__self__, "volume_size", volume_size)
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if first_slave_zone is not None:
            pulumi.set(__self__, "first_slave_zone", first_slave_zone)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if intranet_port is not None:
            pulumi.set(__self__, "intranet_port", intranet_port)
        if pay_type is not None:
            warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
            pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")
        if pay_type is not None:
            pulumi.set(__self__, "pay_type", pay_type)
        if period is not None:
            warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
            pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")
        if period is not None:
            pulumi.set(__self__, "period", period)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if second_slave_zone is not None:
            pulumi.set(__self__, "second_slave_zone", second_slave_zone)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if slave_deploy_mode is not None:
            pulumi.set(__self__, "slave_deploy_mode", slave_deploy_mode)
        if slave_sync_mode is not None:
            pulumi.set(__self__, "slave_sync_mode", slave_sync_mode)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Input[str]:
        """
        The name of a mysql instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="masterInstanceId")
    def master_instance_id(self) -> pulumi.Input[str]:
        """
        Indicates the master instance ID of recovery instances.
        """
        return pulumi.get(self, "master_instance_id")

    @master_instance_id.setter
    def master_instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_instance_id", value)

    @property
    @pulumi.getter(name="masterRegion")
    def master_region(self) -> pulumi.Input[str]:
        """
        The zone information of the primary instance is required when you purchase a disaster recovery instance.
        """
        return pulumi.get(self, "master_region")

    @master_region.setter
    def master_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "master_region", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> pulumi.Input[int]:
        """
        Memory size (in MB).
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> pulumi.Input[int]:
        """
        Disk size (in GB).
        """
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Auto renew flag. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        CPU cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="firstSlaveZone")
    def first_slave_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone information about first slave instance.
        """
        return pulumi.get(self, "first_slave_zone")

    @first_slave_zone.setter
    def first_slave_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_slave_zone", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter(name="intranetPort")
    def intranet_port(self) -> Optional[pulumi.Input[int]]:
        """
        Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        """
        return pulumi.get(self, "intranet_port")

    @intranet_port.setter
    def intranet_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "intranet_port", value)

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> Optional[pulumi.Input[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
        pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")

        return pulumi.get(self, "pay_type")

    @pay_type.setter
    def pay_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_type", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
        pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")

        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period of instance. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID, default value is 0.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="secondSlaveZone")
    def second_slave_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone information about second slave instance.
        """
        return pulumi.get(self, "second_slave_zone")

    @second_slave_zone.setter
    def second_slave_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "second_slave_zone", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to use.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="slaveDeployMode")
    def slave_deploy_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        """
        return pulumi.get(self, "slave_deploy_mode")

    @slave_deploy_mode.setter
    def slave_deploy_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slave_deploy_mode", value)

    @property
    @pulumi.getter(name="slaveSyncMode")
    def slave_sync_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Data replication mode. 0 - Async replication; 1 - Semisync replication; 2 - Strongsync replication.
        """
        return pulumi.get(self, "slave_sync_mode")

    @slave_sync_mode.setter
    def slave_sync_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slave_sync_mode", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private network ID. If `vpc_id` is set, this value is required.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Instance tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of VPC, which can be modified once every 24 hours and can't be removed.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _DrInstanceState:
    def __init__(__self__, *,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 first_slave_zone: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 intranet_ip: Optional[pulumi.Input[str]] = None,
                 intranet_port: Optional[pulumi.Input[int]] = None,
                 master_instance_id: Optional[pulumi.Input[str]] = None,
                 master_region: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 pay_type: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 second_slave_zone: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slave_deploy_mode: Optional[pulumi.Input[int]] = None,
                 slave_sync_mode: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DrInstance resources.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] availability_zone: Indicates which availability zone will be used.
        :param pulumi.Input[str] charge_type: Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        :param pulumi.Input[int] cpu: CPU cores.
        :param pulumi.Input[str] device_type: Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        :param pulumi.Input[str] first_slave_zone: Zone information about first slave instance.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance.
        :param pulumi.Input[str] instance_name: The name of a mysql instance.
        :param pulumi.Input[str] intranet_ip: instance intranet IP.
        :param pulumi.Input[int] intranet_port: Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        :param pulumi.Input[str] master_instance_id: Indicates the master instance ID of recovery instances.
        :param pulumi.Input[str] master_region: The zone information of the primary instance is required when you purchase a disaster recovery instance.
        :param pulumi.Input[int] mem_size: Memory size (in MB).
        :param pulumi.Input[int] pay_type: It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        :param pulumi.Input[int] period: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] prepaid_period: Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[str] second_slave_zone: Zone information about second slave instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups to use.
        :param pulumi.Input[int] slave_deploy_mode: Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        :param pulumi.Input[int] slave_sync_mode: Data replication mode. 0 - Async replication; 1 - Semisync replication; 2 - Strongsync replication.
        :param pulumi.Input[str] subnet_id: Private network ID. If `vpc_id` is set, this value is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[int] volume_size: Disk size (in GB).
        :param pulumi.Input[str] vpc_id: ID of VPC, which can be modified once every 24 hours and can't be removed.
        """
        if auto_renew_flag is not None:
            pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)
        if first_slave_zone is not None:
            pulumi.set(__self__, "first_slave_zone", first_slave_zone)
        if force_delete is not None:
            pulumi.set(__self__, "force_delete", force_delete)
        if instance_name is not None:
            pulumi.set(__self__, "instance_name", instance_name)
        if intranet_ip is not None:
            pulumi.set(__self__, "intranet_ip", intranet_ip)
        if intranet_port is not None:
            pulumi.set(__self__, "intranet_port", intranet_port)
        if master_instance_id is not None:
            pulumi.set(__self__, "master_instance_id", master_instance_id)
        if master_region is not None:
            pulumi.set(__self__, "master_region", master_region)
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if pay_type is not None:
            warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
            pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")
        if pay_type is not None:
            pulumi.set(__self__, "pay_type", pay_type)
        if period is not None:
            warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
            pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")
        if period is not None:
            pulumi.set(__self__, "period", period)
        if prepaid_period is not None:
            pulumi.set(__self__, "prepaid_period", prepaid_period)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if second_slave_zone is not None:
            pulumi.set(__self__, "second_slave_zone", second_slave_zone)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if slave_deploy_mode is not None:
            pulumi.set(__self__, "slave_deploy_mode", slave_deploy_mode)
        if slave_sync_mode is not None:
            pulumi.set(__self__, "slave_sync_mode", slave_sync_mode)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> Optional[pulumi.Input[int]]:
        """
        Auto renew flag. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "auto_renew_flag")

    @auto_renew_flag.setter
    def auto_renew_flag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_renew_flag", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[str]]:
        """
        Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        """
        CPU cores.
        """
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        """
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter(name="firstSlaveZone")
    def first_slave_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone information about first slave instance.
        """
        return pulumi.get(self, "first_slave_zone")

    @first_slave_zone.setter
    def first_slave_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_slave_zone", value)

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance.
        """
        return pulumi.get(self, "force_delete")

    @force_delete.setter
    def force_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_delete", value)

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a mysql instance.
        """
        return pulumi.get(self, "instance_name")

    @instance_name.setter
    def instance_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_name", value)

    @property
    @pulumi.getter(name="intranetIp")
    def intranet_ip(self) -> Optional[pulumi.Input[str]]:
        """
        instance intranet IP.
        """
        return pulumi.get(self, "intranet_ip")

    @intranet_ip.setter
    def intranet_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intranet_ip", value)

    @property
    @pulumi.getter(name="intranetPort")
    def intranet_port(self) -> Optional[pulumi.Input[int]]:
        """
        Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        """
        return pulumi.get(self, "intranet_port")

    @intranet_port.setter
    def intranet_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "intranet_port", value)

    @property
    @pulumi.getter(name="masterInstanceId")
    def master_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the master instance ID of recovery instances.
        """
        return pulumi.get(self, "master_instance_id")

    @master_instance_id.setter
    def master_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_instance_id", value)

    @property
    @pulumi.getter(name="masterRegion")
    def master_region(self) -> Optional[pulumi.Input[str]]:
        """
        The zone information of the primary instance is required when you purchase a disaster recovery instance.
        """
        return pulumi.get(self, "master_region")

    @master_region.setter
    def master_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_region", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        """
        Memory size (in MB).
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> Optional[pulumi.Input[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
        pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")

        return pulumi.get(self, "pay_type")

    @pay_type.setter
    def pay_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pay_type", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
        pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")

        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> Optional[pulumi.Input[int]]:
        """
        Period of instance. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "prepaid_period")

    @prepaid_period.setter
    def prepaid_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "prepaid_period", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        """
        Project ID, default value is 0.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="secondSlaveZone")
    def second_slave_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Zone information about second slave instance.
        """
        return pulumi.get(self, "second_slave_zone")

    @second_slave_zone.setter
    def second_slave_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "second_slave_zone", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Security groups to use.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="slaveDeployMode")
    def slave_deploy_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        """
        return pulumi.get(self, "slave_deploy_mode")

    @slave_deploy_mode.setter
    def slave_deploy_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slave_deploy_mode", value)

    @property
    @pulumi.getter(name="slaveSyncMode")
    def slave_sync_mode(self) -> Optional[pulumi.Input[int]]:
        """
        Data replication mode. 0 - Async replication; 1 - Semisync replication; 2 - Strongsync replication.
        """
        return pulumi.get(self, "slave_sync_mode")

    @slave_sync_mode.setter
    def slave_sync_mode(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slave_sync_mode", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private network ID. If `vpc_id` is set, this value is required.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Instance tags.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[int]]:
        """
        Disk size (in GB).
        """
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of VPC, which can be modified once every 24 hours and can't be removed.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class DrInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 first_slave_zone: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 intranet_port: Optional[pulumi.Input[int]] = None,
                 master_instance_id: Optional[pulumi.Input[str]] = None,
                 master_region: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 pay_type: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 second_slave_zone: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slave_deploy_mode: Optional[pulumi.Input[int]] = None,
                 slave_sync_mode: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a mysql instance resource to create read-only database instances.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        mysql_dr = tencentcloud.mysql.DrInstance("mysqlDr",
            auto_renew_flag=0,
            availability_zone="ap-shanghai-3",
            charge_type="POSTPAID",
            cpu=4,
            device_type="UNIVERSAL",
            first_slave_zone="ap-shanghai-4",
            instance_name="mysql-dr-test-up",
            intranet_port=3360,
            master_instance_id="cdb-adjdu3t5",
            master_region="ap-guangzhou",
            mem_size=8000,
            prepaid_period=1,
            project_id=0,
            security_groups=["sg-q4d821qk"],
            slave_deploy_mode=1,
            slave_sync_mode=0,
            subnet_id="subnet-5vfntba5",
            tags={
                "test": "test-tf",
            },
            volume_size=100,
            vpc_id="vpc-h6s1s3aa")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mysql dr database instances can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mysql/drInstance:DrInstance mysql_dr cdb-bcet7sdb
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] availability_zone: Indicates which availability zone will be used.
        :param pulumi.Input[str] charge_type: Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        :param pulumi.Input[int] cpu: CPU cores.
        :param pulumi.Input[str] device_type: Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        :param pulumi.Input[str] first_slave_zone: Zone information about first slave instance.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance.
        :param pulumi.Input[str] instance_name: The name of a mysql instance.
        :param pulumi.Input[int] intranet_port: Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        :param pulumi.Input[str] master_instance_id: Indicates the master instance ID of recovery instances.
        :param pulumi.Input[str] master_region: The zone information of the primary instance is required when you purchase a disaster recovery instance.
        :param pulumi.Input[int] mem_size: Memory size (in MB).
        :param pulumi.Input[int] pay_type: It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        :param pulumi.Input[int] period: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] prepaid_period: Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[str] second_slave_zone: Zone information about second slave instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups to use.
        :param pulumi.Input[int] slave_deploy_mode: Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        :param pulumi.Input[int] slave_sync_mode: Data replication mode. 0 - Async replication; 1 - Semisync replication; 2 - Strongsync replication.
        :param pulumi.Input[str] subnet_id: Private network ID. If `vpc_id` is set, this value is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[int] volume_size: Disk size (in GB).
        :param pulumi.Input[str] vpc_id: ID of VPC, which can be modified once every 24 hours and can't be removed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DrInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a mysql instance resource to create read-only database instances.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        mysql_dr = tencentcloud.mysql.DrInstance("mysqlDr",
            auto_renew_flag=0,
            availability_zone="ap-shanghai-3",
            charge_type="POSTPAID",
            cpu=4,
            device_type="UNIVERSAL",
            first_slave_zone="ap-shanghai-4",
            instance_name="mysql-dr-test-up",
            intranet_port=3360,
            master_instance_id="cdb-adjdu3t5",
            master_region="ap-guangzhou",
            mem_size=8000,
            prepaid_period=1,
            project_id=0,
            security_groups=["sg-q4d821qk"],
            slave_deploy_mode=1,
            slave_sync_mode=0,
            subnet_id="subnet-5vfntba5",
            tags={
                "test": "test-tf",
            },
            volume_size=100,
            vpc_id="vpc-h6s1s3aa")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mysql dr database instances can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Mysql/drInstance:DrInstance mysql_dr cdb-bcet7sdb
        ```

        :param str resource_name: The name of the resource.
        :param DrInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DrInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_renew_flag: Optional[pulumi.Input[int]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 charge_type: Optional[pulumi.Input[str]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 device_type: Optional[pulumi.Input[str]] = None,
                 first_slave_zone: Optional[pulumi.Input[str]] = None,
                 force_delete: Optional[pulumi.Input[bool]] = None,
                 instance_name: Optional[pulumi.Input[str]] = None,
                 intranet_port: Optional[pulumi.Input[int]] = None,
                 master_instance_id: Optional[pulumi.Input[str]] = None,
                 master_region: Optional[pulumi.Input[str]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 pay_type: Optional[pulumi.Input[int]] = None,
                 period: Optional[pulumi.Input[int]] = None,
                 prepaid_period: Optional[pulumi.Input[int]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 second_slave_zone: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slave_deploy_mode: Optional[pulumi.Input[int]] = None,
                 slave_sync_mode: Optional[pulumi.Input[int]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DrInstanceArgs.__new__(DrInstanceArgs)

            __props__.__dict__["auto_renew_flag"] = auto_renew_flag
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["charge_type"] = charge_type
            __props__.__dict__["cpu"] = cpu
            __props__.__dict__["device_type"] = device_type
            __props__.__dict__["first_slave_zone"] = first_slave_zone
            __props__.__dict__["force_delete"] = force_delete
            if instance_name is None and not opts.urn:
                raise TypeError("Missing required property 'instance_name'")
            __props__.__dict__["instance_name"] = instance_name
            __props__.__dict__["intranet_port"] = intranet_port
            if master_instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'master_instance_id'")
            __props__.__dict__["master_instance_id"] = master_instance_id
            if master_region is None and not opts.urn:
                raise TypeError("Missing required property 'master_region'")
            __props__.__dict__["master_region"] = master_region
            if mem_size is None and not opts.urn:
                raise TypeError("Missing required property 'mem_size'")
            __props__.__dict__["mem_size"] = mem_size
            __props__.__dict__["pay_type"] = pay_type
            __props__.__dict__["period"] = period
            __props__.__dict__["prepaid_period"] = prepaid_period
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["second_slave_zone"] = second_slave_zone
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["slave_deploy_mode"] = slave_deploy_mode
            __props__.__dict__["slave_sync_mode"] = slave_sync_mode
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            if volume_size is None and not opts.urn:
                raise TypeError("Missing required property 'volume_size'")
            __props__.__dict__["volume_size"] = volume_size
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["intranet_ip"] = None
        super(DrInstance, __self__).__init__(
            'tencentcloud:Mysql/drInstance:DrInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_renew_flag: Optional[pulumi.Input[int]] = None,
            availability_zone: Optional[pulumi.Input[str]] = None,
            charge_type: Optional[pulumi.Input[str]] = None,
            cpu: Optional[pulumi.Input[int]] = None,
            device_type: Optional[pulumi.Input[str]] = None,
            first_slave_zone: Optional[pulumi.Input[str]] = None,
            force_delete: Optional[pulumi.Input[bool]] = None,
            instance_name: Optional[pulumi.Input[str]] = None,
            intranet_ip: Optional[pulumi.Input[str]] = None,
            intranet_port: Optional[pulumi.Input[int]] = None,
            master_instance_id: Optional[pulumi.Input[str]] = None,
            master_region: Optional[pulumi.Input[str]] = None,
            mem_size: Optional[pulumi.Input[int]] = None,
            pay_type: Optional[pulumi.Input[int]] = None,
            period: Optional[pulumi.Input[int]] = None,
            prepaid_period: Optional[pulumi.Input[int]] = None,
            project_id: Optional[pulumi.Input[int]] = None,
            second_slave_zone: Optional[pulumi.Input[str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            slave_deploy_mode: Optional[pulumi.Input[int]] = None,
            slave_sync_mode: Optional[pulumi.Input[int]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            volume_size: Optional[pulumi.Input[int]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'DrInstance':
        """
        Get an existing DrInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_renew_flag: Auto renew flag. NOTES: Only supported prepaid instance.
        :param pulumi.Input[str] availability_zone: Indicates which availability zone will be used.
        :param pulumi.Input[str] charge_type: Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        :param pulumi.Input[int] cpu: CPU cores.
        :param pulumi.Input[str] device_type: Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        :param pulumi.Input[str] first_slave_zone: Zone information about first slave instance.
        :param pulumi.Input[bool] force_delete: Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance.
        :param pulumi.Input[str] instance_name: The name of a mysql instance.
        :param pulumi.Input[str] intranet_ip: instance intranet IP.
        :param pulumi.Input[int] intranet_port: Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        :param pulumi.Input[str] master_instance_id: Indicates the master instance ID of recovery instances.
        :param pulumi.Input[str] master_region: The zone information of the primary instance is required when you purchase a disaster recovery instance.
        :param pulumi.Input[int] mem_size: Memory size (in MB).
        :param pulumi.Input[int] pay_type: It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        :param pulumi.Input[int] period: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] prepaid_period: Period of instance. NOTES: Only supported prepaid instance.
        :param pulumi.Input[int] project_id: Project ID, default value is 0.
        :param pulumi.Input[str] second_slave_zone: Zone information about second slave instance.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: Security groups to use.
        :param pulumi.Input[int] slave_deploy_mode: Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        :param pulumi.Input[int] slave_sync_mode: Data replication mode. 0 - Async replication; 1 - Semisync replication; 2 - Strongsync replication.
        :param pulumi.Input[str] subnet_id: Private network ID. If `vpc_id` is set, this value is required.
        :param pulumi.Input[Mapping[str, Any]] tags: Instance tags.
        :param pulumi.Input[int] volume_size: Disk size (in GB).
        :param pulumi.Input[str] vpc_id: ID of VPC, which can be modified once every 24 hours and can't be removed.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DrInstanceState.__new__(_DrInstanceState)

        __props__.__dict__["auto_renew_flag"] = auto_renew_flag
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["cpu"] = cpu
        __props__.__dict__["device_type"] = device_type
        __props__.__dict__["first_slave_zone"] = first_slave_zone
        __props__.__dict__["force_delete"] = force_delete
        __props__.__dict__["instance_name"] = instance_name
        __props__.__dict__["intranet_ip"] = intranet_ip
        __props__.__dict__["intranet_port"] = intranet_port
        __props__.__dict__["master_instance_id"] = master_instance_id
        __props__.__dict__["master_region"] = master_region
        __props__.__dict__["mem_size"] = mem_size
        __props__.__dict__["pay_type"] = pay_type
        __props__.__dict__["period"] = period
        __props__.__dict__["prepaid_period"] = prepaid_period
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["second_slave_zone"] = second_slave_zone
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["slave_deploy_mode"] = slave_deploy_mode
        __props__.__dict__["slave_sync_mode"] = slave_sync_mode
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["volume_size"] = volume_size
        __props__.__dict__["vpc_id"] = vpc_id
        return DrInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> pulumi.Output[Optional[int]]:
        """
        Auto renew flag. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[str]:
        """
        Indicates which availability zone will be used.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[Optional[str]]:
        """
        Pay type of instance. Valid values:`PREPAID`, `POSTPAID`. Default is `POSTPAID`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[int]:
        """
        CPU cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> pulumi.Output[str]:
        """
        Specify device type, available values: `UNIVERSAL` (default), `EXCLUSIVE`, `BASIC`.
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="firstSlaveZone")
    def first_slave_zone(self) -> pulumi.Output[str]:
        """
        Zone information about first slave instance.
        """
        return pulumi.get(self, "first_slave_zone")

    @property
    @pulumi.getter(name="forceDelete")
    def force_delete(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicate whether to delete instance directly or not. Default is `false`. If set true, the instance will be deleted instead of staying recycle bin. Note: only works for `PREPAID` instance.
        """
        return pulumi.get(self, "force_delete")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> pulumi.Output[str]:
        """
        The name of a mysql instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="intranetIp")
    def intranet_ip(self) -> pulumi.Output[str]:
        """
        instance intranet IP.
        """
        return pulumi.get(self, "intranet_ip")

    @property
    @pulumi.getter(name="intranetPort")
    def intranet_port(self) -> pulumi.Output[Optional[int]]:
        """
        Public access port. Valid value ranges: [1024~65535]. The default value is `3306`.
        """
        return pulumi.get(self, "intranet_port")

    @property
    @pulumi.getter(name="masterInstanceId")
    def master_instance_id(self) -> pulumi.Output[str]:
        """
        Indicates the master instance ID of recovery instances.
        """
        return pulumi.get(self, "master_instance_id")

    @property
    @pulumi.getter(name="masterRegion")
    def master_region(self) -> pulumi.Output[str]:
        """
        The zone information of the primary instance is required when you purchase a disaster recovery instance.
        """
        return pulumi.get(self, "master_region")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> pulumi.Output[int]:
        """
        Memory size (in MB).
        """
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> pulumi.Output[Optional[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance. Valid values: `0`, `1`. `0`: prepaid, `1`: postpaid.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `charge_type` instead.""", DeprecationWarning)
        pulumi.log.warn("""pay_type is deprecated: It has been deprecated from version 1.36.0. Please use `charge_type` instead.""")

        return pulumi.get(self, "pay_type")

    @property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[int]]:
        """
        It has been deprecated from version 1.36.0. Please use `prepaid_period` instead. Period of instance. NOTES: Only supported prepaid instance.
        """
        warnings.warn("""It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""", DeprecationWarning)
        pulumi.log.warn("""period is deprecated: It has been deprecated from version 1.36.0. Please use `prepaid_period` instead.""")

        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="prepaidPeriod")
    def prepaid_period(self) -> pulumi.Output[Optional[int]]:
        """
        Period of instance. NOTES: Only supported prepaid instance.
        """
        return pulumi.get(self, "prepaid_period")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[Optional[int]]:
        """
        Project ID, default value is 0.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="secondSlaveZone")
    def second_slave_zone(self) -> pulumi.Output[Optional[str]]:
        """
        Zone information about second slave instance.
        """
        return pulumi.get(self, "second_slave_zone")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Security groups to use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="slaveDeployMode")
    def slave_deploy_mode(self) -> pulumi.Output[Optional[int]]:
        """
        Availability zone deployment method. Available values: 0 - Single availability zone; 1 - Multiple availability zones.
        """
        return pulumi.get(self, "slave_deploy_mode")

    @property
    @pulumi.getter(name="slaveSyncMode")
    def slave_sync_mode(self) -> pulumi.Output[Optional[int]]:
        """
        Data replication mode. 0 - Async replication; 1 - Semisync replication; 2 - Strongsync replication.
        """
        return pulumi.get(self, "slave_sync_mode")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        Private network ID. If `vpc_id` is set, this value is required.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Instance tags.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> pulumi.Output[int]:
        """
        Disk size (in GB).
        """
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        ID of VPC, which can be modified once every 24 hours and can't be removed.
        """
        return pulumi.get(self, "vpc_id")

