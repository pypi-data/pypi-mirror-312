# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RollbackArgs', 'Rollback']

@pulumi.input_type
class RollbackArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 rollback_time: pulumi.Input[str],
                 strategy: pulumi.Input[str],
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input['RollbackDatabaseArgs']]]] = None,
                 tables: Optional[pulumi.Input[Sequence[pulumi.Input['RollbackTableArgs']]]] = None):
        """
        The set of arguments for constructing a Rollback resource.
        :param pulumi.Input[str] instance_id: Cloud database instance ID.
        :param pulumi.Input[str] rollback_time: Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
        :param pulumi.Input[str] strategy: Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback mode, the backup and binlog of the entire instance will be imported, at a slower rate.
        :param pulumi.Input[Sequence[pulumi.Input['RollbackDatabaseArgs']]] databases: The database information to be archived, indicating that the entire database is archived.
        :param pulumi.Input[Sequence[pulumi.Input['RollbackTableArgs']]] tables: The database table information to be rolled back, indicating that the file is rolled back by table.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "rollback_time", rollback_time)
        pulumi.set(__self__, "strategy", strategy)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        Cloud database instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="rollbackTime")
    def rollback_time(self) -> pulumi.Input[str]:
        """
        Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
        """
        return pulumi.get(self, "rollback_time")

    @rollback_time.setter
    def rollback_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "rollback_time", value)

    @property
    @pulumi.getter
    def strategy(self) -> pulumi.Input[str]:
        """
        Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback mode, the backup and binlog of the entire instance will be imported, at a slower rate.
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: pulumi.Input[str]):
        pulumi.set(self, "strategy", value)

    @property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RollbackDatabaseArgs']]]]:
        """
        The database information to be archived, indicating that the entire database is archived.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RollbackDatabaseArgs']]]]):
        pulumi.set(self, "databases", value)

    @property
    @pulumi.getter
    def tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RollbackTableArgs']]]]:
        """
        The database table information to be rolled back, indicating that the file is rolled back by table.
        """
        return pulumi.get(self, "tables")

    @tables.setter
    def tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RollbackTableArgs']]]]):
        pulumi.set(self, "tables", value)


@pulumi.input_type
class _RollbackState:
    def __init__(__self__, *,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input['RollbackDatabaseArgs']]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 rollback_time: Optional[pulumi.Input[str]] = None,
                 strategy: Optional[pulumi.Input[str]] = None,
                 tables: Optional[pulumi.Input[Sequence[pulumi.Input['RollbackTableArgs']]]] = None):
        """
        Input properties used for looking up and filtering Rollback resources.
        :param pulumi.Input[Sequence[pulumi.Input['RollbackDatabaseArgs']]] databases: The database information to be archived, indicating that the entire database is archived.
        :param pulumi.Input[str] instance_id: Cloud database instance ID.
        :param pulumi.Input[str] rollback_time: Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
        :param pulumi.Input[str] strategy: Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback mode, the backup and binlog of the entire instance will be imported, at a slower rate.
        :param pulumi.Input[Sequence[pulumi.Input['RollbackTableArgs']]] tables: The database table information to be rolled back, indicating that the file is rolled back by table.
        """
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if rollback_time is not None:
            pulumi.set(__self__, "rollback_time", rollback_time)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RollbackDatabaseArgs']]]]:
        """
        The database information to be archived, indicating that the entire database is archived.
        """
        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RollbackDatabaseArgs']]]]):
        pulumi.set(self, "databases", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud database instance ID.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="rollbackTime")
    def rollback_time(self) -> Optional[pulumi.Input[str]]:
        """
        Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
        """
        return pulumi.get(self, "rollback_time")

    @rollback_time.setter
    def rollback_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rollback_time", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        """
        Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback mode, the backup and binlog of the entire instance will be imported, at a slower rate.
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)

    @property
    @pulumi.getter
    def tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RollbackTableArgs']]]]:
        """
        The database table information to be rolled back, indicating that the file is rolled back by table.
        """
        return pulumi.get(self, "tables")

    @tables.setter
    def tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RollbackTableArgs']]]]):
        pulumi.set(self, "tables", value)


class Rollback(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackDatabaseArgs']]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 rollback_time: Optional[pulumi.Input[str]] = None,
                 strategy: Optional[pulumi.Input[str]] = None,
                 tables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackTableArgs']]]]] = None,
                 __props__=None):
        """
        Provides a resource to create a mysql rollback

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackDatabaseArgs']]]] databases: The database information to be archived, indicating that the entire database is archived.
        :param pulumi.Input[str] instance_id: Cloud database instance ID.
        :param pulumi.Input[str] rollback_time: Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
        :param pulumi.Input[str] strategy: Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback mode, the backup and binlog of the entire instance will be imported, at a slower rate.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackTableArgs']]]] tables: The database table information to be rolled back, indicating that the file is rolled back by table.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RollbackArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mysql rollback

        :param str resource_name: The name of the resource.
        :param RollbackArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RollbackArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackDatabaseArgs']]]]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 rollback_time: Optional[pulumi.Input[str]] = None,
                 strategy: Optional[pulumi.Input[str]] = None,
                 tables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackTableArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RollbackArgs.__new__(RollbackArgs)

            __props__.__dict__["databases"] = databases
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if rollback_time is None and not opts.urn:
                raise TypeError("Missing required property 'rollback_time'")
            __props__.__dict__["rollback_time"] = rollback_time
            if strategy is None and not opts.urn:
                raise TypeError("Missing required property 'strategy'")
            __props__.__dict__["strategy"] = strategy
            __props__.__dict__["tables"] = tables
        super(Rollback, __self__).__init__(
            'tencentcloud:Mysql/rollback:Rollback',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackDatabaseArgs']]]]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            rollback_time: Optional[pulumi.Input[str]] = None,
            strategy: Optional[pulumi.Input[str]] = None,
            tables: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackTableArgs']]]]] = None) -> 'Rollback':
        """
        Get an existing Rollback resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackDatabaseArgs']]]] databases: The database information to be archived, indicating that the entire database is archived.
        :param pulumi.Input[str] instance_id: Cloud database instance ID.
        :param pulumi.Input[str] rollback_time: Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
        :param pulumi.Input[str] strategy: Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback mode, the backup and binlog of the entire instance will be imported, at a slower rate.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RollbackTableArgs']]]] tables: The database table information to be rolled back, indicating that the file is rolled back by table.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RollbackState.__new__(_RollbackState)

        __props__.__dict__["databases"] = databases
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["rollback_time"] = rollback_time
        __props__.__dict__["strategy"] = strategy
        __props__.__dict__["tables"] = tables
        return Rollback(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def databases(self) -> pulumi.Output[Optional[Sequence['outputs.RollbackDatabase']]]:
        """
        The database information to be archived, indicating that the entire database is archived.
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        Cloud database instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="rollbackTime")
    def rollback_time(self) -> pulumi.Output[str]:
        """
        Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
        """
        return pulumi.get(self, "rollback_time")

    @property
    @pulumi.getter
    def strategy(self) -> pulumi.Output[str]:
        """
        Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback mode, the backup and binlog of the entire instance will be imported, at a slower rate.
        """
        return pulumi.get(self, "strategy")

    @property
    @pulumi.getter
    def tables(self) -> pulumi.Output[Optional[Sequence['outputs.RollbackTable']]]:
        """
        The database table information to be rolled back, indicating that the file is rolled back by table.
        """
        return pulumi.get(self, "tables")

