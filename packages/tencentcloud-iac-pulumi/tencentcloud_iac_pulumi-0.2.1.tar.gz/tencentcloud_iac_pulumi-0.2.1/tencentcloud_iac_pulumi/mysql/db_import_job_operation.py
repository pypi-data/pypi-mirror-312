# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['DbImportJobOperationArgs', 'DbImportJobOperation']

@pulumi.input_type
class DbImportJobOperationArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 user: pulumi.Input[str],
                 cos_url: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DbImportJobOperation resource.
        :param pulumi.Input[str] instance_id: The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console
               page.
        :param pulumi.Input[str] user: The username of the cloud database.
        :param pulumi.Input[str] cos_url: The name of the imported target database, if it is not passed, it means that no database is specified.
        :param pulumi.Input[str] db_name: The name of the imported target database, if it is not passed, it means that no database is specified.
        :param pulumi.Input[str] file_name: file name. This file refers to the file that the user has uploaded to Tencent Cloud, and only .sql files are supported.
        :param pulumi.Input[str] password: The password of the user account of the cloud database instance.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "user", user)
        if cos_url is not None:
            pulumi.set(__self__, "cos_url", cos_url)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console
        page.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        """
        The username of the cloud database.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter(name="cosUrl")
    def cos_url(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the imported target database, if it is not passed, it means that no database is specified.
        """
        return pulumi.get(self, "cos_url")

    @cos_url.setter
    def cos_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_url", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the imported target database, if it is not passed, it means that no database is specified.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        """
        file name. This file refers to the file that the user has uploaded to Tencent Cloud, and only .sql files are supported.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of the user account of the cloud database instance.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


@pulumi.input_type
class _DbImportJobOperationState:
    def __init__(__self__, *,
                 async_request_id: Optional[pulumi.Input[str]] = None,
                 cos_url: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DbImportJobOperation resources.
        :param pulumi.Input[str] async_request_id: The request ID of the asynchronous task.
        :param pulumi.Input[str] cos_url: The name of the imported target database, if it is not passed, it means that no database is specified.
        :param pulumi.Input[str] db_name: The name of the imported target database, if it is not passed, it means that no database is specified.
        :param pulumi.Input[str] file_name: file name. This file refers to the file that the user has uploaded to Tencent Cloud, and only .sql files are supported.
        :param pulumi.Input[str] instance_id: The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console
               page.
        :param pulumi.Input[str] password: The password of the user account of the cloud database instance.
        :param pulumi.Input[str] user: The username of the cloud database.
        """
        if async_request_id is not None:
            pulumi.set(__self__, "async_request_id", async_request_id)
        if cos_url is not None:
            pulumi.set(__self__, "cos_url", cos_url)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="asyncRequestId")
    def async_request_id(self) -> Optional[pulumi.Input[str]]:
        """
        The request ID of the asynchronous task.
        """
        return pulumi.get(self, "async_request_id")

    @async_request_id.setter
    def async_request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "async_request_id", value)

    @property
    @pulumi.getter(name="cosUrl")
    def cos_url(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the imported target database, if it is not passed, it means that no database is specified.
        """
        return pulumi.get(self, "cos_url")

    @cos_url.setter
    def cos_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cos_url", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the imported target database, if it is not passed, it means that no database is specified.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        """
        file name. This file refers to the file that the user has uploaded to Tencent Cloud, and only .sql files are supported.
        """
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console
        page.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of the user account of the cloud database instance.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        The username of the cloud database.
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


class DbImportJobOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cos_url: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DbImportJobOperation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cos_url: The name of the imported target database, if it is not passed, it means that no database is specified.
        :param pulumi.Input[str] db_name: The name of the imported target database, if it is not passed, it means that no database is specified.
        :param pulumi.Input[str] file_name: file name. This file refers to the file that the user has uploaded to Tencent Cloud, and only .sql files are supported.
        :param pulumi.Input[str] instance_id: The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console
               page.
        :param pulumi.Input[str] password: The password of the user account of the cloud database instance.
        :param pulumi.Input[str] user: The username of the cloud database.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DbImportJobOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DbImportJobOperation resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DbImportJobOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DbImportJobOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cos_url: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DbImportJobOperationArgs.__new__(DbImportJobOperationArgs)

            __props__.__dict__["cos_url"] = cos_url
            __props__.__dict__["db_name"] = db_name
            __props__.__dict__["file_name"] = file_name
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["password"] = password
            if user is None and not opts.urn:
                raise TypeError("Missing required property 'user'")
            __props__.__dict__["user"] = user
            __props__.__dict__["async_request_id"] = None
        super(DbImportJobOperation, __self__).__init__(
            'tencentcloud:Mysql/dbImportJobOperation:DbImportJobOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            async_request_id: Optional[pulumi.Input[str]] = None,
            cos_url: Optional[pulumi.Input[str]] = None,
            db_name: Optional[pulumi.Input[str]] = None,
            file_name: Optional[pulumi.Input[str]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            user: Optional[pulumi.Input[str]] = None) -> 'DbImportJobOperation':
        """
        Get an existing DbImportJobOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] async_request_id: The request ID of the asynchronous task.
        :param pulumi.Input[str] cos_url: The name of the imported target database, if it is not passed, it means that no database is specified.
        :param pulumi.Input[str] db_name: The name of the imported target database, if it is not passed, it means that no database is specified.
        :param pulumi.Input[str] file_name: file name. This file refers to the file that the user has uploaded to Tencent Cloud, and only .sql files are supported.
        :param pulumi.Input[str] instance_id: The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console
               page.
        :param pulumi.Input[str] password: The password of the user account of the cloud database instance.
        :param pulumi.Input[str] user: The username of the cloud database.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DbImportJobOperationState.__new__(_DbImportJobOperationState)

        __props__.__dict__["async_request_id"] = async_request_id
        __props__.__dict__["cos_url"] = cos_url
        __props__.__dict__["db_name"] = db_name
        __props__.__dict__["file_name"] = file_name
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["password"] = password
        __props__.__dict__["user"] = user
        return DbImportJobOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="asyncRequestId")
    def async_request_id(self) -> pulumi.Output[str]:
        """
        The request ID of the asynchronous task.
        """
        return pulumi.get(self, "async_request_id")

    @property
    @pulumi.getter(name="cosUrl")
    def cos_url(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the imported target database, if it is not passed, it means that no database is specified.
        """
        return pulumi.get(self, "cos_url")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the imported target database, if it is not passed, it means that no database is specified.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Output[Optional[str]]:
        """
        file name. This file refers to the file that the user has uploaded to Tencent Cloud, and only .sql files are supported.
        """
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console
        page.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        The password of the user account of the cloud database instance.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[str]:
        """
        The username of the cloud database.
        """
        return pulumi.get(self, "user")

