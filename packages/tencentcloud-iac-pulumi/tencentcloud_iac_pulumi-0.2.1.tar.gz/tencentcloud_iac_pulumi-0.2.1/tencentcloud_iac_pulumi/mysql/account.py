# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AccountArgs', 'Account']

@pulumi.input_type
class AccountArgs:
    def __init__(__self__, *,
                 mysql_id: pulumi.Input[str],
                 password: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 max_user_connections: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Account resource.
        :param pulumi.Input[str] mysql_id: Instance ID to which the account belongs.
        :param pulumi.Input[str] password: Operation password.
        :param pulumi.Input[str] description: Database description.
        :param pulumi.Input[str] host: Account host, default is `%`.
        :param pulumi.Input[int] max_user_connections: The maximum number of available connections for a new account, the default value is 10240, and the maximum value that can be set is 10240.
        :param pulumi.Input[str] name: Account name.
        """
        pulumi.set(__self__, "mysql_id", mysql_id)
        pulumi.set(__self__, "password", password)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if max_user_connections is not None:
            pulumi.set(__self__, "max_user_connections", max_user_connections)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="mysqlId")
    def mysql_id(self) -> pulumi.Input[str]:
        """
        Instance ID to which the account belongs.
        """
        return pulumi.get(self, "mysql_id")

    @mysql_id.setter
    def mysql_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "mysql_id", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        Operation password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Database description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Account host, default is `%`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="maxUserConnections")
    def max_user_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of available connections for a new account, the default value is 10240, and the maximum value that can be set is 10240.
        """
        return pulumi.get(self, "max_user_connections")

    @max_user_connections.setter
    def max_user_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_user_connections", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Account name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AccountState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 max_user_connections: Optional[pulumi.Input[int]] = None,
                 mysql_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Account resources.
        :param pulumi.Input[str] description: Database description.
        :param pulumi.Input[str] host: Account host, default is `%`.
        :param pulumi.Input[int] max_user_connections: The maximum number of available connections for a new account, the default value is 10240, and the maximum value that can be set is 10240.
        :param pulumi.Input[str] mysql_id: Instance ID to which the account belongs.
        :param pulumi.Input[str] name: Account name.
        :param pulumi.Input[str] password: Operation password.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if max_user_connections is not None:
            pulumi.set(__self__, "max_user_connections", max_user_connections)
        if mysql_id is not None:
            pulumi.set(__self__, "mysql_id", mysql_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Database description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Account host, default is `%`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="maxUserConnections")
    def max_user_connections(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of available connections for a new account, the default value is 10240, and the maximum value that can be set is 10240.
        """
        return pulumi.get(self, "max_user_connections")

    @max_user_connections.setter
    def max_user_connections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_user_connections", value)

    @property
    @pulumi.getter(name="mysqlId")
    def mysql_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance ID to which the account belongs.
        """
        return pulumi.get(self, "mysql_id")

    @mysql_id.setter
    def mysql_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mysql_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Account name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Operation password.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)


class Account(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 max_user_connections: Optional[pulumi.Input[int]] = None,
                 mysql_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a MySQL account resource for database management. A MySQL instance supports multiple database account.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cdb")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="mysql test")
        example_instance = tencentcloud.mysql.Instance("exampleInstance",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=0,
            availability_zone=zones.zones[0].name,
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        example_account = tencentcloud.mysql.Account("exampleAccount",
            mysql_id=example_instance.id,
            password="Qwer@234",
            description="desc.",
            max_user_connections=10)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mysql account can be imported using the mysqlId#accountName, e.g.

        ```sh
        $ pulumi import tencentcloud:Mysql/account:Account default cdb-gqg6j82x#tf_account
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Database description.
        :param pulumi.Input[str] host: Account host, default is `%`.
        :param pulumi.Input[int] max_user_connections: The maximum number of available connections for a new account, the default value is 10240, and the maximum value that can be set is 10240.
        :param pulumi.Input[str] mysql_id: Instance ID to which the account belongs.
        :param pulumi.Input[str] name: Account name.
        :param pulumi.Input[str] password: Operation password.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a MySQL account resource for database management. A MySQL instance supports multiple database account.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cdb")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="mysql test")
        example_instance = tencentcloud.mysql.Instance("exampleInstance",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=0,
            availability_zone=zones.zones[0].name,
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        example_account = tencentcloud.mysql.Account("exampleAccount",
            mysql_id=example_instance.id,
            password="Qwer@234",
            description="desc.",
            max_user_connections=10)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        mysql account can be imported using the mysqlId#accountName, e.g.

        ```sh
        $ pulumi import tencentcloud:Mysql/account:Account default cdb-gqg6j82x#tf_account
        ```

        :param str resource_name: The name of the resource.
        :param AccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 max_user_connections: Optional[pulumi.Input[int]] = None,
                 mysql_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AccountArgs.__new__(AccountArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["host"] = host
            __props__.__dict__["max_user_connections"] = max_user_connections
            if mysql_id is None and not opts.urn:
                raise TypeError("Missing required property 'mysql_id'")
            __props__.__dict__["mysql_id"] = mysql_id
            __props__.__dict__["name"] = name
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Account, __self__).__init__(
            'tencentcloud:Mysql/account:Account',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[str]] = None,
            max_user_connections: Optional[pulumi.Input[int]] = None,
            mysql_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None) -> 'Account':
        """
        Get an existing Account resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Database description.
        :param pulumi.Input[str] host: Account host, default is `%`.
        :param pulumi.Input[int] max_user_connections: The maximum number of available connections for a new account, the default value is 10240, and the maximum value that can be set is 10240.
        :param pulumi.Input[str] mysql_id: Instance ID to which the account belongs.
        :param pulumi.Input[str] name: Account name.
        :param pulumi.Input[str] password: Operation password.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AccountState.__new__(_AccountState)

        __props__.__dict__["description"] = description
        __props__.__dict__["host"] = host
        __props__.__dict__["max_user_connections"] = max_user_connections
        __props__.__dict__["mysql_id"] = mysql_id
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        return Account(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Database description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[Optional[str]]:
        """
        Account host, default is `%`.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="maxUserConnections")
    def max_user_connections(self) -> pulumi.Output[int]:
        """
        The maximum number of available connections for a new account, the default value is 10240, and the maximum value that can be set is 10240.
        """
        return pulumi.get(self, "max_user_connections")

    @property
    @pulumi.getter(name="mysqlId")
    def mysql_id(self) -> pulumi.Output[str]:
        """
        Instance ID to which the account belongs.
        """
        return pulumi.get(self, "mysql_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Account name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        Operation password.
        """
        return pulumi.get(self, "password")

