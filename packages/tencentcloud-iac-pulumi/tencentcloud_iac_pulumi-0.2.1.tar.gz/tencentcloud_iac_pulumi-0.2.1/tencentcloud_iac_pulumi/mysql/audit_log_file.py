# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AuditLogFileArgs', 'AuditLogFile']

@pulumi.input_type
class AuditLogFileArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 instance_id: pulumi.Input[str],
                 start_time: pulumi.Input[str],
                 filter: Optional[pulumi.Input['AuditLogFileFilterArgs']] = None,
                 order: Optional[pulumi.Input[str]] = None,
                 order_by: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AuditLogFile resource.
        :param pulumi.Input[str] end_time: end time.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[str] start_time: start time.
        :param pulumi.Input['AuditLogFileFilterArgs'] filter: Filter condition. Logs can be filtered according to the filter conditions set.
        :param pulumi.Input[str] order: Sort by. supported values are: `ASC`- ascending order, `DESC`- descending order.
        :param pulumi.Input[str] order_by: Sort field. supported values include:`timestamp` - timestamp; `affectRows` - affected rows; `execTime` - execution time.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "start_time", start_time)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if order_by is not None:
            pulumi.set(__self__, "order_by", order_by)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        """
        end time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        """
        start time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['AuditLogFileFilterArgs']]:
        """
        Filter condition. Logs can be filtered according to the filter conditions set.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['AuditLogFileFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Sort by. supported values are: `ASC`- ascending order, `DESC`- descending order.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[pulumi.Input[str]]:
        """
        Sort field. supported values include:`timestamp` - timestamp; `affectRows` - affected rows; `execTime` - execution time.
        """
        return pulumi.get(self, "order_by")

    @order_by.setter
    def order_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_by", value)


@pulumi.input_type
class _AuditLogFileState:
    def __init__(__self__, *,
                 download_url: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 file_size: Optional[pulumi.Input[int]] = None,
                 filter: Optional[pulumi.Input['AuditLogFileFilterArgs']] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None,
                 order_by: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AuditLogFile resources.
        :param pulumi.Input[str] download_url: download url.
        :param pulumi.Input[str] end_time: end time.
        :param pulumi.Input[int] file_size: size of file(KB).
        :param pulumi.Input['AuditLogFileFilterArgs'] filter: Filter condition. Logs can be filtered according to the filter conditions set.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[str] order: Sort by. supported values are: `ASC`- ascending order, `DESC`- descending order.
        :param pulumi.Input[str] order_by: Sort field. supported values include:`timestamp` - timestamp; `affectRows` - affected rows; `execTime` - execution time.
        :param pulumi.Input[str] start_time: start time.
        """
        if download_url is not None:
            pulumi.set(__self__, "download_url", download_url)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if file_size is not None:
            pulumi.set(__self__, "file_size", file_size)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if order_by is not None:
            pulumi.set(__self__, "order_by", order_by)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="downloadUrl")
    def download_url(self) -> Optional[pulumi.Input[str]]:
        """
        download url.
        """
        return pulumi.get(self, "download_url")

    @download_url.setter
    def download_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "download_url", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        """
        end time.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> Optional[pulumi.Input[int]]:
        """
        size of file(KB).
        """
        return pulumi.get(self, "file_size")

    @file_size.setter
    def file_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_size", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['AuditLogFileFilterArgs']]:
        """
        Filter condition. Logs can be filtered according to the filter conditions set.
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['AuditLogFileFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Sort by. supported values are: `ASC`- ascending order, `DESC`- descending order.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[pulumi.Input[str]]:
        """
        Sort field. supported values include:`timestamp` - timestamp; `affectRows` - affected rows; `execTime` - execution time.
        """
        return pulumi.get(self, "order_by")

    @order_by.setter
    def order_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_by", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        start time.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


class AuditLogFile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['AuditLogFileFilterArgs']]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None,
                 order_by: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a resource to create a mysql audit_log_file

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cdb")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="mysql test")
        example_instance = tencentcloud.mysql.Instance("exampleInstance",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=0,
            availability_zone=zones.zones[0].name,
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        example_audit_log_file = tencentcloud.mysql.AuditLogFile("exampleAuditLogFile",
            instance_id=example_instance.id,
            start_time="2023-07-01 00:00:00",
            end_time="2023-10-01 00:00:00",
            order="ASC",
            order_by="timestamp")
        ```
        <!--End PulumiCodeChooser -->

        ### Add filter

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.mysql.AuditLogFile("example",
            instance_id=tencentcloud_mysql_instance["example"]["id"],
            start_time="2023-07-01 00:00:00",
            end_time="2023-10-01 00:00:00",
            order="ASC",
            order_by="timestamp",
            filter=tencentcloud.mysql.AuditLogFileFilterArgs(
                hosts=["30.50.207.46"],
                users=["keep_dbbrain"],
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] end_time: end time.
        :param pulumi.Input[pulumi.InputType['AuditLogFileFilterArgs']] filter: Filter condition. Logs can be filtered according to the filter conditions set.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[str] order: Sort by. supported values are: `ASC`- ascending order, `DESC`- descending order.
        :param pulumi.Input[str] order_by: Sort field. supported values include:`timestamp` - timestamp; `affectRows` - affected rows; `execTime` - execution time.
        :param pulumi.Input[str] start_time: start time.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuditLogFileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mysql audit_log_file

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cdb")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="mysql test")
        example_instance = tencentcloud.mysql.Instance("exampleInstance",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=0,
            availability_zone=zones.zones[0].name,
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        example_audit_log_file = tencentcloud.mysql.AuditLogFile("exampleAuditLogFile",
            instance_id=example_instance.id,
            start_time="2023-07-01 00:00:00",
            end_time="2023-10-01 00:00:00",
            order="ASC",
            order_by="timestamp")
        ```
        <!--End PulumiCodeChooser -->

        ### Add filter

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        example = tencentcloud.mysql.AuditLogFile("example",
            instance_id=tencentcloud_mysql_instance["example"]["id"],
            start_time="2023-07-01 00:00:00",
            end_time="2023-10-01 00:00:00",
            order="ASC",
            order_by="timestamp",
            filter=tencentcloud.mysql.AuditLogFileFilterArgs(
                hosts=["30.50.207.46"],
                users=["keep_dbbrain"],
            ))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param AuditLogFileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuditLogFileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 end_time: Optional[pulumi.Input[str]] = None,
                 filter: Optional[pulumi.Input[pulumi.InputType['AuditLogFileFilterArgs']]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None,
                 order_by: Optional[pulumi.Input[str]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuditLogFileArgs.__new__(AuditLogFileArgs)

            if end_time is None and not opts.urn:
                raise TypeError("Missing required property 'end_time'")
            __props__.__dict__["end_time"] = end_time
            __props__.__dict__["filter"] = filter
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["order"] = order
            __props__.__dict__["order_by"] = order_by
            if start_time is None and not opts.urn:
                raise TypeError("Missing required property 'start_time'")
            __props__.__dict__["start_time"] = start_time
            __props__.__dict__["download_url"] = None
            __props__.__dict__["file_size"] = None
        super(AuditLogFile, __self__).__init__(
            'tencentcloud:Mysql/auditLogFile:AuditLogFile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            download_url: Optional[pulumi.Input[str]] = None,
            end_time: Optional[pulumi.Input[str]] = None,
            file_size: Optional[pulumi.Input[int]] = None,
            filter: Optional[pulumi.Input[pulumi.InputType['AuditLogFileFilterArgs']]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            order: Optional[pulumi.Input[str]] = None,
            order_by: Optional[pulumi.Input[str]] = None,
            start_time: Optional[pulumi.Input[str]] = None) -> 'AuditLogFile':
        """
        Get an existing AuditLogFile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] download_url: download url.
        :param pulumi.Input[str] end_time: end time.
        :param pulumi.Input[int] file_size: size of file(KB).
        :param pulumi.Input[pulumi.InputType['AuditLogFileFilterArgs']] filter: Filter condition. Logs can be filtered according to the filter conditions set.
        :param pulumi.Input[str] instance_id: The ID of instance.
        :param pulumi.Input[str] order: Sort by. supported values are: `ASC`- ascending order, `DESC`- descending order.
        :param pulumi.Input[str] order_by: Sort field. supported values include:`timestamp` - timestamp; `affectRows` - affected rows; `execTime` - execution time.
        :param pulumi.Input[str] start_time: start time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuditLogFileState.__new__(_AuditLogFileState)

        __props__.__dict__["download_url"] = download_url
        __props__.__dict__["end_time"] = end_time
        __props__.__dict__["file_size"] = file_size
        __props__.__dict__["filter"] = filter
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["order"] = order
        __props__.__dict__["order_by"] = order_by
        __props__.__dict__["start_time"] = start_time
        return AuditLogFile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="downloadUrl")
    def download_url(self) -> pulumi.Output[str]:
        """
        download url.
        """
        return pulumi.get(self, "download_url")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Output[str]:
        """
        end time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> pulumi.Output[int]:
        """
        size of file(KB).
        """
        return pulumi.get(self, "file_size")

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Output[Optional['outputs.AuditLogFileFilter']]:
        """
        Filter condition. Logs can be filtered according to the filter conditions set.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        The ID of instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[Optional[str]]:
        """
        Sort by. supported values are: `ASC`- ascending order, `DESC`- descending order.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> pulumi.Output[Optional[str]]:
        """
        Sort field. supported values include:`timestamp` - timestamp; `affectRows` - affected rows; `execTime` - execution time.
        """
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[str]:
        """
        start time.
        """
        return pulumi.get(self, "start_time")

