# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetProxyCustomResult',
    'AwaitableGetProxyCustomResult',
    'get_proxy_custom',
    'get_proxy_custom_output',
]

@pulumi.output_type
class GetProxyCustomResult:
    """
    A collection of values returned by getProxyCustom.
    """
    def __init__(__self__, custom_confs=None, id=None, instance_id=None, result_output_file=None, weight_rules=None):
        if custom_confs and not isinstance(custom_confs, list):
            raise TypeError("Expected argument 'custom_confs' to be a list")
        pulumi.set(__self__, "custom_confs", custom_confs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if weight_rules and not isinstance(weight_rules, list):
            raise TypeError("Expected argument 'weight_rules' to be a list")
        pulumi.set(__self__, "weight_rules", weight_rules)

    @property
    @pulumi.getter(name="customConfs")
    def custom_confs(self) -> Sequence['outputs.GetProxyCustomCustomConfResult']:
        return pulumi.get(self, "custom_confs")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="weightRules")
    def weight_rules(self) -> Sequence['outputs.GetProxyCustomWeightRuleResult']:
        return pulumi.get(self, "weight_rules")


class AwaitableGetProxyCustomResult(GetProxyCustomResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProxyCustomResult(
            custom_confs=self.custom_confs,
            id=self.id,
            instance_id=self.instance_id,
            result_output_file=self.result_output_file,
            weight_rules=self.weight_rules)


def get_proxy_custom(instance_id: Optional[str] = None,
                     result_output_file: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProxyCustomResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mysql/getProxyCustom:getProxyCustom', __args__, opts=opts, typ=GetProxyCustomResult).value

    return AwaitableGetProxyCustomResult(
        custom_confs=pulumi.get(__ret__, 'custom_confs'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        weight_rules=pulumi.get(__ret__, 'weight_rules'))


@_utilities.lift_output_func(get_proxy_custom)
def get_proxy_custom_output(instance_id: Optional[pulumi.Input[str]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProxyCustomResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
