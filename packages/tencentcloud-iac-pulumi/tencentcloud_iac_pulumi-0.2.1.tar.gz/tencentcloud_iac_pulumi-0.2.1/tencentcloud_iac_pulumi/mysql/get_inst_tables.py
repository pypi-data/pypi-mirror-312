# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetInstTablesResult',
    'AwaitableGetInstTablesResult',
    'get_inst_tables',
    'get_inst_tables_output',
]

@pulumi.output_type
class GetInstTablesResult:
    """
    A collection of values returned by getInstTables.
    """
    def __init__(__self__, database=None, id=None, instance_id=None, items=None, result_output_file=None, table_regexp=None):
        if database and not isinstance(database, str):
            raise TypeError("Expected argument 'database' to be a str")
        pulumi.set(__self__, "database", database)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if table_regexp and not isinstance(table_regexp, str):
            raise TypeError("Expected argument 'table_regexp' to be a str")
        pulumi.set(__self__, "table_regexp", table_regexp)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def items(self) -> Sequence[str]:
        """
        The returned database table information.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="tableRegexp")
    def table_regexp(self) -> Optional[str]:
        return pulumi.get(self, "table_regexp")


class AwaitableGetInstTablesResult(GetInstTablesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstTablesResult(
            database=self.database,
            id=self.id,
            instance_id=self.instance_id,
            items=self.items,
            result_output_file=self.result_output_file,
            table_regexp=self.table_regexp)


def get_inst_tables(database: Optional[str] = None,
                    instance_id: Optional[str] = None,
                    result_output_file: Optional[str] = None,
                    table_regexp: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstTablesResult:
    """
    Use this data source to query detailed information of mysql inst_tables

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    inst_tables = tencentcloud.Mysql.get_inst_tables(database="tf_ci_test",
        instance_id="cdb-fitq5t9h")
    ```
    <!--End PulumiCodeChooser -->


    :param str database: The name of the database.
    :param str instance_id: The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console page.
    :param str result_output_file: Used to save results.
    :param str table_regexp: Match the regular expression of the database table name, the rules are the same as MySQL official website.
    """
    __args__ = dict()
    __args__['database'] = database
    __args__['instanceId'] = instance_id
    __args__['resultOutputFile'] = result_output_file
    __args__['tableRegexp'] = table_regexp
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mysql/getInstTables:getInstTables', __args__, opts=opts, typ=GetInstTablesResult).value

    return AwaitableGetInstTablesResult(
        database=pulumi.get(__ret__, 'database'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        items=pulumi.get(__ret__, 'items'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        table_regexp=pulumi.get(__ret__, 'table_regexp'))


@_utilities.lift_output_func(get_inst_tables)
def get_inst_tables_output(database: Optional[pulumi.Input[str]] = None,
                           instance_id: Optional[pulumi.Input[str]] = None,
                           result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           table_regexp: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstTablesResult]:
    """
    Use this data source to query detailed information of mysql inst_tables

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    inst_tables = tencentcloud.Mysql.get_inst_tables(database="tf_ci_test",
        instance_id="cdb-fitq5t9h")
    ```
    <!--End PulumiCodeChooser -->


    :param str database: The name of the database.
    :param str instance_id: The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console page.
    :param str result_output_file: Used to save results.
    :param str table_regexp: Match the regular expression of the database table name, the rules are the same as MySQL official website.
    """
    ...
