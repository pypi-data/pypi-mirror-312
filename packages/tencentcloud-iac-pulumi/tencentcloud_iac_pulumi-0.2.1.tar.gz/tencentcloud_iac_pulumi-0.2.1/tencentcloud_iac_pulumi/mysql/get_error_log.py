# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetErrorLogResult',
    'AwaitableGetErrorLogResult',
    'get_error_log',
    'get_error_log_output',
]

@pulumi.output_type
class GetErrorLogResult:
    """
    A collection of values returned by getErrorLog.
    """
    def __init__(__self__, end_time=None, id=None, inst_type=None, instance_id=None, items=None, key_words=None, result_output_file=None, start_time=None):
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inst_type and not isinstance(inst_type, str):
            raise TypeError("Expected argument 'inst_type' to be a str")
        pulumi.set(__self__, "inst_type", inst_type)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if key_words and not isinstance(key_words, list):
            raise TypeError("Expected argument 'key_words' to be a list")
        pulumi.set(__self__, "key_words", key_words)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instType")
    def inst_type(self) -> Optional[str]:
        return pulumi.get(self, "inst_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetErrorLogItemResult']:
        """
        The records returned.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="keyWords")
    def key_words(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "key_words")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")


class AwaitableGetErrorLogResult(GetErrorLogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetErrorLogResult(
            end_time=self.end_time,
            id=self.id,
            inst_type=self.inst_type,
            instance_id=self.instance_id,
            items=self.items,
            key_words=self.key_words,
            result_output_file=self.result_output_file,
            start_time=self.start_time)


def get_error_log(end_time: Optional[int] = None,
                  inst_type: Optional[str] = None,
                  instance_id: Optional[str] = None,
                  key_words: Optional[Sequence[str]] = None,
                  result_output_file: Optional[str] = None,
                  start_time: Optional[int] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetErrorLogResult:
    """
    Use this data source to query detailed information of mysql error_log

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    error_log = tencentcloud.Mysql.get_error_log(end_time=1686043908,
        inst_type="slave",
        instance_id="cdb-fitq5t9h",
        key_words=["Shutting"],
        start_time=1683538307)
    ```
    <!--End PulumiCodeChooser -->


    :param int end_time: End timestamp. For example 1585142640.
    :param str inst_type: Only valid when the instance is the master instance or disaster recovery instance, the optional value: slave, which means to pull the log of the slave machine.
    :param str instance_id: instance id.
    :param Sequence[str] key_words: A list of keywords to match, up to 15 keywords are supported.
    :param str result_output_file: Used to save results.
    :param int start_time: Start timestamp. For example 1585142640.
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['instType'] = inst_type
    __args__['instanceId'] = instance_id
    __args__['keyWords'] = key_words
    __args__['resultOutputFile'] = result_output_file
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mysql/getErrorLog:getErrorLog', __args__, opts=opts, typ=GetErrorLogResult).value

    return AwaitableGetErrorLogResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        inst_type=pulumi.get(__ret__, 'inst_type'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        items=pulumi.get(__ret__, 'items'),
        key_words=pulumi.get(__ret__, 'key_words'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        start_time=pulumi.get(__ret__, 'start_time'))


@_utilities.lift_output_func(get_error_log)
def get_error_log_output(end_time: Optional[pulumi.Input[int]] = None,
                         inst_type: Optional[pulumi.Input[Optional[str]]] = None,
                         instance_id: Optional[pulumi.Input[str]] = None,
                         key_words: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                         result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                         start_time: Optional[pulumi.Input[int]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetErrorLogResult]:
    """
    Use this data source to query detailed information of mysql error_log

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    error_log = tencentcloud.Mysql.get_error_log(end_time=1686043908,
        inst_type="slave",
        instance_id="cdb-fitq5t9h",
        key_words=["Shutting"],
        start_time=1683538307)
    ```
    <!--End PulumiCodeChooser -->


    :param int end_time: End timestamp. For example 1585142640.
    :param str inst_type: Only valid when the instance is the master instance or disaster recovery instance, the optional value: slave, which means to pull the log of the slave machine.
    :param str instance_id: instance id.
    :param Sequence[str] key_words: A list of keywords to match, up to 15 keywords are supported.
    :param str result_output_file: Used to save results.
    :param int start_time: Start timestamp. For example 1585142640.
    """
    ...
