# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SwitchMasterSlaveOperationArgs', 'SwitchMasterSlaveOperation']

@pulumi.input_type
class SwitchMasterSlaveOperationArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[str],
                 dst_slave: Optional[pulumi.Input[str]] = None,
                 force_switch: Optional[pulumi.Input[bool]] = None,
                 wait_switch: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a SwitchMasterSlaveOperation resource.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[str] dst_slave: target instance. Possible values: `first` - first standby; `second` - second standby. The default value is `first`, and only multi-AZ instances support setting it to `second`.
        :param pulumi.Input[bool] force_switch: Whether to force switch. Default is False. Note that if you set the mandatory switch to True, there is a risk of data loss on the instance, so use it with caution.
        :param pulumi.Input[bool] wait_switch: Whether to switch within the time window. The default is False, i.e. do not switch within the time window. Note that if the ForceSwitch parameter is set to True, this parameter will not take effect.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if dst_slave is not None:
            pulumi.set(__self__, "dst_slave", dst_slave)
        if force_switch is not None:
            pulumi.set(__self__, "force_switch", force_switch)
        if wait_switch is not None:
            pulumi.set(__self__, "wait_switch", wait_switch)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="dstSlave")
    def dst_slave(self) -> Optional[pulumi.Input[str]]:
        """
        target instance. Possible values: `first` - first standby; `second` - second standby. The default value is `first`, and only multi-AZ instances support setting it to `second`.
        """
        return pulumi.get(self, "dst_slave")

    @dst_slave.setter
    def dst_slave(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_slave", value)

    @property
    @pulumi.getter(name="forceSwitch")
    def force_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force switch. Default is False. Note that if you set the mandatory switch to True, there is a risk of data loss on the instance, so use it with caution.
        """
        return pulumi.get(self, "force_switch")

    @force_switch.setter
    def force_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_switch", value)

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to switch within the time window. The default is False, i.e. do not switch within the time window. Note that if the ForceSwitch parameter is set to True, this parameter will not take effect.
        """
        return pulumi.get(self, "wait_switch")

    @wait_switch.setter
    def wait_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait_switch", value)


@pulumi.input_type
class _SwitchMasterSlaveOperationState:
    def __init__(__self__, *,
                 dst_slave: Optional[pulumi.Input[str]] = None,
                 force_switch: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering SwitchMasterSlaveOperation resources.
        :param pulumi.Input[str] dst_slave: target instance. Possible values: `first` - first standby; `second` - second standby. The default value is `first`, and only multi-AZ instances support setting it to `second`.
        :param pulumi.Input[bool] force_switch: Whether to force switch. Default is False. Note that if you set the mandatory switch to True, there is a risk of data loss on the instance, so use it with caution.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[bool] wait_switch: Whether to switch within the time window. The default is False, i.e. do not switch within the time window. Note that if the ForceSwitch parameter is set to True, this parameter will not take effect.
        """
        if dst_slave is not None:
            pulumi.set(__self__, "dst_slave", dst_slave)
        if force_switch is not None:
            pulumi.set(__self__, "force_switch", force_switch)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if wait_switch is not None:
            pulumi.set(__self__, "wait_switch", wait_switch)

    @property
    @pulumi.getter(name="dstSlave")
    def dst_slave(self) -> Optional[pulumi.Input[str]]:
        """
        target instance. Possible values: `first` - first standby; `second` - second standby. The default value is `first`, and only multi-AZ instances support setting it to `second`.
        """
        return pulumi.get(self, "dst_slave")

    @dst_slave.setter
    def dst_slave(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_slave", value)

    @property
    @pulumi.getter(name="forceSwitch")
    def force_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to force switch. Default is False. Note that if you set the mandatory switch to True, there is a risk of data loss on the instance, so use it with caution.
        """
        return pulumi.get(self, "force_switch")

    @force_switch.setter
    def force_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_switch", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to switch within the time window. The default is False, i.e. do not switch within the time window. Note that if the ForceSwitch parameter is set to True, this parameter will not take effect.
        """
        return pulumi.get(self, "wait_switch")

    @wait_switch.setter
    def wait_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait_switch", value)


class SwitchMasterSlaveOperation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dst_slave: Optional[pulumi.Input[str]] = None,
                 force_switch: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Provides a resource to create a mysql switch_master_slave_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cdb")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="mysql test")
        example_instance = tencentcloud.mysql.Instance("exampleInstance",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=1,
            availability_zone=zones.zones[0].name,
            first_slave_zone=zones.zones[1].name,
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        example_switch_master_slave_operation = tencentcloud.mysql.SwitchMasterSlaveOperation("exampleSwitchMasterSlaveOperation",
            instance_id=example_instance.id,
            dst_slave="second",
            force_switch=True,
            wait_switch=True)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dst_slave: target instance. Possible values: `first` - first standby; `second` - second standby. The default value is `first`, and only multi-AZ instances support setting it to `second`.
        :param pulumi.Input[bool] force_switch: Whether to force switch. Default is False. Note that if you set the mandatory switch to True, there is a risk of data loss on the instance, so use it with caution.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[bool] wait_switch: Whether to switch within the time window. The default is False, i.e. do not switch within the time window. Note that if the ForceSwitch parameter is set to True, this parameter will not take effect.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SwitchMasterSlaveOperationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a mysql switch_master_slave_operation

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        zones = tencentcloud.Availability.get_zones_by_product(product="cdb")
        vpc = tencentcloud.vpc.Instance("vpc", cidr_block="10.0.0.0/16")
        subnet = tencentcloud.subnet.Instance("subnet",
            availability_zone=zones.zones[0].name,
            vpc_id=vpc.id,
            cidr_block="10.0.0.0/16",
            is_multicast=False)
        security_group = tencentcloud.security.Group("securityGroup", description="mysql test")
        example_instance = tencentcloud.mysql.Instance("exampleInstance",
            internet_service=1,
            engine_version="5.7",
            charge_type="POSTPAID",
            root_password="PassWord123",
            slave_deploy_mode=1,
            availability_zone=zones.zones[0].name,
            first_slave_zone=zones.zones[1].name,
            slave_sync_mode=1,
            instance_name="tf-example-mysql",
            mem_size=4000,
            volume_size=200,
            vpc_id=vpc.id,
            subnet_id=subnet.id,
            intranet_port=3306,
            security_groups=[security_group.id],
            tags={
                "name": "test",
            },
            parameters={
                "character_set_server": "utf8",
                "max_connections": "1000",
            })
        example_switch_master_slave_operation = tencentcloud.mysql.SwitchMasterSlaveOperation("exampleSwitchMasterSlaveOperation",
            instance_id=example_instance.id,
            dst_slave="second",
            force_switch=True,
            wait_switch=True)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param SwitchMasterSlaveOperationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SwitchMasterSlaveOperationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dst_slave: Optional[pulumi.Input[str]] = None,
                 force_switch: Optional[pulumi.Input[bool]] = None,
                 instance_id: Optional[pulumi.Input[str]] = None,
                 wait_switch: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SwitchMasterSlaveOperationArgs.__new__(SwitchMasterSlaveOperationArgs)

            __props__.__dict__["dst_slave"] = dst_slave
            __props__.__dict__["force_switch"] = force_switch
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["wait_switch"] = wait_switch
        super(SwitchMasterSlaveOperation, __self__).__init__(
            'tencentcloud:Mysql/switchMasterSlaveOperation:SwitchMasterSlaveOperation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dst_slave: Optional[pulumi.Input[str]] = None,
            force_switch: Optional[pulumi.Input[bool]] = None,
            instance_id: Optional[pulumi.Input[str]] = None,
            wait_switch: Optional[pulumi.Input[bool]] = None) -> 'SwitchMasterSlaveOperation':
        """
        Get an existing SwitchMasterSlaveOperation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dst_slave: target instance. Possible values: `first` - first standby; `second` - second standby. The default value is `first`, and only multi-AZ instances support setting it to `second`.
        :param pulumi.Input[bool] force_switch: Whether to force switch. Default is False. Note that if you set the mandatory switch to True, there is a risk of data loss on the instance, so use it with caution.
        :param pulumi.Input[str] instance_id: instance id.
        :param pulumi.Input[bool] wait_switch: Whether to switch within the time window. The default is False, i.e. do not switch within the time window. Note that if the ForceSwitch parameter is set to True, this parameter will not take effect.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SwitchMasterSlaveOperationState.__new__(_SwitchMasterSlaveOperationState)

        __props__.__dict__["dst_slave"] = dst_slave
        __props__.__dict__["force_switch"] = force_switch
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["wait_switch"] = wait_switch
        return SwitchMasterSlaveOperation(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dstSlave")
    def dst_slave(self) -> pulumi.Output[Optional[str]]:
        """
        target instance. Possible values: `first` - first standby; `second` - second standby. The default value is `first`, and only multi-AZ instances support setting it to `second`.
        """
        return pulumi.get(self, "dst_slave")

    @property
    @pulumi.getter(name="forceSwitch")
    def force_switch(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to force switch. Default is False. Note that if you set the mandatory switch to True, there is a risk of data loss on the instance, so use it with caution.
        """
        return pulumi.get(self, "force_switch")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[str]:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="waitSwitch")
    def wait_switch(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to switch within the time window. The default is False, i.e. do not switch within the time window. Note that if the ForceSwitch parameter is set to True, this parameter will not take effect.
        """
        return pulumi.get(self, "wait_switch")

