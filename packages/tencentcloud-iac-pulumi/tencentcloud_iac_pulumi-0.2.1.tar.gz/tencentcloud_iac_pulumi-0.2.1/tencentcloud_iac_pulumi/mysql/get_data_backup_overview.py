# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetDataBackupOverviewResult',
    'AwaitableGetDataBackupOverviewResult',
    'get_data_backup_overview',
    'get_data_backup_overview_output',
]

@pulumi.output_type
class GetDataBackupOverviewResult:
    """
    A collection of values returned by getDataBackupOverview.
    """
    def __init__(__self__, auto_backup_count=None, auto_backup_volume=None, data_backup_archive_count=None, data_backup_archive_volume=None, data_backup_count=None, data_backup_standby_count=None, data_backup_standby_volume=None, data_backup_volume=None, id=None, manual_backup_count=None, manual_backup_volume=None, product=None, remote_backup_count=None, remote_backup_volume=None, result_output_file=None):
        if auto_backup_count and not isinstance(auto_backup_count, int):
            raise TypeError("Expected argument 'auto_backup_count' to be a int")
        pulumi.set(__self__, "auto_backup_count", auto_backup_count)
        if auto_backup_volume and not isinstance(auto_backup_volume, int):
            raise TypeError("Expected argument 'auto_backup_volume' to be a int")
        pulumi.set(__self__, "auto_backup_volume", auto_backup_volume)
        if data_backup_archive_count and not isinstance(data_backup_archive_count, int):
            raise TypeError("Expected argument 'data_backup_archive_count' to be a int")
        pulumi.set(__self__, "data_backup_archive_count", data_backup_archive_count)
        if data_backup_archive_volume and not isinstance(data_backup_archive_volume, int):
            raise TypeError("Expected argument 'data_backup_archive_volume' to be a int")
        pulumi.set(__self__, "data_backup_archive_volume", data_backup_archive_volume)
        if data_backup_count and not isinstance(data_backup_count, int):
            raise TypeError("Expected argument 'data_backup_count' to be a int")
        pulumi.set(__self__, "data_backup_count", data_backup_count)
        if data_backup_standby_count and not isinstance(data_backup_standby_count, int):
            raise TypeError("Expected argument 'data_backup_standby_count' to be a int")
        pulumi.set(__self__, "data_backup_standby_count", data_backup_standby_count)
        if data_backup_standby_volume and not isinstance(data_backup_standby_volume, int):
            raise TypeError("Expected argument 'data_backup_standby_volume' to be a int")
        pulumi.set(__self__, "data_backup_standby_volume", data_backup_standby_volume)
        if data_backup_volume and not isinstance(data_backup_volume, int):
            raise TypeError("Expected argument 'data_backup_volume' to be a int")
        pulumi.set(__self__, "data_backup_volume", data_backup_volume)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if manual_backup_count and not isinstance(manual_backup_count, int):
            raise TypeError("Expected argument 'manual_backup_count' to be a int")
        pulumi.set(__self__, "manual_backup_count", manual_backup_count)
        if manual_backup_volume and not isinstance(manual_backup_volume, int):
            raise TypeError("Expected argument 'manual_backup_volume' to be a int")
        pulumi.set(__self__, "manual_backup_volume", manual_backup_volume)
        if product and not isinstance(product, str):
            raise TypeError("Expected argument 'product' to be a str")
        pulumi.set(__self__, "product", product)
        if remote_backup_count and not isinstance(remote_backup_count, int):
            raise TypeError("Expected argument 'remote_backup_count' to be a int")
        pulumi.set(__self__, "remote_backup_count", remote_backup_count)
        if remote_backup_volume and not isinstance(remote_backup_volume, int):
            raise TypeError("Expected argument 'remote_backup_volume' to be a int")
        pulumi.set(__self__, "remote_backup_volume", remote_backup_volume)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)

    @property
    @pulumi.getter(name="autoBackupCount")
    def auto_backup_count(self) -> int:
        """
        The total number of automatic backups in the current region.
        """
        return pulumi.get(self, "auto_backup_count")

    @property
    @pulumi.getter(name="autoBackupVolume")
    def auto_backup_volume(self) -> int:
        """
        The total automatic backup capacity of the current region.
        """
        return pulumi.get(self, "auto_backup_volume")

    @property
    @pulumi.getter(name="dataBackupArchiveCount")
    def data_backup_archive_count(self) -> int:
        """
        The total number of archive backups in the current region.
        """
        return pulumi.get(self, "data_backup_archive_count")

    @property
    @pulumi.getter(name="dataBackupArchiveVolume")
    def data_backup_archive_volume(self) -> int:
        """
        The total capacity of the current regional archive backup.
        """
        return pulumi.get(self, "data_backup_archive_volume")

    @property
    @pulumi.getter(name="dataBackupCount")
    def data_backup_count(self) -> int:
        """
        The total number of data backups in the current region.
        """
        return pulumi.get(self, "data_backup_count")

    @property
    @pulumi.getter(name="dataBackupStandbyCount")
    def data_backup_standby_count(self) -> int:
        """
        The total number of standard storage backups in the current region.
        """
        return pulumi.get(self, "data_backup_standby_count")

    @property
    @pulumi.getter(name="dataBackupStandbyVolume")
    def data_backup_standby_volume(self) -> int:
        """
        The total backup capacity of the current regional standard storage.
        """
        return pulumi.get(self, "data_backup_standby_volume")

    @property
    @pulumi.getter(name="dataBackupVolume")
    def data_backup_volume(self) -> int:
        """
        Total data backup capacity of the current region (including automatic backup and manual backup, in bytes).
        """
        return pulumi.get(self, "data_backup_volume")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="manualBackupCount")
    def manual_backup_count(self) -> int:
        """
        The total number of manual backups in the current region.
        """
        return pulumi.get(self, "manual_backup_count")

    @property
    @pulumi.getter(name="manualBackupVolume")
    def manual_backup_volume(self) -> int:
        """
        The total manual backup capacity of the current region.
        """
        return pulumi.get(self, "manual_backup_volume")

    @property
    @pulumi.getter
    def product(self) -> str:
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="remoteBackupCount")
    def remote_backup_count(self) -> int:
        """
        The total number of remote backups.
        """
        return pulumi.get(self, "remote_backup_count")

    @property
    @pulumi.getter(name="remoteBackupVolume")
    def remote_backup_volume(self) -> int:
        """
        The total capacity of remote backup.
        """
        return pulumi.get(self, "remote_backup_volume")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")


class AwaitableGetDataBackupOverviewResult(GetDataBackupOverviewResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataBackupOverviewResult(
            auto_backup_count=self.auto_backup_count,
            auto_backup_volume=self.auto_backup_volume,
            data_backup_archive_count=self.data_backup_archive_count,
            data_backup_archive_volume=self.data_backup_archive_volume,
            data_backup_count=self.data_backup_count,
            data_backup_standby_count=self.data_backup_standby_count,
            data_backup_standby_volume=self.data_backup_standby_volume,
            data_backup_volume=self.data_backup_volume,
            id=self.id,
            manual_backup_count=self.manual_backup_count,
            manual_backup_volume=self.manual_backup_volume,
            product=self.product,
            remote_backup_count=self.remote_backup_count,
            remote_backup_volume=self.remote_backup_volume,
            result_output_file=self.result_output_file)


def get_data_backup_overview(product: Optional[str] = None,
                             result_output_file: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataBackupOverviewResult:
    """
    Use this data source to query detailed information of mysql data_backup_overview

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    data_backup_overview = tencentcloud.Mysql.get_data_backup_overview(product="mysql")
    ```
    <!--End PulumiCodeChooser -->


    :param str product: The type of cloud database product to be queried, currently only supports `mysql`.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['product'] = product
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mysql/getDataBackupOverview:getDataBackupOverview', __args__, opts=opts, typ=GetDataBackupOverviewResult).value

    return AwaitableGetDataBackupOverviewResult(
        auto_backup_count=pulumi.get(__ret__, 'auto_backup_count'),
        auto_backup_volume=pulumi.get(__ret__, 'auto_backup_volume'),
        data_backup_archive_count=pulumi.get(__ret__, 'data_backup_archive_count'),
        data_backup_archive_volume=pulumi.get(__ret__, 'data_backup_archive_volume'),
        data_backup_count=pulumi.get(__ret__, 'data_backup_count'),
        data_backup_standby_count=pulumi.get(__ret__, 'data_backup_standby_count'),
        data_backup_standby_volume=pulumi.get(__ret__, 'data_backup_standby_volume'),
        data_backup_volume=pulumi.get(__ret__, 'data_backup_volume'),
        id=pulumi.get(__ret__, 'id'),
        manual_backup_count=pulumi.get(__ret__, 'manual_backup_count'),
        manual_backup_volume=pulumi.get(__ret__, 'manual_backup_volume'),
        product=pulumi.get(__ret__, 'product'),
        remote_backup_count=pulumi.get(__ret__, 'remote_backup_count'),
        remote_backup_volume=pulumi.get(__ret__, 'remote_backup_volume'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'))


@_utilities.lift_output_func(get_data_backup_overview)
def get_data_backup_overview_output(product: Optional[pulumi.Input[str]] = None,
                                    result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDataBackupOverviewResult]:
    """
    Use this data source to query detailed information of mysql data_backup_overview

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    data_backup_overview = tencentcloud.Mysql.get_data_backup_overview(product="mysql")
    ```
    <!--End PulumiCodeChooser -->


    :param str product: The type of cloud database product to be queried, currently only supports `mysql`.
    :param str result_output_file: Used to save results.
    """
    ...
