# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSlowLogDataResult',
    'AwaitableGetSlowLogDataResult',
    'get_slow_log_data',
    'get_slow_log_data_output',
]

@pulumi.output_type
class GetSlowLogDataResult:
    """
    A collection of values returned by getSlowLogData.
    """
    def __init__(__self__, data_bases=None, end_time=None, id=None, inst_type=None, instance_id=None, items=None, order_by=None, result_output_file=None, sort_by=None, start_time=None, user_hosts=None, user_names=None):
        if data_bases and not isinstance(data_bases, list):
            raise TypeError("Expected argument 'data_bases' to be a list")
        pulumi.set(__self__, "data_bases", data_bases)
        if end_time and not isinstance(end_time, int):
            raise TypeError("Expected argument 'end_time' to be a int")
        pulumi.set(__self__, "end_time", end_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inst_type and not isinstance(inst_type, str):
            raise TypeError("Expected argument 'inst_type' to be a str")
        pulumi.set(__self__, "inst_type", inst_type)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if items and not isinstance(items, list):
            raise TypeError("Expected argument 'items' to be a list")
        pulumi.set(__self__, "items", items)
        if order_by and not isinstance(order_by, str):
            raise TypeError("Expected argument 'order_by' to be a str")
        pulumi.set(__self__, "order_by", order_by)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if sort_by and not isinstance(sort_by, str):
            raise TypeError("Expected argument 'sort_by' to be a str")
        pulumi.set(__self__, "sort_by", sort_by)
        if start_time and not isinstance(start_time, int):
            raise TypeError("Expected argument 'start_time' to be a int")
        pulumi.set(__self__, "start_time", start_time)
        if user_hosts and not isinstance(user_hosts, list):
            raise TypeError("Expected argument 'user_hosts' to be a list")
        pulumi.set(__self__, "user_hosts", user_hosts)
        if user_names and not isinstance(user_names, list):
            raise TypeError("Expected argument 'user_names' to be a list")
        pulumi.set(__self__, "user_names", user_names)

    @property
    @pulumi.getter(name="dataBases")
    def data_bases(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "data_bases")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> int:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instType")
    def inst_type(self) -> Optional[str]:
        return pulumi.get(self, "inst_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetSlowLogDataItemResult']:
        """
        Query records.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[str]:
        return pulumi.get(self, "order_by")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> Optional[str]:
        return pulumi.get(self, "sort_by")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="userHosts")
    def user_hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_hosts")

    @property
    @pulumi.getter(name="userNames")
    def user_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_names")


class AwaitableGetSlowLogDataResult(GetSlowLogDataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSlowLogDataResult(
            data_bases=self.data_bases,
            end_time=self.end_time,
            id=self.id,
            inst_type=self.inst_type,
            instance_id=self.instance_id,
            items=self.items,
            order_by=self.order_by,
            result_output_file=self.result_output_file,
            sort_by=self.sort_by,
            start_time=self.start_time,
            user_hosts=self.user_hosts,
            user_names=self.user_names)


def get_slow_log_data(data_bases: Optional[Sequence[str]] = None,
                      end_time: Optional[int] = None,
                      inst_type: Optional[str] = None,
                      instance_id: Optional[str] = None,
                      order_by: Optional[str] = None,
                      result_output_file: Optional[str] = None,
                      sort_by: Optional[str] = None,
                      start_time: Optional[int] = None,
                      user_hosts: Optional[Sequence[str]] = None,
                      user_names: Optional[Sequence[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSlowLogDataResult:
    """
    Use this data source to query detailed information of mysql slow_log_data

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    slow_log_data = tencentcloud.Mysql.get_slow_log_data(data_bases=["tf_ci_test"],
        end_time=1684392459,
        inst_type="slave",
        instance_id="cdb-fitq5t9h",
        order_by="ASC",
        sort_by="Timestamp",
        start_time=1682664459,
        user_hosts=["169.254.128.158"],
        user_names=["keep_dts"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] data_bases: List of databases accessed.
    :param int end_time: End timestamp. For example 1585142640.
    :param str inst_type: Only valid when the instance is the master instance or disaster recovery instance, the optional value: slave, which means to pull the log of the slave machine.
    :param str instance_id: instance id.
    :param str order_by: Sort in ascending or descending order. Currently supported: ASC,DESC.
    :param str result_output_file: Used to save results.
    :param str sort_by: Sort field. Currently supported: Timestamp, QueryTime, LockTime, RowsExamined, RowsSent.
    :param int start_time: Start timestamp. For example 1585142640.
    :param Sequence[str] user_hosts: List of client hosts.
    :param Sequence[str] user_names: A list of client usernames.
    """
    __args__ = dict()
    __args__['dataBases'] = data_bases
    __args__['endTime'] = end_time
    __args__['instType'] = inst_type
    __args__['instanceId'] = instance_id
    __args__['orderBy'] = order_by
    __args__['resultOutputFile'] = result_output_file
    __args__['sortBy'] = sort_by
    __args__['startTime'] = start_time
    __args__['userHosts'] = user_hosts
    __args__['userNames'] = user_names
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mysql/getSlowLogData:getSlowLogData', __args__, opts=opts, typ=GetSlowLogDataResult).value

    return AwaitableGetSlowLogDataResult(
        data_bases=pulumi.get(__ret__, 'data_bases'),
        end_time=pulumi.get(__ret__, 'end_time'),
        id=pulumi.get(__ret__, 'id'),
        inst_type=pulumi.get(__ret__, 'inst_type'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        items=pulumi.get(__ret__, 'items'),
        order_by=pulumi.get(__ret__, 'order_by'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        sort_by=pulumi.get(__ret__, 'sort_by'),
        start_time=pulumi.get(__ret__, 'start_time'),
        user_hosts=pulumi.get(__ret__, 'user_hosts'),
        user_names=pulumi.get(__ret__, 'user_names'))


@_utilities.lift_output_func(get_slow_log_data)
def get_slow_log_data_output(data_bases: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             end_time: Optional[pulumi.Input[int]] = None,
                             inst_type: Optional[pulumi.Input[Optional[str]]] = None,
                             instance_id: Optional[pulumi.Input[str]] = None,
                             order_by: Optional[pulumi.Input[Optional[str]]] = None,
                             result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                             sort_by: Optional[pulumi.Input[Optional[str]]] = None,
                             start_time: Optional[pulumi.Input[int]] = None,
                             user_hosts: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             user_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSlowLogDataResult]:
    """
    Use this data source to query detailed information of mysql slow_log_data

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    slow_log_data = tencentcloud.Mysql.get_slow_log_data(data_bases=["tf_ci_test"],
        end_time=1684392459,
        inst_type="slave",
        instance_id="cdb-fitq5t9h",
        order_by="ASC",
        sort_by="Timestamp",
        start_time=1682664459,
        user_hosts=["169.254.128.158"],
        user_names=["keep_dts"])
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[str] data_bases: List of databases accessed.
    :param int end_time: End timestamp. For example 1585142640.
    :param str inst_type: Only valid when the instance is the master instance or disaster recovery instance, the optional value: slave, which means to pull the log of the slave machine.
    :param str instance_id: instance id.
    :param str order_by: Sort in ascending or descending order. Currently supported: ASC,DESC.
    :param str result_output_file: Used to save results.
    :param str sort_by: Sort field. Currently supported: Timestamp, QueryTime, LockTime, RowsExamined, RowsSent.
    :param int start_time: Start timestamp. For example 1585142640.
    :param Sequence[str] user_hosts: List of client hosts.
    :param Sequence[str] user_names: A list of client usernames.
    """
    ...
