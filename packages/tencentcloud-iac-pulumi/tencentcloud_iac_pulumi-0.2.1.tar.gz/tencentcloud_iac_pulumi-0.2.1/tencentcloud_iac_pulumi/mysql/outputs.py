# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AuditLogFileFilter',
    'BackupDownloadRestrictionLimitVpc',
    'ParamTemplateParamList',
    'PasswordComplexityParamList',
    'PrivilegeColumn',
    'PrivilegeDatabase',
    'PrivilegeTable',
    'ProxyProxyNodeCustom',
    'RoGroupRoGroupInfo',
    'RoGroupRoWeightValue',
    'RollbackDatabase',
    'RollbackTable',
    'RollbackTableTable',
    'GetBackupListListResult',
    'GetBackupSummariesItemResult',
    'GetBinLogItemResult',
    'GetBinLogItemRemoteInfoResult',
    'GetCloneListItemResult',
    'GetDatabasesDatabaseListResult',
    'GetDefaultParamsParamListResult',
    'GetErrorLogItemResult',
    'GetInstanceInstanceListResult',
    'GetInstanceInstanceListRoGroupResult',
    'GetInstanceParamRecordItemResult',
    'GetInstanceRebootTimeItemResult',
    'GetParameterListParameterListResult',
    'GetProjectSecurityGroupGroupResult',
    'GetProjectSecurityGroupGroupInboundResult',
    'GetProjectSecurityGroupGroupOutboundResult',
    'GetProxyCustomCustomConfResult',
    'GetProxyCustomWeightRuleResult',
    'GetRollbackRangeTimeItemResult',
    'GetRollbackRangeTimeItemTimeResult',
    'GetSlowLogDataItemResult',
    'GetSlowLogItemResult',
    'GetSwitchRecordItemResult',
    'GetUserTaskItemResult',
    'GetZoneConfigListResult',
    'GetZoneConfigListSellResult',
]

@pulumi.output_type
class AuditLogFileFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "affectRows":
            suggest = "affect_rows"
        elif key == "dbNames":
            suggest = "db_names"
        elif key == "execTime":
            suggest = "exec_time"
        elif key == "policyNames":
            suggest = "policy_names"
        elif key == "sqlType":
            suggest = "sql_type"
        elif key == "sqlTypes":
            suggest = "sql_types"
        elif key == "tableNames":
            suggest = "table_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditLogFileFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditLogFileFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditLogFileFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 affect_rows: Optional[int] = None,
                 db_names: Optional[Sequence[str]] = None,
                 exec_time: Optional[int] = None,
                 hosts: Optional[Sequence[str]] = None,
                 policy_names: Optional[Sequence[str]] = None,
                 sql: Optional[str] = None,
                 sql_type: Optional[str] = None,
                 sql_types: Optional[Sequence[str]] = None,
                 sqls: Optional[Sequence[str]] = None,
                 table_names: Optional[Sequence[str]] = None,
                 users: Optional[Sequence[str]] = None):
        """
        :param int affect_rows: Affects the number of rows. Indicates to filter audit logs whose number of affected rows is greater than this value.
        :param Sequence[str] db_names: Database name.
        :param int exec_time: Execution time. The unit is: ms. Indicates to filter audit logs whose execution time is greater than this value.
        :param Sequence[str] hosts: Client address.
        :param Sequence[str] policy_names: The name of policy.
        :param str sql: SQL statement. support fuzzy matching.
        :param str sql_type: SQL type. Currently supported: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, SET, REPLACE, EXECUTE.
        :param Sequence[str] sql_types: SQL type. Supports simultaneous query of multiple types. Currently supported: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, SET, REPLACE, EXECUTE.
        :param Sequence[str] sqls: SQL statement. Support passing multiple sql statements.
        :param Sequence[str] table_names: Table name.
        :param Sequence[str] users: User name.
        """
        if affect_rows is not None:
            pulumi.set(__self__, "affect_rows", affect_rows)
        if db_names is not None:
            pulumi.set(__self__, "db_names", db_names)
        if exec_time is not None:
            pulumi.set(__self__, "exec_time", exec_time)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)
        if sql_type is not None:
            pulumi.set(__self__, "sql_type", sql_type)
        if sql_types is not None:
            pulumi.set(__self__, "sql_types", sql_types)
        if sqls is not None:
            pulumi.set(__self__, "sqls", sqls)
        if table_names is not None:
            pulumi.set(__self__, "table_names", table_names)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="affectRows")
    def affect_rows(self) -> Optional[int]:
        """
        Affects the number of rows. Indicates to filter audit logs whose number of affected rows is greater than this value.
        """
        return pulumi.get(self, "affect_rows")

    @property
    @pulumi.getter(name="dbNames")
    def db_names(self) -> Optional[Sequence[str]]:
        """
        Database name.
        """
        return pulumi.get(self, "db_names")

    @property
    @pulumi.getter(name="execTime")
    def exec_time(self) -> Optional[int]:
        """
        Execution time. The unit is: ms. Indicates to filter audit logs whose execution time is greater than this value.
        """
        return pulumi.get(self, "exec_time")

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        Client address.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        """
        The name of policy.
        """
        return pulumi.get(self, "policy_names")

    @property
    @pulumi.getter
    def sql(self) -> Optional[str]:
        """
        SQL statement. support fuzzy matching.
        """
        return pulumi.get(self, "sql")

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> Optional[str]:
        """
        SQL type. Currently supported: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, SET, REPLACE, EXECUTE.
        """
        return pulumi.get(self, "sql_type")

    @property
    @pulumi.getter(name="sqlTypes")
    def sql_types(self) -> Optional[Sequence[str]]:
        """
        SQL type. Supports simultaneous query of multiple types. Currently supported: SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, SET, REPLACE, EXECUTE.
        """
        return pulumi.get(self, "sql_types")

    @property
    @pulumi.getter
    def sqls(self) -> Optional[Sequence[str]]:
        """
        SQL statement. Support passing multiple sql statements.
        """
        return pulumi.get(self, "sqls")

    @property
    @pulumi.getter(name="tableNames")
    def table_names(self) -> Optional[Sequence[str]]:
        """
        Table name.
        """
        return pulumi.get(self, "table_names")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        User name.
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class BackupDownloadRestrictionLimitVpc(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vpcLists":
            suggest = "vpc_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupDownloadRestrictionLimitVpc. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupDownloadRestrictionLimitVpc.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupDownloadRestrictionLimitVpc.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 vpc_lists: Sequence[str]):
        """
        :param str region: Restrict downloads from regions. Currently only the current region is supported.
        :param Sequence[str] vpc_lists: List of vpcs to limit downloads.
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "vpc_lists", vpc_lists)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Restrict downloads from regions. Currently only the current region is supported.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="vpcLists")
    def vpc_lists(self) -> Sequence[str]:
        """
        List of vpcs to limit downloads.
        """
        return pulumi.get(self, "vpc_lists")


@pulumi.output_type
class ParamTemplateParamList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentValue":
            suggest = "current_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ParamTemplateParamList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ParamTemplateParamList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ParamTemplateParamList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_value: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str current_value: The value of parameter.
        :param str name: The name of parameter.
        """
        if current_value is not None:
            pulumi.set(__self__, "current_value", current_value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> Optional[str]:
        """
        The value of parameter.
        """
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of parameter.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PasswordComplexityParamList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentValue":
            suggest = "current_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PasswordComplexityParamList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PasswordComplexityParamList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PasswordComplexityParamList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_value: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str current_value: Parameter value.
        :param str name: Parameter name.
        """
        if current_value is not None:
            pulumi.set(__self__, "current_value", current_value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> Optional[str]:
        """
        Parameter value.
        """
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Parameter name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class PrivilegeColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivilegeColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivilegeColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivilegeColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 database_name: str,
                 privileges: Sequence[str],
                 table_name: str):
        """
        :param str column_name: Column name.
        :param str database_name: Database name.
        :param Sequence[str] privileges: Column privilege.available values for Privileges:SELECT,INSERT,UPDATE,REFERENCES.
        :param str table_name: Table name.
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        """
        Column name.
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        Column privilege.available values for Privileges:SELECT,INSERT,UPDATE,REFERENCES.
        """
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        Table name.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class PrivilegeDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivilegeDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivilegeDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivilegeDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 privileges: Sequence[str]):
        """
        :param str database_name: Database name.
        :param Sequence[str] privileges: Database privilege.available values for Privileges:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER.
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "privileges", privileges)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        Database privilege.available values for Privileges:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER.
        """
        return pulumi.get(self, "privileges")


@pulumi.output_type
class PrivilegeTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivilegeTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivilegeTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivilegeTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 privileges: Sequence[str],
                 table_name: str):
        """
        :param str database_name: Database name.
        :param Sequence[str] privileges: Table privilege.available values for Privileges:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE VIEW,SHOW VIEW,TRIGGER.
        :param str table_name: Table name.
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "privileges", privileges)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def privileges(self) -> Sequence[str]:
        """
        Table privilege.available values for Privileges:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE VIEW,SHOW VIEW,TRIGGER.
        """
        return pulumi.get(self, "privileges")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        Table name.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class ProxyProxyNodeCustom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nodeCount":
            suggest = "node_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProxyProxyNodeCustom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProxyProxyNodeCustom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProxyProxyNodeCustom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu: int,
                 mem: int,
                 node_count: int,
                 region: str,
                 zone: str):
        """
        :param int cpu: Number of CPU cores.
        :param int mem: Memory size.
        :param int node_count: Number of nodes.
        :param str region: Region.
        :param str zone: Zone.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "mem", mem)
        pulumi.set(__self__, "node_count", node_count)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        Number of CPU cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def mem(self) -> int:
        """
        Memory size.
        """
        return pulumi.get(self, "mem")

    @property
    @pulumi.getter(name="nodeCount")
    def node_count(self) -> int:
        """
        Number of nodes.
        """
        return pulumi.get(self, "node_count")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Zone.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class RoGroupRoGroupInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minRoInGroup":
            suggest = "min_ro_in_group"
        elif key == "replicationDelayTime":
            suggest = "replication_delay_time"
        elif key == "roGroupName":
            suggest = "ro_group_name"
        elif key == "roMaxDelayTime":
            suggest = "ro_max_delay_time"
        elif key == "roOfflineDelay":
            suggest = "ro_offline_delay"
        elif key == "weightMode":
            suggest = "weight_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoGroupRoGroupInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoGroupRoGroupInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoGroupRoGroupInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_ro_in_group: Optional[int] = None,
                 replication_delay_time: Optional[int] = None,
                 ro_group_name: Optional[str] = None,
                 ro_max_delay_time: Optional[int] = None,
                 ro_offline_delay: Optional[int] = None,
                 weight_mode: Optional[str] = None):
        """
        :param int min_ro_in_group: The minimum number of reserved instances. It can be set to any value less than or equal to the number of RO instances under this RO group. Note that if the setting value is greater than the number of RO instances, it will not be removed; if it is set to 0, all instances whose latency exceeds the limit will be removed.
        :param int replication_delay_time: Delayed replication time.
        :param str ro_group_name: RO group name.
        :param int ro_max_delay_time: RO instance maximum latency threshold. The unit is seconds, the minimum value is 1. Note that the RO group must have enabled instance delay culling policy for this value to be valid.
        :param int ro_offline_delay: Whether to enable delayed culling of instances. Supported values are: 1 - on; 0 - not on. Note that if you enable instance delay culling, you must set the delay threshold (RoMaxDelayTime) parameter.
        :param str weight_mode: weight mode. Supported values include: `system` - automatically assigned by the system; `custom` - user-defined settings. Note that if the `custom` mode is set, the RO instance weight configuration (RoWeightValues) parameter must be set.
        """
        if min_ro_in_group is not None:
            pulumi.set(__self__, "min_ro_in_group", min_ro_in_group)
        if replication_delay_time is not None:
            pulumi.set(__self__, "replication_delay_time", replication_delay_time)
        if ro_group_name is not None:
            pulumi.set(__self__, "ro_group_name", ro_group_name)
        if ro_max_delay_time is not None:
            pulumi.set(__self__, "ro_max_delay_time", ro_max_delay_time)
        if ro_offline_delay is not None:
            pulumi.set(__self__, "ro_offline_delay", ro_offline_delay)
        if weight_mode is not None:
            pulumi.set(__self__, "weight_mode", weight_mode)

    @property
    @pulumi.getter(name="minRoInGroup")
    def min_ro_in_group(self) -> Optional[int]:
        """
        The minimum number of reserved instances. It can be set to any value less than or equal to the number of RO instances under this RO group. Note that if the setting value is greater than the number of RO instances, it will not be removed; if it is set to 0, all instances whose latency exceeds the limit will be removed.
        """
        return pulumi.get(self, "min_ro_in_group")

    @property
    @pulumi.getter(name="replicationDelayTime")
    def replication_delay_time(self) -> Optional[int]:
        """
        Delayed replication time.
        """
        return pulumi.get(self, "replication_delay_time")

    @property
    @pulumi.getter(name="roGroupName")
    def ro_group_name(self) -> Optional[str]:
        """
        RO group name.
        """
        return pulumi.get(self, "ro_group_name")

    @property
    @pulumi.getter(name="roMaxDelayTime")
    def ro_max_delay_time(self) -> Optional[int]:
        """
        RO instance maximum latency threshold. The unit is seconds, the minimum value is 1. Note that the RO group must have enabled instance delay culling policy for this value to be valid.
        """
        return pulumi.get(self, "ro_max_delay_time")

    @property
    @pulumi.getter(name="roOfflineDelay")
    def ro_offline_delay(self) -> Optional[int]:
        """
        Whether to enable delayed culling of instances. Supported values are: 1 - on; 0 - not on. Note that if you enable instance delay culling, you must set the delay threshold (RoMaxDelayTime) parameter.
        """
        return pulumi.get(self, "ro_offline_delay")

    @property
    @pulumi.getter(name="weightMode")
    def weight_mode(self) -> Optional[str]:
        """
        weight mode. Supported values include: `system` - automatically assigned by the system; `custom` - user-defined settings. Note that if the `custom` mode is set, the RO instance weight configuration (RoWeightValues) parameter must be set.
        """
        return pulumi.get(self, "weight_mode")


@pulumi.output_type
class RoGroupRoWeightValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoGroupRoWeightValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoGroupRoWeightValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoGroupRoWeightValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_id: str,
                 weight: int):
        """
        :param str instance_id: RO instance ID.
        :param int weight: Weights. The value range is [0, 100].
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        RO instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Weights. The value range is [0, 100].
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class RollbackDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "newDatabaseName":
            suggest = "new_database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RollbackDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RollbackDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RollbackDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 new_database_name: str):
        """
        :param str database_name: The original database name before rollback.
        :param str new_database_name: The new database name after rollback.
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "new_database_name", new_database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The original database name before rollback.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="newDatabaseName")
    def new_database_name(self) -> str:
        """
        The new database name after rollback.
        """
        return pulumi.get(self, "new_database_name")


@pulumi.output_type
class RollbackTable(dict):
    def __init__(__self__, *,
                 database: str,
                 tables: Sequence['outputs.RollbackTableTable']):
        """
        :param str database: Database name.
        :param Sequence['RollbackTableTableArgs'] tables: Database table details.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.RollbackTableTable']:
        """
        Database table details.
        """
        return pulumi.get(self, "tables")


@pulumi.output_type
class RollbackTableTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newTableName":
            suggest = "new_table_name"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RollbackTableTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RollbackTableTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RollbackTableTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_table_name: str,
                 table_name: str):
        """
        :param str new_table_name: New database table name after rollback.
        :param str table_name: The original database table name before rollback.
        """
        pulumi.set(__self__, "new_table_name", new_table_name)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="newTableName")
    def new_table_name(self) -> str:
        """
        New database table name after rollback.
        """
        return pulumi.get(self, "new_table_name")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        The original database table name before rollback.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class GetBackupListListResult(dict):
    def __init__(__self__, *,
                 backup_id: int,
                 backup_model: str,
                 creator: str,
                 finish_time: str,
                 internet_url: str,
                 intranet_url: str,
                 size: int,
                 time: str):
        """
        :param int backup_id: ID of Backup task.
        :param str backup_model: Backup method. Supported values include: `physical` - physical backup, and `logical` - logical backup.
        :param str creator: The owner of the backup files.
        :param str finish_time: The time at which the backup finishes.
        :param str internet_url: URL for downloads externally.
        :param str intranet_url: URL for downloads internally.
        :param int size: the size of backup file.
        :param str time: The earliest time at which the backup starts. For example, `2` indicates 2:00 am.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        pulumi.set(__self__, "backup_model", backup_model)
        pulumi.set(__self__, "creator", creator)
        pulumi.set(__self__, "finish_time", finish_time)
        pulumi.set(__self__, "internet_url", internet_url)
        pulumi.set(__self__, "intranet_url", intranet_url)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> int:
        """
        ID of Backup task.
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter(name="backupModel")
    def backup_model(self) -> str:
        """
        Backup method. Supported values include: `physical` - physical backup, and `logical` - logical backup.
        """
        return pulumi.get(self, "backup_model")

    @property
    @pulumi.getter
    def creator(self) -> str:
        """
        The owner of the backup files.
        """
        return pulumi.get(self, "creator")

    @property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> str:
        """
        The time at which the backup finishes.
        """
        return pulumi.get(self, "finish_time")

    @property
    @pulumi.getter(name="internetUrl")
    def internet_url(self) -> str:
        """
        URL for downloads externally.
        """
        return pulumi.get(self, "internet_url")

    @property
    @pulumi.getter(name="intranetUrl")
    def intranet_url(self) -> str:
        """
        URL for downloads internally.
        """
        return pulumi.get(self, "intranet_url")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        the size of backup file.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def time(self) -> str:
        """
        The earliest time at which the backup starts. For example, `2` indicates 2:00 am.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class GetBackupSummariesItemResult(dict):
    def __init__(__self__, *,
                 auto_backup_count: int,
                 auto_backup_volume: int,
                 backup_volume: int,
                 binlog_backup_count: int,
                 binlog_backup_volume: int,
                 data_backup_count: int,
                 data_backup_volume: int,
                 instance_id: str,
                 manual_backup_count: int,
                 manual_backup_volume: int):
        """
        :param int auto_backup_count: The number of automatic data backups for this instance.
        :param int auto_backup_volume: The automatic data backup capacity of this instance.
        :param int backup_volume: The total backup (including data backup and log backup) of the instance occupies capacity.
        :param int binlog_backup_count: The number of log backups for this instance.
        :param int binlog_backup_volume: The capacity of the instance log backup.
        :param int data_backup_count: The total number of data backups (including automatic backups and manual backups) of the instance.
        :param int data_backup_volume: The total data backup capacity of this instance.
        :param str instance_id: Instance ID.
        :param int manual_backup_count: The number of manual data backups for this instance.
        :param int manual_backup_volume: The capacity of manual data backup for this instance.
        """
        pulumi.set(__self__, "auto_backup_count", auto_backup_count)
        pulumi.set(__self__, "auto_backup_volume", auto_backup_volume)
        pulumi.set(__self__, "backup_volume", backup_volume)
        pulumi.set(__self__, "binlog_backup_count", binlog_backup_count)
        pulumi.set(__self__, "binlog_backup_volume", binlog_backup_volume)
        pulumi.set(__self__, "data_backup_count", data_backup_count)
        pulumi.set(__self__, "data_backup_volume", data_backup_volume)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "manual_backup_count", manual_backup_count)
        pulumi.set(__self__, "manual_backup_volume", manual_backup_volume)

    @property
    @pulumi.getter(name="autoBackupCount")
    def auto_backup_count(self) -> int:
        """
        The number of automatic data backups for this instance.
        """
        return pulumi.get(self, "auto_backup_count")

    @property
    @pulumi.getter(name="autoBackupVolume")
    def auto_backup_volume(self) -> int:
        """
        The automatic data backup capacity of this instance.
        """
        return pulumi.get(self, "auto_backup_volume")

    @property
    @pulumi.getter(name="backupVolume")
    def backup_volume(self) -> int:
        """
        The total backup (including data backup and log backup) of the instance occupies capacity.
        """
        return pulumi.get(self, "backup_volume")

    @property
    @pulumi.getter(name="binlogBackupCount")
    def binlog_backup_count(self) -> int:
        """
        The number of log backups for this instance.
        """
        return pulumi.get(self, "binlog_backup_count")

    @property
    @pulumi.getter(name="binlogBackupVolume")
    def binlog_backup_volume(self) -> int:
        """
        The capacity of the instance log backup.
        """
        return pulumi.get(self, "binlog_backup_volume")

    @property
    @pulumi.getter(name="dataBackupCount")
    def data_backup_count(self) -> int:
        """
        The total number of data backups (including automatic backups and manual backups) of the instance.
        """
        return pulumi.get(self, "data_backup_count")

    @property
    @pulumi.getter(name="dataBackupVolume")
    def data_backup_volume(self) -> int:
        """
        The total data backup capacity of this instance.
        """
        return pulumi.get(self, "data_backup_volume")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance ID.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="manualBackupCount")
    def manual_backup_count(self) -> int:
        """
        The number of manual data backups for this instance.
        """
        return pulumi.get(self, "manual_backup_count")

    @property
    @pulumi.getter(name="manualBackupVolume")
    def manual_backup_volume(self) -> int:
        """
        The capacity of manual data backup for this instance.
        """
        return pulumi.get(self, "manual_backup_volume")


@pulumi.output_type
class GetBinLogItemResult(dict):
    def __init__(__self__, *,
                 binlog_finish_time: str,
                 binlog_start_time: str,
                 cos_storage_type: int,
                 date: str,
                 instance_id: str,
                 internet_url: str,
                 intranet_url: str,
                 name: str,
                 region: str,
                 remote_infos: Sequence['outputs.GetBinLogItemRemoteInfoResult'],
                 size: int,
                 status: str,
                 type: str):
        """
        :param str binlog_finish_time: binlog file deadline.
        :param str binlog_start_time: Binlog file start time.
        :param int cos_storage_type: Storage method, 0-regular storage, 1-archive storage, the default is 0.
        :param str date: File storage time, time format: 2016-03-17 02:10:37.
        :param str instance_id: Instance ID, in the format: cdb-c1nl9rpv. Same instance ID as displayed in the ApsaraDB for Console page.
        :param str internet_url: download link.
        :param str intranet_url: download link.
        :param str name: binlog log backup file name.
        :param str region: The region where remote backup is located.
        :param Sequence['GetBinLogItemRemoteInfoArgs'] remote_infos: Binlog remote backup details.
        :param int size: Backup file size, unit: Byte.
        :param str status: Backup task status. Possible values are `SUCCESS`: backup succeeded, `FAILED`: backup failed, `RUNNING`: backup in progress.
        :param str type: Specific log type, possible values are: binlog - binary log.
        """
        pulumi.set(__self__, "binlog_finish_time", binlog_finish_time)
        pulumi.set(__self__, "binlog_start_time", binlog_start_time)
        pulumi.set(__self__, "cos_storage_type", cos_storage_type)
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "internet_url", internet_url)
        pulumi.set(__self__, "intranet_url", intranet_url)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "remote_infos", remote_infos)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="binlogFinishTime")
    def binlog_finish_time(self) -> str:
        """
        binlog file deadline.
        """
        return pulumi.get(self, "binlog_finish_time")

    @property
    @pulumi.getter(name="binlogStartTime")
    def binlog_start_time(self) -> str:
        """
        Binlog file start time.
        """
        return pulumi.get(self, "binlog_start_time")

    @property
    @pulumi.getter(name="cosStorageType")
    def cos_storage_type(self) -> int:
        """
        Storage method, 0-regular storage, 1-archive storage, the default is 0.
        """
        return pulumi.get(self, "cos_storage_type")

    @property
    @pulumi.getter
    def date(self) -> str:
        """
        File storage time, time format: 2016-03-17 02:10:37.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance ID, in the format: cdb-c1nl9rpv. Same instance ID as displayed in the ApsaraDB for Console page.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="internetUrl")
    def internet_url(self) -> str:
        """
        download link.
        """
        return pulumi.get(self, "internet_url")

    @property
    @pulumi.getter(name="intranetUrl")
    def intranet_url(self) -> str:
        """
        download link.
        """
        return pulumi.get(self, "intranet_url")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        binlog log backup file name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region where remote backup is located.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="remoteInfos")
    def remote_infos(self) -> Sequence['outputs.GetBinLogItemRemoteInfoResult']:
        """
        Binlog remote backup details.
        """
        return pulumi.get(self, "remote_infos")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Backup file size, unit: Byte.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Backup task status. Possible values are `SUCCESS`: backup succeeded, `FAILED`: backup failed, `RUNNING`: backup in progress.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Specific log type, possible values are: binlog - binary log.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBinLogItemRemoteInfoResult(dict):
    def __init__(__self__, *,
                 finish_time: str,
                 region: str,
                 start_time: str,
                 status: str,
                 sub_backup_ids: Sequence[int],
                 url: str):
        """
        :param str finish_time: End time of remote backup task.
        :param str region: The region where remote backup is located.
        :param str start_time: Start time of remote backup task.
        :param str status: Backup task status. Possible values are `SUCCESS`: backup succeeded, `FAILED`: backup failed, `RUNNING`: backup in progress.
        :param Sequence[int] sub_backup_ids: The ID of the remote backup subtask.
        :param str url: download link.
        """
        pulumi.set(__self__, "finish_time", finish_time)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_backup_ids", sub_backup_ids)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> str:
        """
        End time of remote backup task.
        """
        return pulumi.get(self, "finish_time")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region where remote backup is located.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Start time of remote backup task.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Backup task status. Possible values are `SUCCESS`: backup succeeded, `FAILED`: backup failed, `RUNNING`: backup in progress.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subBackupIds")
    def sub_backup_ids(self) -> Sequence[int]:
        """
        The ID of the remote backup subtask.
        """
        return pulumi.get(self, "sub_backup_ids")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        download link.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetCloneListItemResult(dict):
    def __init__(__self__, *,
                 clone_job_id: int,
                 dst_instance_id: str,
                 end_time: str,
                 new_region_id: int,
                 rollback_strategy: str,
                 rollback_target_time: str,
                 src_instance_id: str,
                 src_region_id: int,
                 start_time: str,
                 task_status: str):
        """
        :param int clone_job_id: Id of the task list corresponding to the clone task.
        :param str dst_instance_id: The newly spawned instance Id of the clone task.
        :param str end_time: Task end time.
        :param int new_region_id: Id of the region where the cloned instance is located.
        :param str rollback_strategy: The strategy used by the clone instance includes the following types: timepoint: specify the point-in-time rollback, backupset: specify the backup file rollback.
        :param str rollback_target_time: The time point when the clone instance is rolled back.
        :param str src_instance_id: The source instance Id of the clone task.
        :param int src_region_id: Id of the region where the source instance is located.
        :param str start_time: Task start time.
        :param str task_status: Task status, including the following status: initial, running, wait_complete, success, failed.
        """
        pulumi.set(__self__, "clone_job_id", clone_job_id)
        pulumi.set(__self__, "dst_instance_id", dst_instance_id)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "new_region_id", new_region_id)
        pulumi.set(__self__, "rollback_strategy", rollback_strategy)
        pulumi.set(__self__, "rollback_target_time", rollback_target_time)
        pulumi.set(__self__, "src_instance_id", src_instance_id)
        pulumi.set(__self__, "src_region_id", src_region_id)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "task_status", task_status)

    @property
    @pulumi.getter(name="cloneJobId")
    def clone_job_id(self) -> int:
        """
        Id of the task list corresponding to the clone task.
        """
        return pulumi.get(self, "clone_job_id")

    @property
    @pulumi.getter(name="dstInstanceId")
    def dst_instance_id(self) -> str:
        """
        The newly spawned instance Id of the clone task.
        """
        return pulumi.get(self, "dst_instance_id")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Task end time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="newRegionId")
    def new_region_id(self) -> int:
        """
        Id of the region where the cloned instance is located.
        """
        return pulumi.get(self, "new_region_id")

    @property
    @pulumi.getter(name="rollbackStrategy")
    def rollback_strategy(self) -> str:
        """
        The strategy used by the clone instance includes the following types: timepoint: specify the point-in-time rollback, backupset: specify the backup file rollback.
        """
        return pulumi.get(self, "rollback_strategy")

    @property
    @pulumi.getter(name="rollbackTargetTime")
    def rollback_target_time(self) -> str:
        """
        The time point when the clone instance is rolled back.
        """
        return pulumi.get(self, "rollback_target_time")

    @property
    @pulumi.getter(name="srcInstanceId")
    def src_instance_id(self) -> str:
        """
        The source instance Id of the clone task.
        """
        return pulumi.get(self, "src_instance_id")

    @property
    @pulumi.getter(name="srcRegionId")
    def src_region_id(self) -> int:
        """
        Id of the region where the source instance is located.
        """
        return pulumi.get(self, "src_region_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Task start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> str:
        """
        Task status, including the following status: initial, running, wait_complete, success, failed.
        """
        return pulumi.get(self, "task_status")


@pulumi.output_type
class GetDatabasesDatabaseListResult(dict):
    def __init__(__self__, *,
                 character_set: str,
                 database_name: str):
        """
        :param str character_set: character set type.
        :param str database_name: The name of database.
        """
        pulumi.set(__self__, "character_set", character_set)
        pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> str:
        """
        character set type.
        """
        return pulumi.get(self, "character_set")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The name of database.
        """
        return pulumi.get(self, "database_name")


@pulumi.output_type
class GetDefaultParamsParamListResult(dict):
    def __init__(__self__, *,
                 current_value: str,
                 default: str,
                 description: str,
                 enum_values: Sequence[str],
                 max: int,
                 min: int,
                 name: str,
                 need_reboot: int,
                 param_type: str):
        """
        :param str current_value: Param current value.
        :param str default: Param default value.
        :param str description: Param description.
        :param Sequence[str] enum_values: Params available values if type of param is enum.
        :param int max: Param maximum value if type of param is integer.
        :param int min: Param minimum value if type of param is integer.
        :param str name: Param key name.
        :param int need_reboot: Indicates weather the database instance reboot if param modified.
        :param str param_type: Type of param.
        """
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enum_values", enum_values)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "need_reboot", need_reboot)
        pulumi.set(__self__, "param_type", param_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        """
        Param current value.
        """
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter
    def default(self) -> str:
        """
        Param default value.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Param description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Sequence[str]:
        """
        Params available values if type of param is enum.
        """
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter
    def max(self) -> int:
        """
        Param maximum value if type of param is integer.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        """
        Param minimum value if type of param is integer.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Param key name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="needReboot")
    def need_reboot(self) -> int:
        """
        Indicates weather the database instance reboot if param modified.
        """
        return pulumi.get(self, "need_reboot")

    @property
    @pulumi.getter(name="paramType")
    def param_type(self) -> str:
        """
        Type of param.
        """
        return pulumi.get(self, "param_type")


@pulumi.output_type
class GetErrorLogItemResult(dict):
    def __init__(__self__, *,
                 content: str,
                 timestamp: int):
        """
        :param str content: error details.
        :param int timestamp: The time the error occurred.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        error details.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        """
        The time the error occurred.
        """
        return pulumi.get(self, "timestamp")


@pulumi.output_type
class GetInstanceInstanceListResult(dict):
    def __init__(__self__, *,
                 auto_renew_flag: int,
                 charge_type: str,
                 cpu_core_count: int,
                 create_time: str,
                 dead_line_time: str,
                 device_type: str,
                 dr_instance_ids: Sequence[str],
                 engine_version: str,
                 init_flag: int,
                 instance_name: str,
                 instance_role: str,
                 internet_host: str,
                 internet_port: int,
                 internet_status: int,
                 intranet_ip: str,
                 intranet_port: int,
                 master_instance_id: str,
                 memory_size: int,
                 mysql_id: str,
                 pay_type: int,
                 project_id: int,
                 ro_groups: Sequence['outputs.GetInstanceInstanceListRoGroupResult'],
                 ro_instance_ids: Sequence[str],
                 slave_sync_mode: int,
                 status: int,
                 subnet_id: str,
                 volume_size: int,
                 vpc_id: str,
                 zone: str):
        """
        :param int auto_renew_flag: Auto renew flag. NOTES: Only supported prepay instance.
        :param str charge_type: Pay type of instance, valid values are `PREPAID` and `POSTPAID`.
        :param int cpu_core_count: CPU count.
        :param str create_time: The time at which a instance is created.
        :param str dead_line_time: Expire date of instance. NOTES: Only supported prepay instance.
        :param str device_type: Supported instance model. `HA` - high available version; `Basic` - basic version.
        :param Sequence[str] dr_instance_ids: ID list of disaster-recovery type associated with the current instance.
        :param str engine_version: The version number of the database engine to use. Supported versions include 5.5/5.6/5.7/8.0.
        :param int init_flag: Initialization mark. Available values: `0` - Uninitialized; `1` - Initialized.
        :param str instance_name: Name of mysql instance.
        :param str instance_role: Instance type. Supported values include: `master` - master instance, `dr` - disaster recovery instance, and `ro` - read-only instance.
        :param str internet_host: Public network domain name.
        :param int internet_port: Public network port.
        :param int internet_status: Status of public network.
        :param str intranet_ip: Instance IP for internal access.
        :param int intranet_port: Transport layer port number for internal purpose.
        :param str master_instance_id: Indicates the master instance ID of recovery instances.
        :param int memory_size: Memory size (in MB).
        :param str mysql_id: Instance ID, such as `cdb-c1nl9rpv`. It is identical to the instance ID displayed in the database console page.
        :param int pay_type: It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance, `0`: prepay, `1`: postpaid.
        :param int project_id: Project ID to which the current instance belongs.
        :param Sequence['GetInstanceInstanceListRoGroupArgs'] ro_groups: read-only instance group.
        :param Sequence[str] ro_instance_ids: ID list of read-only type associated with the current instance.
        :param int slave_sync_mode: Data replication mode. `0` - Async replication; `1` - Semisync replication; `2` - Strongsync replication.
        :param int status: Instance status. Available values: `0` - Creating; `1` - Running; `4` - Isolating; `5` - Isolated.
        :param str subnet_id: ID of subnet to which the current instance belongs.
        :param int volume_size: Disk capacity (in GB).
        :param str vpc_id: ID of Virtual Private Cloud.
        :param str zone: Information of available zone.
        """
        pulumi.set(__self__, "auto_renew_flag", auto_renew_flag)
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "cpu_core_count", cpu_core_count)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "dead_line_time", dead_line_time)
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "dr_instance_ids", dr_instance_ids)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "init_flag", init_flag)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "instance_role", instance_role)
        pulumi.set(__self__, "internet_host", internet_host)
        pulumi.set(__self__, "internet_port", internet_port)
        pulumi.set(__self__, "internet_status", internet_status)
        pulumi.set(__self__, "intranet_ip", intranet_ip)
        pulumi.set(__self__, "intranet_port", intranet_port)
        pulumi.set(__self__, "master_instance_id", master_instance_id)
        pulumi.set(__self__, "memory_size", memory_size)
        pulumi.set(__self__, "mysql_id", mysql_id)
        pulumi.set(__self__, "pay_type", pay_type)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "ro_groups", ro_groups)
        pulumi.set(__self__, "ro_instance_ids", ro_instance_ids)
        pulumi.set(__self__, "slave_sync_mode", slave_sync_mode)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="autoRenewFlag")
    def auto_renew_flag(self) -> int:
        """
        Auto renew flag. NOTES: Only supported prepay instance.
        """
        return pulumi.get(self, "auto_renew_flag")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> str:
        """
        Pay type of instance, valid values are `PREPAID` and `POSTPAID`.
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="cpuCoreCount")
    def cpu_core_count(self) -> int:
        """
        CPU count.
        """
        return pulumi.get(self, "cpu_core_count")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The time at which a instance is created.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deadLineTime")
    def dead_line_time(self) -> str:
        """
        Expire date of instance. NOTES: Only supported prepay instance.
        """
        return pulumi.get(self, "dead_line_time")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> str:
        """
        Supported instance model. `HA` - high available version; `Basic` - basic version.
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter(name="drInstanceIds")
    def dr_instance_ids(self) -> Sequence[str]:
        """
        ID list of disaster-recovery type associated with the current instance.
        """
        return pulumi.get(self, "dr_instance_ids")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        """
        The version number of the database engine to use. Supported versions include 5.5/5.6/5.7/8.0.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="initFlag")
    def init_flag(self) -> int:
        """
        Initialization mark. Available values: `0` - Uninitialized; `1` - Initialized.
        """
        return pulumi.get(self, "init_flag")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Name of mysql instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="instanceRole")
    def instance_role(self) -> str:
        """
        Instance type. Supported values include: `master` - master instance, `dr` - disaster recovery instance, and `ro` - read-only instance.
        """
        return pulumi.get(self, "instance_role")

    @property
    @pulumi.getter(name="internetHost")
    def internet_host(self) -> str:
        """
        Public network domain name.
        """
        return pulumi.get(self, "internet_host")

    @property
    @pulumi.getter(name="internetPort")
    def internet_port(self) -> int:
        """
        Public network port.
        """
        return pulumi.get(self, "internet_port")

    @property
    @pulumi.getter(name="internetStatus")
    def internet_status(self) -> int:
        """
        Status of public network.
        """
        return pulumi.get(self, "internet_status")

    @property
    @pulumi.getter(name="intranetIp")
    def intranet_ip(self) -> str:
        """
        Instance IP for internal access.
        """
        return pulumi.get(self, "intranet_ip")

    @property
    @pulumi.getter(name="intranetPort")
    def intranet_port(self) -> int:
        """
        Transport layer port number for internal purpose.
        """
        return pulumi.get(self, "intranet_port")

    @property
    @pulumi.getter(name="masterInstanceId")
    def master_instance_id(self) -> str:
        """
        Indicates the master instance ID of recovery instances.
        """
        return pulumi.get(self, "master_instance_id")

    @property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> int:
        """
        Memory size (in MB).
        """
        return pulumi.get(self, "memory_size")

    @property
    @pulumi.getter(name="mysqlId")
    def mysql_id(self) -> str:
        """
        Instance ID, such as `cdb-c1nl9rpv`. It is identical to the instance ID displayed in the database console page.
        """
        return pulumi.get(self, "mysql_id")

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> int:
        """
        It has been deprecated from version 1.36.0. Please use `charge_type` instead. Pay type of instance, `0`: prepay, `1`: postpaid.
        """
        return pulumi.get(self, "pay_type")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        Project ID to which the current instance belongs.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="roGroups")
    def ro_groups(self) -> Sequence['outputs.GetInstanceInstanceListRoGroupResult']:
        """
        read-only instance group.
        """
        return pulumi.get(self, "ro_groups")

    @property
    @pulumi.getter(name="roInstanceIds")
    def ro_instance_ids(self) -> Sequence[str]:
        """
        ID list of read-only type associated with the current instance.
        """
        return pulumi.get(self, "ro_instance_ids")

    @property
    @pulumi.getter(name="slaveSyncMode")
    def slave_sync_mode(self) -> int:
        """
        Data replication mode. `0` - Async replication; `1` - Semisync replication; `2` - Strongsync replication.
        """
        return pulumi.get(self, "slave_sync_mode")

    @property
    @pulumi.getter
    def status(self) -> int:
        """
        Instance status. Available values: `0` - Creating; `1` - Running; `4` - Isolating; `5` - Isolated.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        ID of subnet to which the current instance belongs.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> int:
        """
        Disk capacity (in GB).
        """
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        ID of Virtual Private Cloud.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Information of available zone.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetInstanceInstanceListRoGroupResult(dict):
    def __init__(__self__, *,
                 group_id: str,
                 instance_ids: Sequence[str]):
        """
        :param str group_id: Group ID, such as `cdbrg-pz7vg37p`.
        :param Sequence[str] instance_ids: ID list of read-only type associated with the current instance.
        """
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "instance_ids", instance_ids)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        """
        Group ID, such as `cdbrg-pz7vg37p`.
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Sequence[str]:
        """
        ID list of read-only type associated with the current instance.
        """
        return pulumi.get(self, "instance_ids")


@pulumi.output_type
class GetInstanceParamRecordItemResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 is_success: bool,
                 modify_time: str,
                 new_value: str,
                 old_value: str,
                 param_name: str):
        """
        :param str instance_id: Instance ID, the format is: cdb-c1nl9rpv, which is the same as the instance ID displayed on the cloud database console page, and you can use the [query instance list] (https://cloud.tencent.com/document/api/236/15872) interface Gets the value of the field InstanceId in the output parameter.
        :param bool is_success: Whether the parameter is modified successfully.
        :param str modify_time: Change the time.
        :param str new_value: The modified value of the parameter.
        :param str old_value: The value of the parameter before modification.
        :param str param_name: parameter name.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "is_success", is_success)
        pulumi.set(__self__, "modify_time", modify_time)
        pulumi.set(__self__, "new_value", new_value)
        pulumi.set(__self__, "old_value", old_value)
        pulumi.set(__self__, "param_name", param_name)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance ID, the format is: cdb-c1nl9rpv, which is the same as the instance ID displayed on the cloud database console page, and you can use the [query instance list] (https://cloud.tencent.com/document/api/236/15872) interface Gets the value of the field InstanceId in the output parameter.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isSuccess")
    def is_success(self) -> bool:
        """
        Whether the parameter is modified successfully.
        """
        return pulumi.get(self, "is_success")

    @property
    @pulumi.getter(name="modifyTime")
    def modify_time(self) -> str:
        """
        Change the time.
        """
        return pulumi.get(self, "modify_time")

    @property
    @pulumi.getter(name="newValue")
    def new_value(self) -> str:
        """
        The modified value of the parameter.
        """
        return pulumi.get(self, "new_value")

    @property
    @pulumi.getter(name="oldValue")
    def old_value(self) -> str:
        """
        The value of the parameter before modification.
        """
        return pulumi.get(self, "old_value")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> str:
        """
        parameter name.
        """
        return pulumi.get(self, "param_name")


@pulumi.output_type
class GetInstanceRebootTimeItemResult(dict):
    def __init__(__self__, *,
                 instance_id: str,
                 time_in_seconds: int):
        """
        :param str instance_id: Instance ID, the format is: cdb-c1nl9rpv, which is the same as the instance ID displayed on the cloud database console page.
        :param int time_in_seconds: expected restart time.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "time_in_seconds", time_in_seconds)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Instance ID, the format is: cdb-c1nl9rpv, which is the same as the instance ID displayed on the cloud database console page.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="timeInSeconds")
    def time_in_seconds(self) -> int:
        """
        expected restart time.
        """
        return pulumi.get(self, "time_in_seconds")


@pulumi.output_type
class GetParameterListParameterListResult(dict):
    def __init__(__self__, *,
                 current_value: str,
                 default_value: str,
                 description: str,
                 enum_values: Sequence[str],
                 max: int,
                 min: int,
                 need_reboot: int,
                 parameter_name: str,
                 parameter_type: str):
        """
        :param str current_value: Current value.
        :param str default_value: Default value.
        :param str description: Parameter specification description.
        :param Sequence[str] enum_values: Enumerated value.
        :param int max: Maximum value for the parameter.
        :param int min: Minimum value for the parameter.
        :param int need_reboot: Indicates whether reboot is needed to enable the new parameters.
        :param str parameter_name: Parameter name.
        :param str parameter_type: Parameter type.
        """
        pulumi.set(__self__, "current_value", current_value)
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enum_values", enum_values)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "need_reboot", need_reboot)
        pulumi.set(__self__, "parameter_name", parameter_name)
        pulumi.set(__self__, "parameter_type", parameter_type)

    @property
    @pulumi.getter(name="currentValue")
    def current_value(self) -> str:
        """
        Current value.
        """
        return pulumi.get(self, "current_value")

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        """
        Default value.
        """
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Parameter specification description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enumValues")
    def enum_values(self) -> Sequence[str]:
        """
        Enumerated value.
        """
        return pulumi.get(self, "enum_values")

    @property
    @pulumi.getter
    def max(self) -> int:
        """
        Maximum value for the parameter.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        """
        Minimum value for the parameter.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter(name="needReboot")
    def need_reboot(self) -> int:
        """
        Indicates whether reboot is needed to enable the new parameters.
        """
        return pulumi.get(self, "need_reboot")

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> str:
        """
        Parameter name.
        """
        return pulumi.get(self, "parameter_name")

    @property
    @pulumi.getter(name="parameterType")
    def parameter_type(self) -> str:
        """
        Parameter type.
        """
        return pulumi.get(self, "parameter_type")


@pulumi.output_type
class GetProjectSecurityGroupGroupResult(dict):
    def __init__(__self__, *,
                 create_time: str,
                 inbounds: Sequence['outputs.GetProjectSecurityGroupGroupInboundResult'],
                 outbounds: Sequence['outputs.GetProjectSecurityGroupGroupOutboundResult'],
                 project_id: int,
                 security_group_id: str,
                 security_group_name: str,
                 security_group_remark: str):
        """
        :param str create_time: Creation time, time format: yyyy-mm-dd hh:mm:sss.
        :param Sequence['GetProjectSecurityGroupGroupInboundArgs'] inbounds: inbound rules.
        :param Sequence['GetProjectSecurityGroupGroupOutboundArgs'] outbounds: outbound rules.
        :param int project_id: project id.
        :param str security_group_id: Security group ID.
        :param str security_group_name: Security group name.
        :param str security_group_remark: Security group remark.
        """
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "inbounds", inbounds)
        pulumi.set(__self__, "outbounds", outbounds)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)
        pulumi.set(__self__, "security_group_remark", security_group_remark)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Creation time, time format: yyyy-mm-dd hh:mm:sss.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def inbounds(self) -> Sequence['outputs.GetProjectSecurityGroupGroupInboundResult']:
        """
        inbound rules.
        """
        return pulumi.get(self, "inbounds")

    @property
    @pulumi.getter
    def outbounds(self) -> Sequence['outputs.GetProjectSecurityGroupGroupOutboundResult']:
        """
        outbound rules.
        """
        return pulumi.get(self, "outbounds")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        """
        project id.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        """
        Security group ID.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        """
        Security group name.
        """
        return pulumi.get(self, "security_group_name")

    @property
    @pulumi.getter(name="securityGroupRemark")
    def security_group_remark(self) -> str:
        """
        Security group remark.
        """
        return pulumi.get(self, "security_group_remark")


@pulumi.output_type
class GetProjectSecurityGroupGroupInboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 desc: str,
                 dir: str,
                 ip_protocol: str,
                 port_range: str):
        """
        :param str action: Policy, ACCEPT or DROP.
        :param str cidr_ip: Destination IP or IP segment, such as 172.16.0.0/12.
        :param str desc: Rule description.
        :param str dir: The direction defined by the rule, the inbound rule is OUTPUT.
        :param str ip_protocol: Network protocol, support UDP, TCP, etc.
        :param str port_range: port or port range.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "desc", desc)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy, ACCEPT or DROP.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        Destination IP or IP segment, such as 172.16.0.0/12.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter
    def desc(self) -> str:
        """
        Rule description.
        """
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter
    def dir(self) -> str:
        """
        The direction defined by the rule, the inbound rule is OUTPUT.
        """
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        """
        Network protocol, support UDP, TCP, etc.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        port or port range.
        """
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetProjectSecurityGroupGroupOutboundResult(dict):
    def __init__(__self__, *,
                 action: str,
                 cidr_ip: str,
                 desc: str,
                 dir: str,
                 ip_protocol: str,
                 port_range: str):
        """
        :param str action: Policy, ACCEPT or DROP.
        :param str cidr_ip: Destination IP or IP segment, such as 172.16.0.0/12.
        :param str desc: Rule description.
        :param str dir: The direction defined by the rule, the inbound rule is OUTPUT.
        :param str ip_protocol: Network protocol, support UDP, TCP, etc.
        :param str port_range: port or port range.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "desc", desc)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "port_range", port_range)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        Policy, ACCEPT or DROP.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        Destination IP or IP segment, such as 172.16.0.0/12.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter
    def desc(self) -> str:
        """
        Rule description.
        """
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter
    def dir(self) -> str:
        """
        The direction defined by the rule, the inbound rule is OUTPUT.
        """
        return pulumi.get(self, "dir")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        """
        Network protocol, support UDP, TCP, etc.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        port or port range.
        """
        return pulumi.get(self, "port_range")


@pulumi.output_type
class GetProxyCustomCustomConfResult(dict):
    def __init__(__self__, *,
                 cpu: int,
                 device: str,
                 device_type: str,
                 memory: int,
                 type: str):
        """
        :param int cpu: number of cores.
        :param str device: equipment.
        :param str device_type: Equipment type.
        :param int memory: Memory.
        :param str type: type.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "device_type", device_type)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        number of cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def device(self) -> str:
        """
        equipment.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> str:
        """
        Equipment type.
        """
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter
    def memory(self) -> int:
        """
        Memory.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetProxyCustomWeightRuleResult(dict):
    def __init__(__self__, *,
                 less_than: int,
                 weight: int):
        """
        :param int less_than: division ceiling.
        :param int weight: weight limit.
        """
        pulumi.set(__self__, "less_than", less_than)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="lessThan")
    def less_than(self) -> int:
        """
        division ceiling.
        """
        return pulumi.get(self, "less_than")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        weight limit.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetRollbackRangeTimeItemResult(dict):
    def __init__(__self__, *,
                 code: int,
                 instance_id: str,
                 message: str,
                 times: Sequence['outputs.GetRollbackRangeTimeItemTimeResult']):
        """
        :param int code: Query database error code.
        :param str instance_id: A list of instance IDs. The format of a single instance ID is: cdb-c1nl9rpv. Same as the instance ID displayed in the cloud database console page.
        :param str message: Query database error information.
        :param Sequence['GetRollbackRangeTimeItemTimeArgs'] times: Retrievable time range.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "times", times)

    @property
    @pulumi.getter
    def code(self) -> int:
        """
        Query database error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        A list of instance IDs. The format of a single instance ID is: cdb-c1nl9rpv. Same as the instance ID displayed in the cloud database console page.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Query database error information.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def times(self) -> Sequence['outputs.GetRollbackRangeTimeItemTimeResult']:
        """
        Retrievable time range.
        """
        return pulumi.get(self, "times")


@pulumi.output_type
class GetRollbackRangeTimeItemTimeResult(dict):
    def __init__(__self__, *,
                 begin: str,
                 end: str):
        """
        :param str begin: Instance rollback start time, time format: 2016-10-29 01:06:04.
        :param str end: End time of instance rollback, time format: 2016-11-02 11:44:47.
        """
        pulumi.set(__self__, "begin", begin)
        pulumi.set(__self__, "end", end)

    @property
    @pulumi.getter
    def begin(self) -> str:
        """
        Instance rollback start time, time format: 2016-10-29 01:06:04.
        """
        return pulumi.get(self, "begin")

    @property
    @pulumi.getter
    def end(self) -> str:
        """
        End time of instance rollback, time format: 2016-11-02 11:44:47.
        """
        return pulumi.get(self, "end")


@pulumi.output_type
class GetSlowLogDataItemResult(dict):
    def __init__(__self__, *,
                 database: str,
                 lock_time: float,
                 md5: str,
                 query_time: float,
                 rows_examined: int,
                 rows_sent: int,
                 sql_template: str,
                 sql_text: str,
                 timestamp: int,
                 user_host: str,
                 user_name: str):
        """
        :param str database: database name.
        :param float lock_time: Lock duration (seconds).
        :param str md5: The md5 of the Sql statement.
        :param float query_time: Sql execution time (seconds).
        :param int rows_examined: The number of rows to scan.
        :param int rows_sent: The number of rows in the result set.
        :param str sql_template: Sql template.
        :param str sql_text: Sql statement.
        :param int timestamp: Sql execution time.
        :param str user_host: client address.
        :param str user_name: user name.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "lock_time", lock_time)
        pulumi.set(__self__, "md5", md5)
        pulumi.set(__self__, "query_time", query_time)
        pulumi.set(__self__, "rows_examined", rows_examined)
        pulumi.set(__self__, "rows_sent", rows_sent)
        pulumi.set(__self__, "sql_template", sql_template)
        pulumi.set(__self__, "sql_text", sql_text)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "user_host", user_host)
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def database(self) -> str:
        """
        database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="lockTime")
    def lock_time(self) -> float:
        """
        Lock duration (seconds).
        """
        return pulumi.get(self, "lock_time")

    @property
    @pulumi.getter
    def md5(self) -> str:
        """
        The md5 of the Sql statement.
        """
        return pulumi.get(self, "md5")

    @property
    @pulumi.getter(name="queryTime")
    def query_time(self) -> float:
        """
        Sql execution time (seconds).
        """
        return pulumi.get(self, "query_time")

    @property
    @pulumi.getter(name="rowsExamined")
    def rows_examined(self) -> int:
        """
        The number of rows to scan.
        """
        return pulumi.get(self, "rows_examined")

    @property
    @pulumi.getter(name="rowsSent")
    def rows_sent(self) -> int:
        """
        The number of rows in the result set.
        """
        return pulumi.get(self, "rows_sent")

    @property
    @pulumi.getter(name="sqlTemplate")
    def sql_template(self) -> str:
        """
        Sql template.
        """
        return pulumi.get(self, "sql_template")

    @property
    @pulumi.getter(name="sqlText")
    def sql_text(self) -> str:
        """
        Sql statement.
        """
        return pulumi.get(self, "sql_text")

    @property
    @pulumi.getter
    def timestamp(self) -> int:
        """
        Sql execution time.
        """
        return pulumi.get(self, "timestamp")

    @property
    @pulumi.getter(name="userHost")
    def user_host(self) -> str:
        """
        client address.
        """
        return pulumi.get(self, "user_host")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        user name.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetSlowLogItemResult(dict):
    def __init__(__self__, *,
                 date: str,
                 internet_url: str,
                 intranet_url: str,
                 name: str,
                 size: int,
                 type: str):
        """
        :param str date: Backup snapshot time, time format: 2016-03-17 02:10:37.
        :param str internet_url: External network download address.
        :param str intranet_url: Intranet download address.
        :param str name: backup file name.
        :param int size: Backup file size, unit: Byte.
        :param str type: Log specific type, possible values: slowlog - slow log.
        """
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "internet_url", internet_url)
        pulumi.set(__self__, "intranet_url", intranet_url)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def date(self) -> str:
        """
        Backup snapshot time, time format: 2016-03-17 02:10:37.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter(name="internetUrl")
    def internet_url(self) -> str:
        """
        External network download address.
        """
        return pulumi.get(self, "internet_url")

    @property
    @pulumi.getter(name="intranetUrl")
    def intranet_url(self) -> str:
        """
        Intranet download address.
        """
        return pulumi.get(self, "intranet_url")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        backup file name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Backup file size, unit: Byte.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Log specific type, possible values: slowlog - slow log.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSwitchRecordItemResult(dict):
    def __init__(__self__, *,
                 switch_time: str,
                 switch_type: str):
        """
        :param str switch_time: Switching time, the format is: 2017-09-03 01:34:31.
        :param str switch_type: Switch type, possible return values: TRANSFER - data migration; MASTER2SLAVE - master-standby switch; RECOVERY - master-slave recovery.
        """
        pulumi.set(__self__, "switch_time", switch_time)
        pulumi.set(__self__, "switch_type", switch_type)

    @property
    @pulumi.getter(name="switchTime")
    def switch_time(self) -> str:
        """
        Switching time, the format is: 2017-09-03 01:34:31.
        """
        return pulumi.get(self, "switch_time")

    @property
    @pulumi.getter(name="switchType")
    def switch_type(self) -> str:
        """
        Switch type, possible return values: TRANSFER - data migration; MASTER2SLAVE - master-standby switch; RECOVERY - master-slave recovery.
        """
        return pulumi.get(self, "switch_type")


@pulumi.output_type
class GetUserTaskItemResult(dict):
    def __init__(__self__, *,
                 async_request_id: str,
                 code: int,
                 end_time: str,
                 instance_ids: Sequence[str],
                 job_id: int,
                 message: str,
                 progress: int,
                 start_time: str,
                 task_status: str,
                 task_type: str):
        """
        :param str async_request_id: Asynchronous task request ID, the AsyncRequestId returned by executing cloud database-related operations.
        :param int code: error code.
        :param str end_time: Instance task end time.
        :param Sequence[str] instance_ids: The instance ID associated with the task. Note: This field may return null, indicating that no valid value can be obtained.
        :param int job_id: Instance task ID.
        :param str message: error message.
        :param int progress: Instance task progress.
        :param str start_time: Instance task start time.
        :param str task_status: Task status. If no value is passed, all task statuses will be queried. Supported values include: `UNDEFINED` - undefined; `INITIAL` - initialization; `RUNNING` - running; `SUCCEED` - the execution was successful; `FAILED` - execution failed; `KILLED` - terminated; `REMOVED` - removed; `PAUSED` - Paused.
        :param str task_type: Instance task type, possible values include:ROLLBACK - database rollback;SQL OPERATION - SQL operation;IMPORT DATA - data import;MODIFY PARAM - parameter setting;INITIAL - initialize the cloud database instance;REBOOT - restarts the cloud database instance;OPEN GTID - open the cloud database instance GTID;UPGRADE RO - read-only instance upgrade;BATCH ROLLBACK - database batch rollback;UPGRADE MASTER - master upgrade;DROP TABLES - delete cloud database tables;SWITCH DR TO MASTER - The disaster recovery instance.
        """
        pulumi.set(__self__, "async_request_id", async_request_id)
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "instance_ids", instance_ids)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "task_status", task_status)
        pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="asyncRequestId")
    def async_request_id(self) -> str:
        """
        Asynchronous task request ID, the AsyncRequestId returned by executing cloud database-related operations.
        """
        return pulumi.get(self, "async_request_id")

    @property
    @pulumi.getter
    def code(self) -> int:
        """
        error code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        Instance task end time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="instanceIds")
    def instance_ids(self) -> Sequence[str]:
        """
        The instance ID associated with the task. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "instance_ids")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> int:
        """
        Instance task ID.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        error message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def progress(self) -> int:
        """
        Instance task progress.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        Instance task start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="taskStatus")
    def task_status(self) -> str:
        """
        Task status. If no value is passed, all task statuses will be queried. Supported values include: `UNDEFINED` - undefined; `INITIAL` - initialization; `RUNNING` - running; `SUCCEED` - the execution was successful; `FAILED` - execution failed; `KILLED` - terminated; `REMOVED` - removed; `PAUSED` - Paused.
        """
        return pulumi.get(self, "task_status")

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> str:
        """
        Instance task type, possible values include:ROLLBACK - database rollback;SQL OPERATION - SQL operation;IMPORT DATA - data import;MODIFY PARAM - parameter setting;INITIAL - initialize the cloud database instance;REBOOT - restarts the cloud database instance;OPEN GTID - open the cloud database instance GTID;UPGRADE RO - read-only instance upgrade;BATCH ROLLBACK - database batch rollback;UPGRADE MASTER - master upgrade;DROP TABLES - delete cloud database tables;SWITCH DR TO MASTER - The disaster recovery instance.
        """
        return pulumi.get(self, "task_type")


@pulumi.output_type
class GetZoneConfigListResult(dict):
    def __init__(__self__, *,
                 disaster_recovery_zones: Sequence[str],
                 engine_versions: Sequence[str],
                 first_slave_zones: Sequence[str],
                 hour_instance_sale_max_num: int,
                 is_default: int,
                 is_support_disaster_recovery: int,
                 is_support_vpc: int,
                 name: str,
                 pay_types: Sequence[int],
                 remote_ro_zones: Sequence[str],
                 second_slave_zones: Sequence[str],
                 sells: Sequence['outputs.GetZoneConfigListSellResult'],
                 slave_deploy_modes: Sequence[int],
                 support_slave_sync_modes: Sequence[int]):
        """
        :param Sequence[str] disaster_recovery_zones: Information about available zones of recovery.
        :param Sequence[str] engine_versions: The version number of the database engine to use. Supported versions include `5.5`/`5.6`/`5.7`.
        :param Sequence[str] first_slave_zones: Zone information about first slave instance.
        :param int is_default: Indicates whether the current DC is the default DC for the region. Possible returned values: `0` - no; `1` - yes.
        :param int is_support_disaster_recovery: Indicates whether recovery is supported: `0` - No; `1` - Yes.
        :param int is_support_vpc: Indicates whether VPC is supported: `0` - No; `1` - Yes.
        :param str name: The name of available zone which is equal to a specific datacenter.
        :param Sequence[str] remote_ro_zones: Zone information about remote ro instance.
        :param Sequence[str] second_slave_zones: Zone information about second slave instance.
        :param Sequence['GetZoneConfigListSellArgs'] sells: A list of supported instance types for sell:
        :param Sequence[int] slave_deploy_modes: Availability zone deployment method. Available values: `0` - Single availability zone; `1` - Multiple availability zones.
        :param Sequence[int] support_slave_sync_modes: Data replication mode. `0` - Async replication; `1` - Semisync replication; `2` - Strongsync replication.
        """
        pulumi.set(__self__, "disaster_recovery_zones", disaster_recovery_zones)
        pulumi.set(__self__, "engine_versions", engine_versions)
        pulumi.set(__self__, "first_slave_zones", first_slave_zones)
        pulumi.set(__self__, "hour_instance_sale_max_num", hour_instance_sale_max_num)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "is_support_disaster_recovery", is_support_disaster_recovery)
        pulumi.set(__self__, "is_support_vpc", is_support_vpc)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pay_types", pay_types)
        pulumi.set(__self__, "remote_ro_zones", remote_ro_zones)
        pulumi.set(__self__, "second_slave_zones", second_slave_zones)
        pulumi.set(__self__, "sells", sells)
        pulumi.set(__self__, "slave_deploy_modes", slave_deploy_modes)
        pulumi.set(__self__, "support_slave_sync_modes", support_slave_sync_modes)

    @property
    @pulumi.getter(name="disasterRecoveryZones")
    def disaster_recovery_zones(self) -> Sequence[str]:
        """
        Information about available zones of recovery.
        """
        return pulumi.get(self, "disaster_recovery_zones")

    @property
    @pulumi.getter(name="engineVersions")
    def engine_versions(self) -> Sequence[str]:
        """
        The version number of the database engine to use. Supported versions include `5.5`/`5.6`/`5.7`.
        """
        return pulumi.get(self, "engine_versions")

    @property
    @pulumi.getter(name="firstSlaveZones")
    def first_slave_zones(self) -> Sequence[str]:
        """
        Zone information about first slave instance.
        """
        return pulumi.get(self, "first_slave_zones")

    @property
    @pulumi.getter(name="hourInstanceSaleMaxNum")
    def hour_instance_sale_max_num(self) -> int:
        return pulumi.get(self, "hour_instance_sale_max_num")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> int:
        """
        Indicates whether the current DC is the default DC for the region. Possible returned values: `0` - no; `1` - yes.
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="isSupportDisasterRecovery")
    def is_support_disaster_recovery(self) -> int:
        """
        Indicates whether recovery is supported: `0` - No; `1` - Yes.
        """
        return pulumi.get(self, "is_support_disaster_recovery")

    @property
    @pulumi.getter(name="isSupportVpc")
    def is_support_vpc(self) -> int:
        """
        Indicates whether VPC is supported: `0` - No; `1` - Yes.
        """
        return pulumi.get(self, "is_support_vpc")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of available zone which is equal to a specific datacenter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="payTypes")
    def pay_types(self) -> Sequence[int]:
        return pulumi.get(self, "pay_types")

    @property
    @pulumi.getter(name="remoteRoZones")
    def remote_ro_zones(self) -> Sequence[str]:
        """
        Zone information about remote ro instance.
        """
        return pulumi.get(self, "remote_ro_zones")

    @property
    @pulumi.getter(name="secondSlaveZones")
    def second_slave_zones(self) -> Sequence[str]:
        """
        Zone information about second slave instance.
        """
        return pulumi.get(self, "second_slave_zones")

    @property
    @pulumi.getter
    def sells(self) -> Sequence['outputs.GetZoneConfigListSellResult']:
        """
        A list of supported instance types for sell:
        """
        return pulumi.get(self, "sells")

    @property
    @pulumi.getter(name="slaveDeployModes")
    def slave_deploy_modes(self) -> Sequence[int]:
        """
        Availability zone deployment method. Available values: `0` - Single availability zone; `1` - Multiple availability zones.
        """
        return pulumi.get(self, "slave_deploy_modes")

    @property
    @pulumi.getter(name="supportSlaveSyncModes")
    def support_slave_sync_modes(self) -> Sequence[int]:
        """
        Data replication mode. `0` - Async replication; `1` - Semisync replication; `2` - Strongsync replication.
        """
        return pulumi.get(self, "support_slave_sync_modes")


@pulumi.output_type
class GetZoneConfigListSellResult(dict):
    def __init__(__self__, *,
                 cdb_type: str,
                 cpu: int,
                 info: str,
                 max_volume_size: int,
                 mem_size: int,
                 min_volume_size: int,
                 qps: int,
                 volume_step: int):
        """
        :param str cdb_type: Instance type, the possible value ranges are: `UNIVERSAL` (universal type), `EXCLUSIVE` (exclusive type), `BASIC` (basic type), `BASIC_V2` (basic type v2).
        :param int cpu: Number of CPU cores.
        :param str info: Application Scenario Description.
        :param int max_volume_size: Maximum disk size (in GB).
        :param int mem_size: Memory size (in MB).
        :param int min_volume_size: Minimum disk size (in GB).
        :param int qps: Queries per second.
        :param int volume_step: Disk increment (in GB).
        """
        pulumi.set(__self__, "cdb_type", cdb_type)
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "info", info)
        pulumi.set(__self__, "max_volume_size", max_volume_size)
        pulumi.set(__self__, "mem_size", mem_size)
        pulumi.set(__self__, "min_volume_size", min_volume_size)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "volume_step", volume_step)

    @property
    @pulumi.getter(name="cdbType")
    def cdb_type(self) -> str:
        """
        Instance type, the possible value ranges are: `UNIVERSAL` (universal type), `EXCLUSIVE` (exclusive type), `BASIC` (basic type), `BASIC_V2` (basic type v2).
        """
        return pulumi.get(self, "cdb_type")

    @property
    @pulumi.getter
    def cpu(self) -> int:
        """
        Number of CPU cores.
        """
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter
    def info(self) -> str:
        """
        Application Scenario Description.
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="maxVolumeSize")
    def max_volume_size(self) -> int:
        """
        Maximum disk size (in GB).
        """
        return pulumi.get(self, "max_volume_size")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> int:
        """
        Memory size (in MB).
        """
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter(name="minVolumeSize")
    def min_volume_size(self) -> int:
        """
        Minimum disk size (in GB).
        """
        return pulumi.get(self, "min_volume_size")

    @property
    @pulumi.getter
    def qps(self) -> int:
        """
        Queries per second.
        """
        return pulumi.get(self, "qps")

    @property
    @pulumi.getter(name="volumeStep")
    def volume_step(self) -> int:
        """
        Disk increment (in GB).
        """
        return pulumi.get(self, "volume_step")


