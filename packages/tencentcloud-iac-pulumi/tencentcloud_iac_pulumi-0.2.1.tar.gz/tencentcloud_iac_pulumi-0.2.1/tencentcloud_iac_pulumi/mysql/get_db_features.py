# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetDbFeaturesResult',
    'AwaitableGetDbFeaturesResult',
    'get_db_features',
    'get_db_features_output',
]

@pulumi.output_type
class GetDbFeaturesResult:
    """
    A collection of values returned by getDbFeatures.
    """
    def __init__(__self__, audit_need_upgrade=None, current_sub_version=None, encryption_need_upgrade=None, id=None, instance_id=None, is_remote_ro=None, is_support_audit=None, is_support_encryption=None, is_support_update_sub_version=None, master_region=None, result_output_file=None, target_sub_version=None):
        if audit_need_upgrade and not isinstance(audit_need_upgrade, bool):
            raise TypeError("Expected argument 'audit_need_upgrade' to be a bool")
        pulumi.set(__self__, "audit_need_upgrade", audit_need_upgrade)
        if current_sub_version and not isinstance(current_sub_version, str):
            raise TypeError("Expected argument 'current_sub_version' to be a str")
        pulumi.set(__self__, "current_sub_version", current_sub_version)
        if encryption_need_upgrade and not isinstance(encryption_need_upgrade, bool):
            raise TypeError("Expected argument 'encryption_need_upgrade' to be a bool")
        pulumi.set(__self__, "encryption_need_upgrade", encryption_need_upgrade)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if is_remote_ro and not isinstance(is_remote_ro, bool):
            raise TypeError("Expected argument 'is_remote_ro' to be a bool")
        pulumi.set(__self__, "is_remote_ro", is_remote_ro)
        if is_support_audit and not isinstance(is_support_audit, bool):
            raise TypeError("Expected argument 'is_support_audit' to be a bool")
        pulumi.set(__self__, "is_support_audit", is_support_audit)
        if is_support_encryption and not isinstance(is_support_encryption, bool):
            raise TypeError("Expected argument 'is_support_encryption' to be a bool")
        pulumi.set(__self__, "is_support_encryption", is_support_encryption)
        if is_support_update_sub_version and not isinstance(is_support_update_sub_version, bool):
            raise TypeError("Expected argument 'is_support_update_sub_version' to be a bool")
        pulumi.set(__self__, "is_support_update_sub_version", is_support_update_sub_version)
        if master_region and not isinstance(master_region, str):
            raise TypeError("Expected argument 'master_region' to be a str")
        pulumi.set(__self__, "master_region", master_region)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if target_sub_version and not isinstance(target_sub_version, str):
            raise TypeError("Expected argument 'target_sub_version' to be a str")
        pulumi.set(__self__, "target_sub_version", target_sub_version)

    @property
    @pulumi.getter(name="auditNeedUpgrade")
    def audit_need_upgrade(self) -> bool:
        """
        Whether to enable auditing needs to upgrade the kernel version.
        """
        return pulumi.get(self, "audit_need_upgrade")

    @property
    @pulumi.getter(name="currentSubVersion")
    def current_sub_version(self) -> str:
        """
        Current kernel version.
        """
        return pulumi.get(self, "current_sub_version")

    @property
    @pulumi.getter(name="encryptionNeedUpgrade")
    def encryption_need_upgrade(self) -> bool:
        """
        Whether to enable encryption needs to upgrade the kernel version.
        """
        return pulumi.get(self, "encryption_need_upgrade")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isRemoteRo")
    def is_remote_ro(self) -> bool:
        """
        Whether it is a remote read-only instance.
        """
        return pulumi.get(self, "is_remote_ro")

    @property
    @pulumi.getter(name="isSupportAudit")
    def is_support_audit(self) -> bool:
        """
        Whether to support the database audit function.
        """
        return pulumi.get(self, "is_support_audit")

    @property
    @pulumi.getter(name="isSupportEncryption")
    def is_support_encryption(self) -> bool:
        """
        Whether to support the database encryption function.
        """
        return pulumi.get(self, "is_support_encryption")

    @property
    @pulumi.getter(name="isSupportUpdateSubVersion")
    def is_support_update_sub_version(self) -> bool:
        """
        Whether to support minor version upgrades.
        """
        return pulumi.get(self, "is_support_update_sub_version")

    @property
    @pulumi.getter(name="masterRegion")
    def master_region(self) -> str:
        """
        The region where the master instance is located.
        """
        return pulumi.get(self, "master_region")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="targetSubVersion")
    def target_sub_version(self) -> str:
        """
        Available kernel versions for upgrade.
        """
        return pulumi.get(self, "target_sub_version")


class AwaitableGetDbFeaturesResult(GetDbFeaturesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDbFeaturesResult(
            audit_need_upgrade=self.audit_need_upgrade,
            current_sub_version=self.current_sub_version,
            encryption_need_upgrade=self.encryption_need_upgrade,
            id=self.id,
            instance_id=self.instance_id,
            is_remote_ro=self.is_remote_ro,
            is_support_audit=self.is_support_audit,
            is_support_encryption=self.is_support_encryption,
            is_support_update_sub_version=self.is_support_update_sub_version,
            master_region=self.master_region,
            result_output_file=self.result_output_file,
            target_sub_version=self.target_sub_version)


def get_db_features(instance_id: Optional[str] = None,
                    result_output_file: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDbFeaturesResult:
    """
    Use this data source to query detailed information of mysql db_features

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    db_features = tencentcloud.Mysql.get_db_features(instance_id="cdb-fitq5t9h")
    ```
    <!--End PulumiCodeChooser -->


    :param str instance_id: Instance ID, the format is: cdb-c1nl9rpv or cdbro-c1nl9rpv, which is the same as the instance ID displayed on the cloud database console page.
    :param str result_output_file: Used to save results.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['resultOutputFile'] = result_output_file
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Mysql/getDbFeatures:getDbFeatures', __args__, opts=opts, typ=GetDbFeaturesResult).value

    return AwaitableGetDbFeaturesResult(
        audit_need_upgrade=pulumi.get(__ret__, 'audit_need_upgrade'),
        current_sub_version=pulumi.get(__ret__, 'current_sub_version'),
        encryption_need_upgrade=pulumi.get(__ret__, 'encryption_need_upgrade'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        is_remote_ro=pulumi.get(__ret__, 'is_remote_ro'),
        is_support_audit=pulumi.get(__ret__, 'is_support_audit'),
        is_support_encryption=pulumi.get(__ret__, 'is_support_encryption'),
        is_support_update_sub_version=pulumi.get(__ret__, 'is_support_update_sub_version'),
        master_region=pulumi.get(__ret__, 'master_region'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        target_sub_version=pulumi.get(__ret__, 'target_sub_version'))


@_utilities.lift_output_func(get_db_features)
def get_db_features_output(instance_id: Optional[pulumi.Input[str]] = None,
                           result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDbFeaturesResult]:
    """
    Use this data source to query detailed information of mysql db_features

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    db_features = tencentcloud.Mysql.get_db_features(instance_id="cdb-fitq5t9h")
    ```
    <!--End PulumiCodeChooser -->


    :param str instance_id: Instance ID, the format is: cdb-c1nl9rpv or cdbro-c1nl9rpv, which is the same as the instance ID displayed on the cloud database console page.
    :param str result_output_file: Used to save results.
    """
    ...
