# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetMigrateJobsResult',
    'AwaitableGetMigrateJobsResult',
    'get_migrate_jobs',
    'get_migrate_jobs_output',
]

@pulumi.output_type
class GetMigrateJobsResult:
    """
    A collection of values returned by getMigrateJobs.
    """
    def __init__(__self__, dst_access_types=None, dst_database_types=None, dst_instance_id=None, dst_region=None, id=None, job_id=None, job_name=None, lists=None, order_seq=None, result_output_file=None, run_mode=None, src_access_types=None, src_database_types=None, src_instance_id=None, src_region=None, statuses=None, tag_filters=None):
        if dst_access_types and not isinstance(dst_access_types, list):
            raise TypeError("Expected argument 'dst_access_types' to be a list")
        pulumi.set(__self__, "dst_access_types", dst_access_types)
        if dst_database_types and not isinstance(dst_database_types, list):
            raise TypeError("Expected argument 'dst_database_types' to be a list")
        pulumi.set(__self__, "dst_database_types", dst_database_types)
        if dst_instance_id and not isinstance(dst_instance_id, str):
            raise TypeError("Expected argument 'dst_instance_id' to be a str")
        pulumi.set(__self__, "dst_instance_id", dst_instance_id)
        if dst_region and not isinstance(dst_region, str):
            raise TypeError("Expected argument 'dst_region' to be a str")
        pulumi.set(__self__, "dst_region", dst_region)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_id and not isinstance(job_id, str):
            raise TypeError("Expected argument 'job_id' to be a str")
        pulumi.set(__self__, "job_id", job_id)
        if job_name and not isinstance(job_name, str):
            raise TypeError("Expected argument 'job_name' to be a str")
        pulumi.set(__self__, "job_name", job_name)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if order_seq and not isinstance(order_seq, str):
            raise TypeError("Expected argument 'order_seq' to be a str")
        pulumi.set(__self__, "order_seq", order_seq)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if run_mode and not isinstance(run_mode, str):
            raise TypeError("Expected argument 'run_mode' to be a str")
        pulumi.set(__self__, "run_mode", run_mode)
        if src_access_types and not isinstance(src_access_types, list):
            raise TypeError("Expected argument 'src_access_types' to be a list")
        pulumi.set(__self__, "src_access_types", src_access_types)
        if src_database_types and not isinstance(src_database_types, list):
            raise TypeError("Expected argument 'src_database_types' to be a list")
        pulumi.set(__self__, "src_database_types", src_database_types)
        if src_instance_id and not isinstance(src_instance_id, str):
            raise TypeError("Expected argument 'src_instance_id' to be a str")
        pulumi.set(__self__, "src_instance_id", src_instance_id)
        if src_region and not isinstance(src_region, str):
            raise TypeError("Expected argument 'src_region' to be a str")
        pulumi.set(__self__, "src_region", src_region)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if tag_filters and not isinstance(tag_filters, list):
            raise TypeError("Expected argument 'tag_filters' to be a list")
        pulumi.set(__self__, "tag_filters", tag_filters)

    @property
    @pulumi.getter(name="dstAccessTypes")
    def dst_access_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dst_access_types")

    @property
    @pulumi.getter(name="dstDatabaseTypes")
    def dst_database_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "dst_database_types")

    @property
    @pulumi.getter(name="dstInstanceId")
    def dst_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "dst_instance_id")

    @property
    @pulumi.getter(name="dstRegion")
    def dst_region(self) -> Optional[str]:
        return pulumi.get(self, "dst_region")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[str]:
        """
        job id.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[str]:
        """
        job name.
        """
        return pulumi.get(self, "job_name")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetMigrateJobsListResult']:
        """
        migration job list.
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter(name="orderSeq")
    def order_seq(self) -> Optional[str]:
        return pulumi.get(self, "order_seq")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="runMode")
    def run_mode(self) -> Optional[str]:
        return pulumi.get(self, "run_mode")

    @property
    @pulumi.getter(name="srcAccessTypes")
    def src_access_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "src_access_types")

    @property
    @pulumi.getter(name="srcDatabaseTypes")
    def src_database_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "src_database_types")

    @property
    @pulumi.getter(name="srcInstanceId")
    def src_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "src_instance_id")

    @property
    @pulumi.getter(name="srcRegion")
    def src_region(self) -> Optional[str]:
        return pulumi.get(self, "src_region")

    @property
    @pulumi.getter
    def statuses(self) -> Optional[Sequence[str]]:
        """
        current status.
        """
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[Sequence['outputs.GetMigrateJobsTagFilterResult']]:
        return pulumi.get(self, "tag_filters")


class AwaitableGetMigrateJobsResult(GetMigrateJobsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMigrateJobsResult(
            dst_access_types=self.dst_access_types,
            dst_database_types=self.dst_database_types,
            dst_instance_id=self.dst_instance_id,
            dst_region=self.dst_region,
            id=self.id,
            job_id=self.job_id,
            job_name=self.job_name,
            lists=self.lists,
            order_seq=self.order_seq,
            result_output_file=self.result_output_file,
            run_mode=self.run_mode,
            src_access_types=self.src_access_types,
            src_database_types=self.src_database_types,
            src_instance_id=self.src_instance_id,
            src_region=self.src_region,
            statuses=self.statuses,
            tag_filters=self.tag_filters)


def get_migrate_jobs(dst_access_types: Optional[Sequence[str]] = None,
                     dst_database_types: Optional[Sequence[str]] = None,
                     dst_instance_id: Optional[str] = None,
                     dst_region: Optional[str] = None,
                     job_id: Optional[str] = None,
                     job_name: Optional[str] = None,
                     order_seq: Optional[str] = None,
                     result_output_file: Optional[str] = None,
                     run_mode: Optional[str] = None,
                     src_access_types: Optional[Sequence[str]] = None,
                     src_database_types: Optional[Sequence[str]] = None,
                     src_instance_id: Optional[str] = None,
                     src_region: Optional[str] = None,
                     statuses: Optional[Sequence[str]] = None,
                     tag_filters: Optional[Sequence[pulumi.InputType['GetMigrateJobsTagFilterArgs']]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMigrateJobsResult:
    """
    Use this data source to query detailed information of dts migrateJobs


    :param Sequence[str] dst_access_types: destination access type.
    :param Sequence[str] dst_database_types: destination database type.
    :param str dst_instance_id: source instance id.
    :param str dst_region: destination region.
    :param str job_id: job id.
    :param str job_name: job name.
    :param str order_seq: order by, default by create time.
    :param str result_output_file: Used to save results.
    :param str run_mode: run mode.
    :param Sequence[str] src_access_types: source access type.
    :param Sequence[str] src_database_types: source database type.
    :param str src_instance_id: source instance id.
    :param str src_region: source region.
    :param Sequence[str] statuses: migrate status.
    :param Sequence[pulumi.InputType['GetMigrateJobsTagFilterArgs']] tag_filters: tag filters.
    """
    __args__ = dict()
    __args__['dstAccessTypes'] = dst_access_types
    __args__['dstDatabaseTypes'] = dst_database_types
    __args__['dstInstanceId'] = dst_instance_id
    __args__['dstRegion'] = dst_region
    __args__['jobId'] = job_id
    __args__['jobName'] = job_name
    __args__['orderSeq'] = order_seq
    __args__['resultOutputFile'] = result_output_file
    __args__['runMode'] = run_mode
    __args__['srcAccessTypes'] = src_access_types
    __args__['srcDatabaseTypes'] = src_database_types
    __args__['srcInstanceId'] = src_instance_id
    __args__['srcRegion'] = src_region
    __args__['statuses'] = statuses
    __args__['tagFilters'] = tag_filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dts/getMigrateJobs:getMigrateJobs', __args__, opts=opts, typ=GetMigrateJobsResult).value

    return AwaitableGetMigrateJobsResult(
        dst_access_types=pulumi.get(__ret__, 'dst_access_types'),
        dst_database_types=pulumi.get(__ret__, 'dst_database_types'),
        dst_instance_id=pulumi.get(__ret__, 'dst_instance_id'),
        dst_region=pulumi.get(__ret__, 'dst_region'),
        id=pulumi.get(__ret__, 'id'),
        job_id=pulumi.get(__ret__, 'job_id'),
        job_name=pulumi.get(__ret__, 'job_name'),
        lists=pulumi.get(__ret__, 'lists'),
        order_seq=pulumi.get(__ret__, 'order_seq'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        run_mode=pulumi.get(__ret__, 'run_mode'),
        src_access_types=pulumi.get(__ret__, 'src_access_types'),
        src_database_types=pulumi.get(__ret__, 'src_database_types'),
        src_instance_id=pulumi.get(__ret__, 'src_instance_id'),
        src_region=pulumi.get(__ret__, 'src_region'),
        statuses=pulumi.get(__ret__, 'statuses'),
        tag_filters=pulumi.get(__ret__, 'tag_filters'))


@_utilities.lift_output_func(get_migrate_jobs)
def get_migrate_jobs_output(dst_access_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            dst_database_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            dst_instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                            dst_region: Optional[pulumi.Input[Optional[str]]] = None,
                            job_id: Optional[pulumi.Input[Optional[str]]] = None,
                            job_name: Optional[pulumi.Input[Optional[str]]] = None,
                            order_seq: Optional[pulumi.Input[Optional[str]]] = None,
                            result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                            run_mode: Optional[pulumi.Input[Optional[str]]] = None,
                            src_access_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            src_database_types: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            src_instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                            src_region: Optional[pulumi.Input[Optional[str]]] = None,
                            statuses: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                            tag_filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetMigrateJobsTagFilterArgs']]]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMigrateJobsResult]:
    """
    Use this data source to query detailed information of dts migrateJobs


    :param Sequence[str] dst_access_types: destination access type.
    :param Sequence[str] dst_database_types: destination database type.
    :param str dst_instance_id: source instance id.
    :param str dst_region: destination region.
    :param str job_id: job id.
    :param str job_name: job name.
    :param str order_seq: order by, default by create time.
    :param str result_output_file: Used to save results.
    :param str run_mode: run mode.
    :param Sequence[str] src_access_types: source access type.
    :param Sequence[str] src_database_types: source database type.
    :param str src_instance_id: source instance id.
    :param str src_region: source region.
    :param Sequence[str] statuses: migrate status.
    :param Sequence[pulumi.InputType['GetMigrateJobsTagFilterArgs']] tag_filters: tag filters.
    """
    ...
