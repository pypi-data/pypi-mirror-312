# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SyncConfigArgs', 'SyncConfig']

@pulumi.input_type
class SyncConfigArgs:
    def __init__(__self__, *,
                 dst_access_type: pulumi.Input[str],
                 job_id: pulumi.Input[str],
                 objects: pulumi.Input['SyncConfigObjectsArgs'],
                 src_access_type: pulumi.Input[str],
                 auto_retry_time_range_minutes: Optional[pulumi.Input[int]] = None,
                 dst_info: Optional[pulumi.Input['SyncConfigDstInfoArgs']] = None,
                 expect_run_time: Optional[pulumi.Input[str]] = None,
                 job_mode: Optional[pulumi.Input[str]] = None,
                 job_name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input['SyncConfigOptionsArgs']] = None,
                 run_mode: Optional[pulumi.Input[str]] = None,
                 src_info: Optional[pulumi.Input['SyncConfigSrcInfoArgs']] = None):
        """
        The set of arguments for constructing a SyncConfig resource.
        :param pulumi.Input[str] dst_access_type: Target end access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
        :param pulumi.Input[str] job_id: Synchronization instance id (i.e. identifies a synchronization job).
        :param pulumi.Input['SyncConfigObjectsArgs'] objects: Synchronize database table object information.
        :param pulumi.Input[str] src_access_type: Source access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
        :param pulumi.Input[int] auto_retry_time_range_minutes: The time period of automatic retry, can be set from 5 to 720 minutes, 0 means no retry.
        :param pulumi.Input['SyncConfigDstInfoArgs'] dst_info: Target information, single-node database use.
        :param pulumi.Input[str] expect_run_time: Expected start time, when the value of RunMode is Timed, this value is required, such as: 2006-01-02 15:04:05.
        :param pulumi.Input[str] job_mode: The enumeration values are liteMode and fullMode, corresponding to lite mode or normal mode respectively.
        :param pulumi.Input[str] job_name: Sync job name.
        :param pulumi.Input['SyncConfigOptionsArgs'] options: Sync Task Options.
        :param pulumi.Input[str] run_mode: Operation mode, such as: Immediate (indicates immediate operation, the default value is this value), Timed (indicates scheduled operation).
        :param pulumi.Input['SyncConfigSrcInfoArgs'] src_info: Source information, single-node database use.
        """
        pulumi.set(__self__, "dst_access_type", dst_access_type)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "objects", objects)
        pulumi.set(__self__, "src_access_type", src_access_type)
        if auto_retry_time_range_minutes is not None:
            pulumi.set(__self__, "auto_retry_time_range_minutes", auto_retry_time_range_minutes)
        if dst_info is not None:
            pulumi.set(__self__, "dst_info", dst_info)
        if expect_run_time is not None:
            pulumi.set(__self__, "expect_run_time", expect_run_time)
        if job_mode is not None:
            pulumi.set(__self__, "job_mode", job_mode)
        if job_name is not None:
            pulumi.set(__self__, "job_name", job_name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if run_mode is not None:
            pulumi.set(__self__, "run_mode", run_mode)
        if src_info is not None:
            pulumi.set(__self__, "src_info", src_info)

    @property
    @pulumi.getter(name="dstAccessType")
    def dst_access_type(self) -> pulumi.Input[str]:
        """
        Target end access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
        """
        return pulumi.get(self, "dst_access_type")

    @dst_access_type.setter
    def dst_access_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "dst_access_type", value)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Input[str]:
        """
        Synchronization instance id (i.e. identifies a synchronization job).
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_id", value)

    @property
    @pulumi.getter
    def objects(self) -> pulumi.Input['SyncConfigObjectsArgs']:
        """
        Synchronize database table object information.
        """
        return pulumi.get(self, "objects")

    @objects.setter
    def objects(self, value: pulumi.Input['SyncConfigObjectsArgs']):
        pulumi.set(self, "objects", value)

    @property
    @pulumi.getter(name="srcAccessType")
    def src_access_type(self) -> pulumi.Input[str]:
        """
        Source access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
        """
        return pulumi.get(self, "src_access_type")

    @src_access_type.setter
    def src_access_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_access_type", value)

    @property
    @pulumi.getter(name="autoRetryTimeRangeMinutes")
    def auto_retry_time_range_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The time period of automatic retry, can be set from 5 to 720 minutes, 0 means no retry.
        """
        return pulumi.get(self, "auto_retry_time_range_minutes")

    @auto_retry_time_range_minutes.setter
    def auto_retry_time_range_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_retry_time_range_minutes", value)

    @property
    @pulumi.getter(name="dstInfo")
    def dst_info(self) -> Optional[pulumi.Input['SyncConfigDstInfoArgs']]:
        """
        Target information, single-node database use.
        """
        return pulumi.get(self, "dst_info")

    @dst_info.setter
    def dst_info(self, value: Optional[pulumi.Input['SyncConfigDstInfoArgs']]):
        pulumi.set(self, "dst_info", value)

    @property
    @pulumi.getter(name="expectRunTime")
    def expect_run_time(self) -> Optional[pulumi.Input[str]]:
        """
        Expected start time, when the value of RunMode is Timed, this value is required, such as: 2006-01-02 15:04:05.
        """
        return pulumi.get(self, "expect_run_time")

    @expect_run_time.setter
    def expect_run_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expect_run_time", value)

    @property
    @pulumi.getter(name="jobMode")
    def job_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The enumeration values are liteMode and fullMode, corresponding to lite mode or normal mode respectively.
        """
        return pulumi.get(self, "job_mode")

    @job_mode.setter
    def job_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_mode", value)

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[pulumi.Input[str]]:
        """
        Sync job name.
        """
        return pulumi.get(self, "job_name")

    @job_name.setter
    def job_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input['SyncConfigOptionsArgs']]:
        """
        Sync Task Options.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input['SyncConfigOptionsArgs']]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="runMode")
    def run_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Operation mode, such as: Immediate (indicates immediate operation, the default value is this value), Timed (indicates scheduled operation).
        """
        return pulumi.get(self, "run_mode")

    @run_mode.setter
    def run_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_mode", value)

    @property
    @pulumi.getter(name="srcInfo")
    def src_info(self) -> Optional[pulumi.Input['SyncConfigSrcInfoArgs']]:
        """
        Source information, single-node database use.
        """
        return pulumi.get(self, "src_info")

    @src_info.setter
    def src_info(self, value: Optional[pulumi.Input['SyncConfigSrcInfoArgs']]):
        pulumi.set(self, "src_info", value)


@pulumi.input_type
class _SyncConfigState:
    def __init__(__self__, *,
                 auto_retry_time_range_minutes: Optional[pulumi.Input[int]] = None,
                 dst_access_type: Optional[pulumi.Input[str]] = None,
                 dst_info: Optional[pulumi.Input['SyncConfigDstInfoArgs']] = None,
                 expect_run_time: Optional[pulumi.Input[str]] = None,
                 job_id: Optional[pulumi.Input[str]] = None,
                 job_mode: Optional[pulumi.Input[str]] = None,
                 job_name: Optional[pulumi.Input[str]] = None,
                 objects: Optional[pulumi.Input['SyncConfigObjectsArgs']] = None,
                 options: Optional[pulumi.Input['SyncConfigOptionsArgs']] = None,
                 run_mode: Optional[pulumi.Input[str]] = None,
                 src_access_type: Optional[pulumi.Input[str]] = None,
                 src_info: Optional[pulumi.Input['SyncConfigSrcInfoArgs']] = None):
        """
        Input properties used for looking up and filtering SyncConfig resources.
        :param pulumi.Input[int] auto_retry_time_range_minutes: The time period of automatic retry, can be set from 5 to 720 minutes, 0 means no retry.
        :param pulumi.Input[str] dst_access_type: Target end access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
        :param pulumi.Input['SyncConfigDstInfoArgs'] dst_info: Target information, single-node database use.
        :param pulumi.Input[str] expect_run_time: Expected start time, when the value of RunMode is Timed, this value is required, such as: 2006-01-02 15:04:05.
        :param pulumi.Input[str] job_id: Synchronization instance id (i.e. identifies a synchronization job).
        :param pulumi.Input[str] job_mode: The enumeration values are liteMode and fullMode, corresponding to lite mode or normal mode respectively.
        :param pulumi.Input[str] job_name: Sync job name.
        :param pulumi.Input['SyncConfigObjectsArgs'] objects: Synchronize database table object information.
        :param pulumi.Input['SyncConfigOptionsArgs'] options: Sync Task Options.
        :param pulumi.Input[str] run_mode: Operation mode, such as: Immediate (indicates immediate operation, the default value is this value), Timed (indicates scheduled operation).
        :param pulumi.Input[str] src_access_type: Source access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
        :param pulumi.Input['SyncConfigSrcInfoArgs'] src_info: Source information, single-node database use.
        """
        if auto_retry_time_range_minutes is not None:
            pulumi.set(__self__, "auto_retry_time_range_minutes", auto_retry_time_range_minutes)
        if dst_access_type is not None:
            pulumi.set(__self__, "dst_access_type", dst_access_type)
        if dst_info is not None:
            pulumi.set(__self__, "dst_info", dst_info)
        if expect_run_time is not None:
            pulumi.set(__self__, "expect_run_time", expect_run_time)
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if job_mode is not None:
            pulumi.set(__self__, "job_mode", job_mode)
        if job_name is not None:
            pulumi.set(__self__, "job_name", job_name)
        if objects is not None:
            pulumi.set(__self__, "objects", objects)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if run_mode is not None:
            pulumi.set(__self__, "run_mode", run_mode)
        if src_access_type is not None:
            pulumi.set(__self__, "src_access_type", src_access_type)
        if src_info is not None:
            pulumi.set(__self__, "src_info", src_info)

    @property
    @pulumi.getter(name="autoRetryTimeRangeMinutes")
    def auto_retry_time_range_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        The time period of automatic retry, can be set from 5 to 720 minutes, 0 means no retry.
        """
        return pulumi.get(self, "auto_retry_time_range_minutes")

    @auto_retry_time_range_minutes.setter
    def auto_retry_time_range_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_retry_time_range_minutes", value)

    @property
    @pulumi.getter(name="dstAccessType")
    def dst_access_type(self) -> Optional[pulumi.Input[str]]:
        """
        Target end access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
        """
        return pulumi.get(self, "dst_access_type")

    @dst_access_type.setter
    def dst_access_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dst_access_type", value)

    @property
    @pulumi.getter(name="dstInfo")
    def dst_info(self) -> Optional[pulumi.Input['SyncConfigDstInfoArgs']]:
        """
        Target information, single-node database use.
        """
        return pulumi.get(self, "dst_info")

    @dst_info.setter
    def dst_info(self, value: Optional[pulumi.Input['SyncConfigDstInfoArgs']]):
        pulumi.set(self, "dst_info", value)

    @property
    @pulumi.getter(name="expectRunTime")
    def expect_run_time(self) -> Optional[pulumi.Input[str]]:
        """
        Expected start time, when the value of RunMode is Timed, this value is required, such as: 2006-01-02 15:04:05.
        """
        return pulumi.get(self, "expect_run_time")

    @expect_run_time.setter
    def expect_run_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expect_run_time", value)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[pulumi.Input[str]]:
        """
        Synchronization instance id (i.e. identifies a synchronization job).
        """
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_id", value)

    @property
    @pulumi.getter(name="jobMode")
    def job_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The enumeration values are liteMode and fullMode, corresponding to lite mode or normal mode respectively.
        """
        return pulumi.get(self, "job_mode")

    @job_mode.setter
    def job_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_mode", value)

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> Optional[pulumi.Input[str]]:
        """
        Sync job name.
        """
        return pulumi.get(self, "job_name")

    @job_name.setter
    def job_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_name", value)

    @property
    @pulumi.getter
    def objects(self) -> Optional[pulumi.Input['SyncConfigObjectsArgs']]:
        """
        Synchronize database table object information.
        """
        return pulumi.get(self, "objects")

    @objects.setter
    def objects(self, value: Optional[pulumi.Input['SyncConfigObjectsArgs']]):
        pulumi.set(self, "objects", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input['SyncConfigOptionsArgs']]:
        """
        Sync Task Options.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input['SyncConfigOptionsArgs']]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="runMode")
    def run_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Operation mode, such as: Immediate (indicates immediate operation, the default value is this value), Timed (indicates scheduled operation).
        """
        return pulumi.get(self, "run_mode")

    @run_mode.setter
    def run_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "run_mode", value)

    @property
    @pulumi.getter(name="srcAccessType")
    def src_access_type(self) -> Optional[pulumi.Input[str]]:
        """
        Source access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
        """
        return pulumi.get(self, "src_access_type")

    @src_access_type.setter
    def src_access_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "src_access_type", value)

    @property
    @pulumi.getter(name="srcInfo")
    def src_info(self) -> Optional[pulumi.Input['SyncConfigSrcInfoArgs']]:
        """
        Source information, single-node database use.
        """
        return pulumi.get(self, "src_info")

    @src_info.setter
    def src_info(self, value: Optional[pulumi.Input['SyncConfigSrcInfoArgs']]):
        pulumi.set(self, "src_info", value)


class SyncConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_retry_time_range_minutes: Optional[pulumi.Input[int]] = None,
                 dst_access_type: Optional[pulumi.Input[str]] = None,
                 dst_info: Optional[pulumi.Input[pulumi.InputType['SyncConfigDstInfoArgs']]] = None,
                 expect_run_time: Optional[pulumi.Input[str]] = None,
                 job_id: Optional[pulumi.Input[str]] = None,
                 job_mode: Optional[pulumi.Input[str]] = None,
                 job_name: Optional[pulumi.Input[str]] = None,
                 objects: Optional[pulumi.Input[pulumi.InputType['SyncConfigObjectsArgs']]] = None,
                 options: Optional[pulumi.Input[pulumi.InputType['SyncConfigOptionsArgs']]] = None,
                 run_mode: Optional[pulumi.Input[str]] = None,
                 src_access_type: Optional[pulumi.Input[str]] = None,
                 src_info: Optional[pulumi.Input[pulumi.InputType['SyncConfigSrcInfoArgs']]] = None,
                 __props__=None):
        """
        Provides a resource to create a dts sync_config

        ## Example Usage

        ### Sync mysql database to cynosdb through cdb access type

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.cynosdb.Cluster("foo",
            available_zone=var["availability_zone"],
            vpc_id=local["vpc_id"],
            subnet_id=local["subnet_id"],
            db_type="MYSQL",
            db_version="5.7",
            storage_limit=1000,
            cluster_name="tf-cynosdb-mysql-sync-dst",
            password="*",
            instance_maintain_duration=3600,
            instance_maintain_start_time=10800,
            instance_maintain_weekdays=[
                "Fri",
                "Mon",
                "Sat",
                "Sun",
                "Thu",
                "Wed",
                "Tue",
            ],
            instance_cpu_core=1,
            instance_memory_size=2,
            param_items=[
                tencentcloud.cynosdb.ClusterParamItemArgs(
                    name="character_set_server",
                    current_value="utf8",
                ),
                tencentcloud.cynosdb.ClusterParamItemArgs(
                    name="time_zone",
                    current_value="+09:00",
                ),
                tencentcloud.cynosdb.ClusterParamItemArgs(
                    name="lower_case_table_names",
                    current_value="1",
                ),
            ],
            force_delete=True,
            rw_group_sgs=[local["sg_id"]],
            ro_group_sgs=[local["sg_id"]],
            prarm_template_id=var["my_param_template"])
        sync_job = tencentcloud.dts.SyncJob("syncJob",
            pay_mode="PostPay",
            src_database_type="mysql",
            src_region="ap-guangzhou",
            dst_database_type="cynosdbmysql",
            dst_region="ap-guangzhou",
            tags=[tencentcloud.dts.SyncJobTagArgs(
                tag_key="aaa",
                tag_value="bbb",
            )],
            auto_renew=0,
            instance_class="micro")
        sync_config = tencentcloud.dts.SyncConfig("syncConfig",
            job_id=sync_job.job_id,
            src_access_type="cdb",
            dst_access_type="cdb",
            job_name="tf_test_sync_config",
            job_mode="liteMode",
            run_mode="Immediate",
            objects=tencentcloud.dts.SyncConfigObjectsArgs(
                mode="Partial",
                databases=[tencentcloud.dts.SyncConfigObjectsDatabaseArgs(
                    db_name="tf_ci_test",
                    new_db_name="tf_ci_test_new",
                    db_mode="Partial",
                    table_mode="All",
                    tables=[tencentcloud.dts.SyncConfigObjectsDatabaseTableArgs(
                        table_name="test",
                        new_table_name="test_new",
                    )],
                )],
            ),
            src_info=tencentcloud.dts.SyncConfigSrcInfoArgs(
                region="ap-guangzhou",
                instance_id="cdb-fitq5t9h",
                user="your_user_name",
                password="*",
                db_name="tf_ci_test",
                vpc_id=local["vpc_id"],
                subnet_id=local["subnet_id"],
            ),
            dst_info=tencentcloud.dts.SyncConfigDstInfoArgs(
                region="ap-guangzhou",
                instance_id=foo.id,
                user="root",
                password="*",
                db_name="tf_ci_test_new",
                vpc_id=local["vpc_id"],
                subnet_id=local["subnet_id"],
            ),
            auto_retry_time_range_minutes=0)
        ```
        <!--End PulumiCodeChooser -->

        ### Sync mysql database using CCN to route from ap-shanghai to ap-guangzhou

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        vpc_id_sh = "vpc-evtcyb3g"
        subnet_id_sh = "subnet-1t83cxkp"
        src_mysql = tencentcloud.Mysql.get_instance(instance_name="your_user_name_mysql_src")
        src_ip = src_mysql.instance_lists[0].intranet_ip
        src_port = src_mysql.instance_lists[0].intranet_port
        ccns = tencentcloud.Ccn.get_instances(name="keep-ccn-dts-sh")
        ccn_id = ccns.instance_lists[0].ccn_id
        dst_mysql = tencentcloud.Mysql.get_instance(instance_name="your_user_name_mysql_src")
        dst_mysql_id = dst_mysql.instance_lists[0].mysql_id
        config = pulumi.Config()
        src_az_sh = config.get("srcAzSh")
        if src_az_sh is None:
            src_az_sh = "ap-shanghai"
        dst_az_gz = config.get("dstAzGz")
        if dst_az_gz is None:
            dst_az_gz = "ap-guangzhou"
        sync_jobs = tencentcloud.Dts.get_sync_jobs(job_name="keep_sync_config_ccn_2_cdb")
        sync_config = tencentcloud.dts.SyncConfig("syncConfig",
            job_id=sync_jobs.lists[0].job_id,
            src_access_type="ccn",
            dst_access_type="cdb",
            job_mode="liteMode",
            run_mode="Immediate",
            objects=tencentcloud.dts.SyncConfigObjectsArgs(
                mode="Partial",
                databases=[tencentcloud.dts.SyncConfigObjectsDatabaseArgs(
                    db_name="tf_ci_test",
                    new_db_name="tf_ci_test_new",
                    db_mode="Partial",
                    table_mode="All",
                    tables=[tencentcloud.dts.SyncConfigObjectsDatabaseTableArgs(
                        table_name="test",
                        new_table_name="test_new",
                    )],
                )],
            ),
            src_info=tencentcloud.dts.SyncConfigSrcInfoArgs(
                region=src_az_sh,
                user="your_user_name",
                password="your_pass_word",
                ip=src_ip,
                port=src_port,
                vpc_id=vpc_id_sh,
                subnet_id=subnet_id_sh,
                ccn_id=ccn_id,
                database_net_env="TencentVPC",
            ),
            dst_info=tencentcloud.dts.SyncConfigDstInfoArgs(
                region=dst_az_gz,
                instance_id=dst_mysql_id,
                user="your_user_name",
                password="your_pass_word",
            ),
            auto_retry_time_range_minutes=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dts sync_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dts/syncConfig:SyncConfig sync_config sync_config_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_retry_time_range_minutes: The time period of automatic retry, can be set from 5 to 720 minutes, 0 means no retry.
        :param pulumi.Input[str] dst_access_type: Target end access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
        :param pulumi.Input[pulumi.InputType['SyncConfigDstInfoArgs']] dst_info: Target information, single-node database use.
        :param pulumi.Input[str] expect_run_time: Expected start time, when the value of RunMode is Timed, this value is required, such as: 2006-01-02 15:04:05.
        :param pulumi.Input[str] job_id: Synchronization instance id (i.e. identifies a synchronization job).
        :param pulumi.Input[str] job_mode: The enumeration values are liteMode and fullMode, corresponding to lite mode or normal mode respectively.
        :param pulumi.Input[str] job_name: Sync job name.
        :param pulumi.Input[pulumi.InputType['SyncConfigObjectsArgs']] objects: Synchronize database table object information.
        :param pulumi.Input[pulumi.InputType['SyncConfigOptionsArgs']] options: Sync Task Options.
        :param pulumi.Input[str] run_mode: Operation mode, such as: Immediate (indicates immediate operation, the default value is this value), Timed (indicates scheduled operation).
        :param pulumi.Input[str] src_access_type: Source access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
        :param pulumi.Input[pulumi.InputType['SyncConfigSrcInfoArgs']] src_info: Source information, single-node database use.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SyncConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a resource to create a dts sync_config

        ## Example Usage

        ### Sync mysql database to cynosdb through cdb access type

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import tencentcloud_iac_pulumi as tencentcloud

        foo = tencentcloud.cynosdb.Cluster("foo",
            available_zone=var["availability_zone"],
            vpc_id=local["vpc_id"],
            subnet_id=local["subnet_id"],
            db_type="MYSQL",
            db_version="5.7",
            storage_limit=1000,
            cluster_name="tf-cynosdb-mysql-sync-dst",
            password="*",
            instance_maintain_duration=3600,
            instance_maintain_start_time=10800,
            instance_maintain_weekdays=[
                "Fri",
                "Mon",
                "Sat",
                "Sun",
                "Thu",
                "Wed",
                "Tue",
            ],
            instance_cpu_core=1,
            instance_memory_size=2,
            param_items=[
                tencentcloud.cynosdb.ClusterParamItemArgs(
                    name="character_set_server",
                    current_value="utf8",
                ),
                tencentcloud.cynosdb.ClusterParamItemArgs(
                    name="time_zone",
                    current_value="+09:00",
                ),
                tencentcloud.cynosdb.ClusterParamItemArgs(
                    name="lower_case_table_names",
                    current_value="1",
                ),
            ],
            force_delete=True,
            rw_group_sgs=[local["sg_id"]],
            ro_group_sgs=[local["sg_id"]],
            prarm_template_id=var["my_param_template"])
        sync_job = tencentcloud.dts.SyncJob("syncJob",
            pay_mode="PostPay",
            src_database_type="mysql",
            src_region="ap-guangzhou",
            dst_database_type="cynosdbmysql",
            dst_region="ap-guangzhou",
            tags=[tencentcloud.dts.SyncJobTagArgs(
                tag_key="aaa",
                tag_value="bbb",
            )],
            auto_renew=0,
            instance_class="micro")
        sync_config = tencentcloud.dts.SyncConfig("syncConfig",
            job_id=sync_job.job_id,
            src_access_type="cdb",
            dst_access_type="cdb",
            job_name="tf_test_sync_config",
            job_mode="liteMode",
            run_mode="Immediate",
            objects=tencentcloud.dts.SyncConfigObjectsArgs(
                mode="Partial",
                databases=[tencentcloud.dts.SyncConfigObjectsDatabaseArgs(
                    db_name="tf_ci_test",
                    new_db_name="tf_ci_test_new",
                    db_mode="Partial",
                    table_mode="All",
                    tables=[tencentcloud.dts.SyncConfigObjectsDatabaseTableArgs(
                        table_name="test",
                        new_table_name="test_new",
                    )],
                )],
            ),
            src_info=tencentcloud.dts.SyncConfigSrcInfoArgs(
                region="ap-guangzhou",
                instance_id="cdb-fitq5t9h",
                user="your_user_name",
                password="*",
                db_name="tf_ci_test",
                vpc_id=local["vpc_id"],
                subnet_id=local["subnet_id"],
            ),
            dst_info=tencentcloud.dts.SyncConfigDstInfoArgs(
                region="ap-guangzhou",
                instance_id=foo.id,
                user="root",
                password="*",
                db_name="tf_ci_test_new",
                vpc_id=local["vpc_id"],
                subnet_id=local["subnet_id"],
            ),
            auto_retry_time_range_minutes=0)
        ```
        <!--End PulumiCodeChooser -->

        ### Sync mysql database using CCN to route from ap-shanghai to ap-guangzhou

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_tencentcloud as tencentcloud
        import tencentcloud_iac_pulumi as tencentcloud

        vpc_id_sh = "vpc-evtcyb3g"
        subnet_id_sh = "subnet-1t83cxkp"
        src_mysql = tencentcloud.Mysql.get_instance(instance_name="your_user_name_mysql_src")
        src_ip = src_mysql.instance_lists[0].intranet_ip
        src_port = src_mysql.instance_lists[0].intranet_port
        ccns = tencentcloud.Ccn.get_instances(name="keep-ccn-dts-sh")
        ccn_id = ccns.instance_lists[0].ccn_id
        dst_mysql = tencentcloud.Mysql.get_instance(instance_name="your_user_name_mysql_src")
        dst_mysql_id = dst_mysql.instance_lists[0].mysql_id
        config = pulumi.Config()
        src_az_sh = config.get("srcAzSh")
        if src_az_sh is None:
            src_az_sh = "ap-shanghai"
        dst_az_gz = config.get("dstAzGz")
        if dst_az_gz is None:
            dst_az_gz = "ap-guangzhou"
        sync_jobs = tencentcloud.Dts.get_sync_jobs(job_name="keep_sync_config_ccn_2_cdb")
        sync_config = tencentcloud.dts.SyncConfig("syncConfig",
            job_id=sync_jobs.lists[0].job_id,
            src_access_type="ccn",
            dst_access_type="cdb",
            job_mode="liteMode",
            run_mode="Immediate",
            objects=tencentcloud.dts.SyncConfigObjectsArgs(
                mode="Partial",
                databases=[tencentcloud.dts.SyncConfigObjectsDatabaseArgs(
                    db_name="tf_ci_test",
                    new_db_name="tf_ci_test_new",
                    db_mode="Partial",
                    table_mode="All",
                    tables=[tencentcloud.dts.SyncConfigObjectsDatabaseTableArgs(
                        table_name="test",
                        new_table_name="test_new",
                    )],
                )],
            ),
            src_info=tencentcloud.dts.SyncConfigSrcInfoArgs(
                region=src_az_sh,
                user="your_user_name",
                password="your_pass_word",
                ip=src_ip,
                port=src_port,
                vpc_id=vpc_id_sh,
                subnet_id=subnet_id_sh,
                ccn_id=ccn_id,
                database_net_env="TencentVPC",
            ),
            dst_info=tencentcloud.dts.SyncConfigDstInfoArgs(
                region=dst_az_gz,
                instance_id=dst_mysql_id,
                user="your_user_name",
                password="your_pass_word",
            ),
            auto_retry_time_range_minutes=0)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        dts sync_config can be imported using the id, e.g.

        ```sh
        $ pulumi import tencentcloud:Dts/syncConfig:SyncConfig sync_config sync_config_id
        ```

        :param str resource_name: The name of the resource.
        :param SyncConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SyncConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_retry_time_range_minutes: Optional[pulumi.Input[int]] = None,
                 dst_access_type: Optional[pulumi.Input[str]] = None,
                 dst_info: Optional[pulumi.Input[pulumi.InputType['SyncConfigDstInfoArgs']]] = None,
                 expect_run_time: Optional[pulumi.Input[str]] = None,
                 job_id: Optional[pulumi.Input[str]] = None,
                 job_mode: Optional[pulumi.Input[str]] = None,
                 job_name: Optional[pulumi.Input[str]] = None,
                 objects: Optional[pulumi.Input[pulumi.InputType['SyncConfigObjectsArgs']]] = None,
                 options: Optional[pulumi.Input[pulumi.InputType['SyncConfigOptionsArgs']]] = None,
                 run_mode: Optional[pulumi.Input[str]] = None,
                 src_access_type: Optional[pulumi.Input[str]] = None,
                 src_info: Optional[pulumi.Input[pulumi.InputType['SyncConfigSrcInfoArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SyncConfigArgs.__new__(SyncConfigArgs)

            __props__.__dict__["auto_retry_time_range_minutes"] = auto_retry_time_range_minutes
            if dst_access_type is None and not opts.urn:
                raise TypeError("Missing required property 'dst_access_type'")
            __props__.__dict__["dst_access_type"] = dst_access_type
            __props__.__dict__["dst_info"] = dst_info
            __props__.__dict__["expect_run_time"] = expect_run_time
            if job_id is None and not opts.urn:
                raise TypeError("Missing required property 'job_id'")
            __props__.__dict__["job_id"] = job_id
            __props__.__dict__["job_mode"] = job_mode
            __props__.__dict__["job_name"] = job_name
            if objects is None and not opts.urn:
                raise TypeError("Missing required property 'objects'")
            __props__.__dict__["objects"] = objects
            __props__.__dict__["options"] = options
            __props__.__dict__["run_mode"] = run_mode
            if src_access_type is None and not opts.urn:
                raise TypeError("Missing required property 'src_access_type'")
            __props__.__dict__["src_access_type"] = src_access_type
            __props__.__dict__["src_info"] = src_info
        super(SyncConfig, __self__).__init__(
            'tencentcloud:Dts/syncConfig:SyncConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_retry_time_range_minutes: Optional[pulumi.Input[int]] = None,
            dst_access_type: Optional[pulumi.Input[str]] = None,
            dst_info: Optional[pulumi.Input[pulumi.InputType['SyncConfigDstInfoArgs']]] = None,
            expect_run_time: Optional[pulumi.Input[str]] = None,
            job_id: Optional[pulumi.Input[str]] = None,
            job_mode: Optional[pulumi.Input[str]] = None,
            job_name: Optional[pulumi.Input[str]] = None,
            objects: Optional[pulumi.Input[pulumi.InputType['SyncConfigObjectsArgs']]] = None,
            options: Optional[pulumi.Input[pulumi.InputType['SyncConfigOptionsArgs']]] = None,
            run_mode: Optional[pulumi.Input[str]] = None,
            src_access_type: Optional[pulumi.Input[str]] = None,
            src_info: Optional[pulumi.Input[pulumi.InputType['SyncConfigSrcInfoArgs']]] = None) -> 'SyncConfig':
        """
        Get an existing SyncConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] auto_retry_time_range_minutes: The time period of automatic retry, can be set from 5 to 720 minutes, 0 means no retry.
        :param pulumi.Input[str] dst_access_type: Target end access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
        :param pulumi.Input[pulumi.InputType['SyncConfigDstInfoArgs']] dst_info: Target information, single-node database use.
        :param pulumi.Input[str] expect_run_time: Expected start time, when the value of RunMode is Timed, this value is required, such as: 2006-01-02 15:04:05.
        :param pulumi.Input[str] job_id: Synchronization instance id (i.e. identifies a synchronization job).
        :param pulumi.Input[str] job_mode: The enumeration values are liteMode and fullMode, corresponding to lite mode or normal mode respectively.
        :param pulumi.Input[str] job_name: Sync job name.
        :param pulumi.Input[pulumi.InputType['SyncConfigObjectsArgs']] objects: Synchronize database table object information.
        :param pulumi.Input[pulumi.InputType['SyncConfigOptionsArgs']] options: Sync Task Options.
        :param pulumi.Input[str] run_mode: Operation mode, such as: Immediate (indicates immediate operation, the default value is this value), Timed (indicates scheduled operation).
        :param pulumi.Input[str] src_access_type: Source access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
        :param pulumi.Input[pulumi.InputType['SyncConfigSrcInfoArgs']] src_info: Source information, single-node database use.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SyncConfigState.__new__(_SyncConfigState)

        __props__.__dict__["auto_retry_time_range_minutes"] = auto_retry_time_range_minutes
        __props__.__dict__["dst_access_type"] = dst_access_type
        __props__.__dict__["dst_info"] = dst_info
        __props__.__dict__["expect_run_time"] = expect_run_time
        __props__.__dict__["job_id"] = job_id
        __props__.__dict__["job_mode"] = job_mode
        __props__.__dict__["job_name"] = job_name
        __props__.__dict__["objects"] = objects
        __props__.__dict__["options"] = options
        __props__.__dict__["run_mode"] = run_mode
        __props__.__dict__["src_access_type"] = src_access_type
        __props__.__dict__["src_info"] = src_info
        return SyncConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoRetryTimeRangeMinutes")
    def auto_retry_time_range_minutes(self) -> pulumi.Output[Optional[int]]:
        """
        The time period of automatic retry, can be set from 5 to 720 minutes, 0 means no retry.
        """
        return pulumi.get(self, "auto_retry_time_range_minutes")

    @property
    @pulumi.getter(name="dstAccessType")
    def dst_access_type(self) -> pulumi.Output[str]:
        """
        Target end access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
        """
        return pulumi.get(self, "dst_access_type")

    @property
    @pulumi.getter(name="dstInfo")
    def dst_info(self) -> pulumi.Output['outputs.SyncConfigDstInfo']:
        """
        Target information, single-node database use.
        """
        return pulumi.get(self, "dst_info")

    @property
    @pulumi.getter(name="expectRunTime")
    def expect_run_time(self) -> pulumi.Output[str]:
        """
        Expected start time, when the value of RunMode is Timed, this value is required, such as: 2006-01-02 15:04:05.
        """
        return pulumi.get(self, "expect_run_time")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> pulumi.Output[str]:
        """
        Synchronization instance id (i.e. identifies a synchronization job).
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobMode")
    def job_mode(self) -> pulumi.Output[Optional[str]]:
        """
        The enumeration values are liteMode and fullMode, corresponding to lite mode or normal mode respectively.
        """
        return pulumi.get(self, "job_mode")

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> pulumi.Output[str]:
        """
        Sync job name.
        """
        return pulumi.get(self, "job_name")

    @property
    @pulumi.getter
    def objects(self) -> pulumi.Output['outputs.SyncConfigObjects']:
        """
        Synchronize database table object information.
        """
        return pulumi.get(self, "objects")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output['outputs.SyncConfigOptions']:
        """
        Sync Task Options.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="runMode")
    def run_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Operation mode, such as: Immediate (indicates immediate operation, the default value is this value), Timed (indicates scheduled operation).
        """
        return pulumi.get(self, "run_mode")

    @property
    @pulumi.getter(name="srcAccessType")
    def src_access_type(self) -> pulumi.Output[str]:
        """
        Source access type, cdb (cloud database), cvm (cloud host self-built), vpc (private network), extranet (external network), vpncloud (vpn access), dcg (dedicated line access), ccn (cloud networking ), intranet (self-developed cloud), noProxy, note that the specific optional value depends on the current link.
        """
        return pulumi.get(self, "src_access_type")

    @property
    @pulumi.getter(name="srcInfo")
    def src_info(self) -> pulumi.Output['outputs.SyncConfigSrcInfo']:
        """
        Source information, single-node database use.
        """
        return pulumi.get(self, "src_info")

