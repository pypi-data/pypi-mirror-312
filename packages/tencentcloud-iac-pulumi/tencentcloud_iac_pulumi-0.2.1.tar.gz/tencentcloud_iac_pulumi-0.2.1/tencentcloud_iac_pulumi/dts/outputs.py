# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'CompareTaskObjects',
    'CompareTaskObjectsObjectItem',
    'CompareTaskObjectsObjectItemTable',
    'CompareTaskObjectsObjectItemView',
    'MigrateJobDstInfo',
    'MigrateJobDstInfoExtraAttr',
    'MigrateJobDstInfoInfo',
    'MigrateJobMigrateOption',
    'MigrateJobMigrateOptionConsistency',
    'MigrateJobMigrateOptionDatabaseTable',
    'MigrateJobMigrateOptionDatabaseTableDatabase',
    'MigrateJobMigrateOptionDatabaseTableDatabaseRole',
    'MigrateJobMigrateOptionDatabaseTableDatabaseTable',
    'MigrateJobMigrateOptionDatabaseTableDatabaseView',
    'MigrateJobMigrateOptionExtraAttr',
    'MigrateJobSrcInfo',
    'MigrateJobSrcInfoExtraAttr',
    'MigrateJobSrcInfoInfo',
    'MigrateServiceTag',
    'SyncConfigDstInfo',
    'SyncConfigObjects',
    'SyncConfigObjectsDatabase',
    'SyncConfigObjectsDatabaseTable',
    'SyncConfigObjectsDatabaseView',
    'SyncConfigObjectsOnlineDdl',
    'SyncConfigOptions',
    'SyncConfigOptionsConflictHandleOption',
    'SyncConfigOptionsDdlOption',
    'SyncConfigSrcInfo',
    'SyncJobTag',
    'GetCompareTasksListResult',
    'GetCompareTasksListCheckProcessResult',
    'GetCompareTasksListCheckProcessStepResult',
    'GetCompareTasksListCheckProcessStepErrorResult',
    'GetCompareTasksListCheckProcessStepWarningResult',
    'GetCompareTasksListCompareProcessResult',
    'GetCompareTasksListCompareProcessStepResult',
    'GetCompareTasksListCompareProcessStepErrorResult',
    'GetCompareTasksListCompareProcessStepWarningResult',
    'GetCompareTasksListConfigResult',
    'GetCompareTasksListConfigObjectItemResult',
    'GetCompareTasksListConfigObjectItemTableResult',
    'GetCompareTasksListConfigObjectItemViewResult',
    'GetMigrateDbInstancesInstanceResult',
    'GetMigrateJobsListResult',
    'GetMigrateJobsListActionResult',
    'GetMigrateJobsListCompareTaskResult',
    'GetMigrateJobsListDstInfoResult',
    'GetMigrateJobsListDstInfoInfoResult',
    'GetMigrateJobsListSrcInfoResult',
    'GetMigrateJobsListSrcInfoExtraAttrResult',
    'GetMigrateJobsListSrcInfoInfoResult',
    'GetMigrateJobsListStepInfoResult',
    'GetMigrateJobsListStepInfoStepInfoResult',
    'GetMigrateJobsListStepInfoStepInfoErrorResult',
    'GetMigrateJobsListStepInfoStepInfoWarningResult',
    'GetMigrateJobsListTagResult',
    'GetMigrateJobsListTradeInfoResult',
    'GetMigrateJobsTagFilterResult',
    'GetSyncJobsListResult',
    'GetSyncJobsListDetailResult',
    'GetSyncJobsListDetailStepInfoResult',
    'GetSyncJobsListDetailStepInfoErrorResult',
    'GetSyncJobsListDetailStepInfoWarningResult',
    'GetSyncJobsListDstInfoResult',
    'GetSyncJobsListObjectResult',
    'GetSyncJobsListObjectDatabaseResult',
    'GetSyncJobsListObjectDatabaseTableResult',
    'GetSyncJobsListObjectDatabaseViewResult',
    'GetSyncJobsListOptionResult',
    'GetSyncJobsListOptionConflictHandleOptionResult',
    'GetSyncJobsListOptionDdlOptionResult',
    'GetSyncJobsListSrcInfoResult',
    'GetSyncJobsListTagResult',
    'GetSyncJobsTagFilterResult',
]

@pulumi.output_type
class CompareTaskObjects(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectMode":
            suggest = "object_mode"
        elif key == "objectItems":
            suggest = "object_items"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CompareTaskObjects. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CompareTaskObjects.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CompareTaskObjects.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_mode: str,
                 object_items: Optional[Sequence['outputs.CompareTaskObjectsObjectItem']] = None):
        """
        :param str object_mode: object mode.
        :param Sequence['CompareTaskObjectsObjectItemArgs'] object_items: object items.
        """
        pulumi.set(__self__, "object_mode", object_mode)
        if object_items is not None:
            pulumi.set(__self__, "object_items", object_items)

    @property
    @pulumi.getter(name="objectMode")
    def object_mode(self) -> str:
        """
        object mode.
        """
        return pulumi.get(self, "object_mode")

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Optional[Sequence['outputs.CompareTaskObjectsObjectItem']]:
        """
        object items.
        """
        return pulumi.get(self, "object_items")


@pulumi.output_type
class CompareTaskObjectsObjectItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbMode":
            suggest = "db_mode"
        elif key == "dbName":
            suggest = "db_name"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "tableMode":
            suggest = "table_mode"
        elif key == "viewMode":
            suggest = "view_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CompareTaskObjectsObjectItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CompareTaskObjectsObjectItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CompareTaskObjectsObjectItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_mode: Optional[str] = None,
                 db_name: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 table_mode: Optional[str] = None,
                 tables: Optional[Sequence['outputs.CompareTaskObjectsObjectItemTable']] = None,
                 view_mode: Optional[str] = None,
                 views: Optional[Sequence['outputs.CompareTaskObjectsObjectItemView']] = None):
        """
        :param str db_mode: database mode.
        :param str db_name: database name.
        :param str schema_name: schema name.
        :param str table_mode: table mode.
        :param Sequence['CompareTaskObjectsObjectItemTableArgs'] tables: table list.
        :param str view_mode: view mode.
        :param Sequence['CompareTaskObjectsObjectItemViewArgs'] views: view list.
        """
        if db_mode is not None:
            pulumi.set(__self__, "db_mode", db_mode)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if table_mode is not None:
            pulumi.set(__self__, "table_mode", table_mode)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)
        if view_mode is not None:
            pulumi.set(__self__, "view_mode", view_mode)
        if views is not None:
            pulumi.set(__self__, "views", views)

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> Optional[str]:
        """
        database mode.
        """
        return pulumi.get(self, "db_mode")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        """
        database name.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        """
        schema name.
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="tableMode")
    def table_mode(self) -> Optional[str]:
        """
        table mode.
        """
        return pulumi.get(self, "table_mode")

    @property
    @pulumi.getter
    def tables(self) -> Optional[Sequence['outputs.CompareTaskObjectsObjectItemTable']]:
        """
        table list.
        """
        return pulumi.get(self, "tables")

    @property
    @pulumi.getter(name="viewMode")
    def view_mode(self) -> Optional[str]:
        """
        view mode.
        """
        return pulumi.get(self, "view_mode")

    @property
    @pulumi.getter
    def views(self) -> Optional[Sequence['outputs.CompareTaskObjectsObjectItemView']]:
        """
        view list.
        """
        return pulumi.get(self, "views")


@pulumi.output_type
class CompareTaskObjectsObjectItemTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CompareTaskObjectsObjectItemTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CompareTaskObjectsObjectItemTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CompareTaskObjectsObjectItemTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 table_name: Optional[str] = None):
        """
        :param str table_name: table name.
        """
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        """
        table name.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class CompareTaskObjectsObjectItemView(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "viewName":
            suggest = "view_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CompareTaskObjectsObjectItemView. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CompareTaskObjectsObjectItemView.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CompareTaskObjectsObjectItemView.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 view_name: Optional[str] = None):
        """
        :param str view_name: view name.
        """
        if view_name is not None:
            pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> Optional[str]:
        """
        view name.
        """
        return pulumi.get(self, "view_name")


@pulumi.output_type
class MigrateJobDstInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessType":
            suggest = "access_type"
        elif key == "databaseType":
            suggest = "database_type"
        elif key == "nodeType":
            suggest = "node_type"
        elif key == "extraAttrs":
            suggest = "extra_attrs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateJobDstInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateJobDstInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateJobDstInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_type: str,
                 database_type: str,
                 infos: Sequence['outputs.MigrateJobDstInfoInfo'],
                 node_type: str,
                 region: str,
                 extra_attrs: Optional[Sequence['outputs.MigrateJobDstInfoExtraAttr']] = None,
                 supplier: Optional[str] = None):
        """
        :param str access_type: AccessType.
        :param str database_type: DatabaseType.
        :param Sequence['MigrateJobDstInfoInfoArgs'] infos: Info.
        :param str node_type: NodeType.
        :param str region: Region.
        :param Sequence['MigrateJobDstInfoExtraAttrArgs'] extra_attrs: ExtraAttr.
        :param str supplier: Supplier.
        """
        pulumi.set(__self__, "access_type", access_type)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "region", region)
        if extra_attrs is not None:
            pulumi.set(__self__, "extra_attrs", extra_attrs)
        if supplier is not None:
            pulumi.set(__self__, "supplier", supplier)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> str:
        """
        AccessType.
        """
        return pulumi.get(self, "access_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        DatabaseType.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.MigrateJobDstInfoInfo']:
        """
        Info.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        NodeType.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="extraAttrs")
    def extra_attrs(self) -> Optional[Sequence['outputs.MigrateJobDstInfoExtraAttr']]:
        """
        ExtraAttr.
        """
        return pulumi.get(self, "extra_attrs")

    @property
    @pulumi.getter
    def supplier(self) -> Optional[str]:
        """
        Supplier.
        """
        return pulumi.get(self, "supplier")


@pulumi.output_type
class MigrateJobDstInfoExtraAttr(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Key.
        :param str value: Value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MigrateJobDstInfoInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountMode":
            suggest = "account_mode"
        elif key == "accountRole":
            suggest = "account_role"
        elif key == "ccnGwId":
            suggest = "ccn_gw_id"
        elif key == "cvmInstanceId":
            suggest = "cvm_instance_id"
        elif key == "dbKernel":
            suggest = "db_kernel"
        elif key == "engineVersion":
            suggest = "engine_version"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "tmpSecretId":
            suggest = "tmp_secret_id"
        elif key == "tmpSecretKey":
            suggest = "tmp_secret_key"
        elif key == "tmpToken":
            suggest = "tmp_token"
        elif key == "uniqDcgId":
            suggest = "uniq_dcg_id"
        elif key == "uniqVpnGwId":
            suggest = "uniq_vpn_gw_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateJobDstInfoInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateJobDstInfoInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateJobDstInfoInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account: Optional[str] = None,
                 account_mode: Optional[str] = None,
                 account_role: Optional[str] = None,
                 ccn_gw_id: Optional[str] = None,
                 cvm_instance_id: Optional[str] = None,
                 db_kernel: Optional[str] = None,
                 engine_version: Optional[str] = None,
                 host: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 role: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 tmp_secret_id: Optional[str] = None,
                 tmp_secret_key: Optional[str] = None,
                 tmp_token: Optional[str] = None,
                 uniq_dcg_id: Optional[str] = None,
                 uniq_vpn_gw_id: Optional[str] = None,
                 user: Optional[str] = None,
                 vpc_id: Optional[str] = None):
        """
        :param str account: Account.
        :param str account_mode: AccountMode.
        :param str account_role: AccountRole.
        :param str ccn_gw_id: CcnGwId.
        :param str cvm_instance_id: CvmInstanceId.
        :param str db_kernel: DbKernel.
        :param str engine_version: EngineVersion.
        :param str host: Host.
        :param str instance_id: InstanceId.
        :param str password: Password.
        :param int port: Port.
        :param str role: Role.
        :param str subnet_id: SubnetId.
        :param str tmp_secret_id: TmpSecretId.
        :param str tmp_secret_key: TmpSecretKey.
        :param str tmp_token: TmpToken.
        :param str uniq_dcg_id: UniqDcgId.
        :param str uniq_vpn_gw_id: UniqVpnGwId.
        :param str user: User.
        :param str vpc_id: VpcId.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if account_mode is not None:
            pulumi.set(__self__, "account_mode", account_mode)
        if account_role is not None:
            pulumi.set(__self__, "account_role", account_role)
        if ccn_gw_id is not None:
            pulumi.set(__self__, "ccn_gw_id", ccn_gw_id)
        if cvm_instance_id is not None:
            pulumi.set(__self__, "cvm_instance_id", cvm_instance_id)
        if db_kernel is not None:
            pulumi.set(__self__, "db_kernel", db_kernel)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tmp_secret_id is not None:
            pulumi.set(__self__, "tmp_secret_id", tmp_secret_id)
        if tmp_secret_key is not None:
            pulumi.set(__self__, "tmp_secret_key", tmp_secret_key)
        if tmp_token is not None:
            pulumi.set(__self__, "tmp_token", tmp_token)
        if uniq_dcg_id is not None:
            pulumi.set(__self__, "uniq_dcg_id", uniq_dcg_id)
        if uniq_vpn_gw_id is not None:
            pulumi.set(__self__, "uniq_vpn_gw_id", uniq_vpn_gw_id)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def account(self) -> Optional[str]:
        """
        Account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="accountMode")
    def account_mode(self) -> Optional[str]:
        """
        AccountMode.
        """
        return pulumi.get(self, "account_mode")

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> Optional[str]:
        """
        AccountRole.
        """
        return pulumi.get(self, "account_role")

    @property
    @pulumi.getter(name="ccnGwId")
    def ccn_gw_id(self) -> Optional[str]:
        """
        CcnGwId.
        """
        return pulumi.get(self, "ccn_gw_id")

    @property
    @pulumi.getter(name="cvmInstanceId")
    def cvm_instance_id(self) -> Optional[str]:
        """
        CvmInstanceId.
        """
        return pulumi.get(self, "cvm_instance_id")

    @property
    @pulumi.getter(name="dbKernel")
    def db_kernel(self) -> Optional[str]:
        """
        DbKernel.
        """
        return pulumi.get(self, "db_kernel")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[str]:
        """
        EngineVersion.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        InstanceId.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        SubnetId.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tmpSecretId")
    def tmp_secret_id(self) -> Optional[str]:
        """
        TmpSecretId.
        """
        return pulumi.get(self, "tmp_secret_id")

    @property
    @pulumi.getter(name="tmpSecretKey")
    def tmp_secret_key(self) -> Optional[str]:
        """
        TmpSecretKey.
        """
        return pulumi.get(self, "tmp_secret_key")

    @property
    @pulumi.getter(name="tmpToken")
    def tmp_token(self) -> Optional[str]:
        """
        TmpToken.
        """
        return pulumi.get(self, "tmp_token")

    @property
    @pulumi.getter(name="uniqDcgId")
    def uniq_dcg_id(self) -> Optional[str]:
        """
        UniqDcgId.
        """
        return pulumi.get(self, "uniq_dcg_id")

    @property
    @pulumi.getter(name="uniqVpnGwId")
    def uniq_vpn_gw_id(self) -> Optional[str]:
        """
        UniqVpnGwId.
        """
        return pulumi.get(self, "uniq_vpn_gw_id")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        VpcId.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class MigrateJobMigrateOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseTable":
            suggest = "database_table"
        elif key == "extraAttrs":
            suggest = "extra_attrs"
        elif key == "isDstReadOnly":
            suggest = "is_dst_read_only"
        elif key == "isMigrateAccount":
            suggest = "is_migrate_account"
        elif key == "isOverrideRoot":
            suggest = "is_override_root"
        elif key == "migrateType":
            suggest = "migrate_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateJobMigrateOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateJobMigrateOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateJobMigrateOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_table: 'outputs.MigrateJobMigrateOptionDatabaseTable',
                 consistency: Optional['outputs.MigrateJobMigrateOptionConsistency'] = None,
                 extra_attrs: Optional[Sequence['outputs.MigrateJobMigrateOptionExtraAttr']] = None,
                 is_dst_read_only: Optional[bool] = None,
                 is_migrate_account: Optional[bool] = None,
                 is_override_root: Optional[bool] = None,
                 migrate_type: Optional[str] = None):
        """
        :param 'MigrateJobMigrateOptionDatabaseTableArgs' database_table: Migration object option, you need to tell the migration service which library table objects to migrate.
        :param 'MigrateJobMigrateOptionConsistencyArgs' consistency: Consistency.
        :param Sequence['MigrateJobMigrateOptionExtraAttrArgs'] extra_attrs: ExtraAttr.
        :param bool is_dst_read_only: IsDstReadOnly.
        :param bool is_migrate_account: IsMigrateAccount.
        :param bool is_override_root: IsOverrideRoot.
        :param str migrate_type: MigrateType.
        """
        pulumi.set(__self__, "database_table", database_table)
        if consistency is not None:
            pulumi.set(__self__, "consistency", consistency)
        if extra_attrs is not None:
            pulumi.set(__self__, "extra_attrs", extra_attrs)
        if is_dst_read_only is not None:
            pulumi.set(__self__, "is_dst_read_only", is_dst_read_only)
        if is_migrate_account is not None:
            pulumi.set(__self__, "is_migrate_account", is_migrate_account)
        if is_override_root is not None:
            pulumi.set(__self__, "is_override_root", is_override_root)
        if migrate_type is not None:
            pulumi.set(__self__, "migrate_type", migrate_type)

    @property
    @pulumi.getter(name="databaseTable")
    def database_table(self) -> 'outputs.MigrateJobMigrateOptionDatabaseTable':
        """
        Migration object option, you need to tell the migration service which library table objects to migrate.
        """
        return pulumi.get(self, "database_table")

    @property
    @pulumi.getter
    def consistency(self) -> Optional['outputs.MigrateJobMigrateOptionConsistency']:
        """
        Consistency.
        """
        return pulumi.get(self, "consistency")

    @property
    @pulumi.getter(name="extraAttrs")
    def extra_attrs(self) -> Optional[Sequence['outputs.MigrateJobMigrateOptionExtraAttr']]:
        """
        ExtraAttr.
        """
        return pulumi.get(self, "extra_attrs")

    @property
    @pulumi.getter(name="isDstReadOnly")
    def is_dst_read_only(self) -> Optional[bool]:
        """
        IsDstReadOnly.
        """
        return pulumi.get(self, "is_dst_read_only")

    @property
    @pulumi.getter(name="isMigrateAccount")
    def is_migrate_account(self) -> Optional[bool]:
        """
        IsMigrateAccount.
        """
        return pulumi.get(self, "is_migrate_account")

    @property
    @pulumi.getter(name="isOverrideRoot")
    def is_override_root(self) -> Optional[bool]:
        """
        IsOverrideRoot.
        """
        return pulumi.get(self, "is_override_root")

    @property
    @pulumi.getter(name="migrateType")
    def migrate_type(self) -> Optional[str]:
        """
        MigrateType.
        """
        return pulumi.get(self, "migrate_type")


@pulumi.output_type
class MigrateJobMigrateOptionConsistency(dict):
    def __init__(__self__, *,
                 mode: Optional[str] = None):
        """
        :param str mode: ConsistencyOption.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        ConsistencyOption.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class MigrateJobMigrateOptionDatabaseTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectMode":
            suggest = "object_mode"
        elif key == "advancedObjects":
            suggest = "advanced_objects"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateJobMigrateOptionDatabaseTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateJobMigrateOptionDatabaseTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateJobMigrateOptionDatabaseTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_mode: str,
                 advanced_objects: Optional[Sequence[str]] = None,
                 databases: Optional[Sequence['outputs.MigrateJobMigrateOptionDatabaseTableDatabase']] = None):
        """
        :param str object_mode: Object mode. eg:all,partial.
        :param Sequence[str] advanced_objects: AdvancedObjects.
        :param Sequence['MigrateJobMigrateOptionDatabaseTableDatabaseArgs'] databases: The database list.
        """
        pulumi.set(__self__, "object_mode", object_mode)
        if advanced_objects is not None:
            pulumi.set(__self__, "advanced_objects", advanced_objects)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)

    @property
    @pulumi.getter(name="objectMode")
    def object_mode(self) -> str:
        """
        Object mode. eg:all,partial.
        """
        return pulumi.get(self, "object_mode")

    @property
    @pulumi.getter(name="advancedObjects")
    def advanced_objects(self) -> Optional[Sequence[str]]:
        """
        AdvancedObjects.
        """
        return pulumi.get(self, "advanced_objects")

    @property
    @pulumi.getter
    def databases(self) -> Optional[Sequence['outputs.MigrateJobMigrateOptionDatabaseTableDatabase']]:
        """
        The database list.
        """
        return pulumi.get(self, "databases")


@pulumi.output_type
class MigrateJobMigrateOptionDatabaseTableDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbMode":
            suggest = "db_mode"
        elif key == "dbName":
            suggest = "db_name"
        elif key == "eventMode":
            suggest = "event_mode"
        elif key == "functionMode":
            suggest = "function_mode"
        elif key == "newDbName":
            suggest = "new_db_name"
        elif key == "newSchemaName":
            suggest = "new_schema_name"
        elif key == "procedureMode":
            suggest = "procedure_mode"
        elif key == "roleMode":
            suggest = "role_mode"
        elif key == "schemaMode":
            suggest = "schema_mode"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "tableMode":
            suggest = "table_mode"
        elif key == "triggerMode":
            suggest = "trigger_mode"
        elif key == "viewMode":
            suggest = "view_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateJobMigrateOptionDatabaseTableDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateJobMigrateOptionDatabaseTableDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateJobMigrateOptionDatabaseTableDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_mode: Optional[str] = None,
                 db_name: Optional[str] = None,
                 event_mode: Optional[str] = None,
                 events: Optional[Sequence[str]] = None,
                 function_mode: Optional[str] = None,
                 functions: Optional[Sequence[str]] = None,
                 new_db_name: Optional[str] = None,
                 new_schema_name: Optional[str] = None,
                 procedure_mode: Optional[str] = None,
                 procedures: Optional[Sequence[str]] = None,
                 role_mode: Optional[str] = None,
                 roles: Optional[Sequence['outputs.MigrateJobMigrateOptionDatabaseTableDatabaseRole']] = None,
                 schema_mode: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 table_mode: Optional[str] = None,
                 tables: Optional[Sequence['outputs.MigrateJobMigrateOptionDatabaseTableDatabaseTable']] = None,
                 trigger_mode: Optional[str] = None,
                 triggers: Optional[Sequence[str]] = None,
                 view_mode: Optional[str] = None,
                 views: Optional[Sequence['outputs.MigrateJobMigrateOptionDatabaseTableDatabaseView']] = None):
        """
        :param str db_mode: DB selection mode:all (for all objects under the current object), partial (partial objects), when the ObjectMode is partial, this item is required.
        :param str db_name: database name.
        :param str event_mode: EventMode.
        :param Sequence[str] events: Events.
        :param str function_mode: FunctionMode.
        :param Sequence[str] functions: Functions.
        :param str new_db_name: New database name.
        :param str new_schema_name: schema name after migration or synchronization.
        :param str procedure_mode: ProcedureMode.
        :param Sequence[str] procedures: Procedures.
        :param str role_mode: RoleMode.
        :param Sequence['MigrateJobMigrateOptionDatabaseTableDatabaseRoleArgs'] roles: Roles.
        :param str schema_mode: schema mode: all,partial.
        :param str schema_name: schema name.
        :param str table_mode: table mode: all,partial.
        :param Sequence['MigrateJobMigrateOptionDatabaseTableDatabaseTableArgs'] tables: tables list.
        :param str trigger_mode: TriggerMode.
        :param Sequence[str] triggers: Triggers.
        :param str view_mode: ViewMode.
        :param Sequence['MigrateJobMigrateOptionDatabaseTableDatabaseViewArgs'] views: Views.
        """
        if db_mode is not None:
            pulumi.set(__self__, "db_mode", db_mode)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if event_mode is not None:
            pulumi.set(__self__, "event_mode", event_mode)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if function_mode is not None:
            pulumi.set(__self__, "function_mode", function_mode)
        if functions is not None:
            pulumi.set(__self__, "functions", functions)
        if new_db_name is not None:
            pulumi.set(__self__, "new_db_name", new_db_name)
        if new_schema_name is not None:
            pulumi.set(__self__, "new_schema_name", new_schema_name)
        if procedure_mode is not None:
            pulumi.set(__self__, "procedure_mode", procedure_mode)
        if procedures is not None:
            pulumi.set(__self__, "procedures", procedures)
        if role_mode is not None:
            pulumi.set(__self__, "role_mode", role_mode)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if schema_mode is not None:
            pulumi.set(__self__, "schema_mode", schema_mode)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if table_mode is not None:
            pulumi.set(__self__, "table_mode", table_mode)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)
        if trigger_mode is not None:
            pulumi.set(__self__, "trigger_mode", trigger_mode)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if view_mode is not None:
            pulumi.set(__self__, "view_mode", view_mode)
        if views is not None:
            pulumi.set(__self__, "views", views)

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> Optional[str]:
        """
        DB selection mode:all (for all objects under the current object), partial (partial objects), when the ObjectMode is partial, this item is required.
        """
        return pulumi.get(self, "db_mode")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        """
        database name.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="eventMode")
    def event_mode(self) -> Optional[str]:
        """
        EventMode.
        """
        return pulumi.get(self, "event_mode")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence[str]]:
        """
        Events.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="functionMode")
    def function_mode(self) -> Optional[str]:
        """
        FunctionMode.
        """
        return pulumi.get(self, "function_mode")

    @property
    @pulumi.getter
    def functions(self) -> Optional[Sequence[str]]:
        """
        Functions.
        """
        return pulumi.get(self, "functions")

    @property
    @pulumi.getter(name="newDbName")
    def new_db_name(self) -> Optional[str]:
        """
        New database name.
        """
        return pulumi.get(self, "new_db_name")

    @property
    @pulumi.getter(name="newSchemaName")
    def new_schema_name(self) -> Optional[str]:
        """
        schema name after migration or synchronization.
        """
        return pulumi.get(self, "new_schema_name")

    @property
    @pulumi.getter(name="procedureMode")
    def procedure_mode(self) -> Optional[str]:
        """
        ProcedureMode.
        """
        return pulumi.get(self, "procedure_mode")

    @property
    @pulumi.getter
    def procedures(self) -> Optional[Sequence[str]]:
        """
        Procedures.
        """
        return pulumi.get(self, "procedures")

    @property
    @pulumi.getter(name="roleMode")
    def role_mode(self) -> Optional[str]:
        """
        RoleMode.
        """
        return pulumi.get(self, "role_mode")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence['outputs.MigrateJobMigrateOptionDatabaseTableDatabaseRole']]:
        """
        Roles.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="schemaMode")
    def schema_mode(self) -> Optional[str]:
        """
        schema mode: all,partial.
        """
        return pulumi.get(self, "schema_mode")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        """
        schema name.
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="tableMode")
    def table_mode(self) -> Optional[str]:
        """
        table mode: all,partial.
        """
        return pulumi.get(self, "table_mode")

    @property
    @pulumi.getter
    def tables(self) -> Optional[Sequence['outputs.MigrateJobMigrateOptionDatabaseTableDatabaseTable']]:
        """
        tables list.
        """
        return pulumi.get(self, "tables")

    @property
    @pulumi.getter(name="triggerMode")
    def trigger_mode(self) -> Optional[str]:
        """
        TriggerMode.
        """
        return pulumi.get(self, "trigger_mode")

    @property
    @pulumi.getter
    def triggers(self) -> Optional[Sequence[str]]:
        """
        Triggers.
        """
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter(name="viewMode")
    def view_mode(self) -> Optional[str]:
        """
        ViewMode.
        """
        return pulumi.get(self, "view_mode")

    @property
    @pulumi.getter
    def views(self) -> Optional[Sequence['outputs.MigrateJobMigrateOptionDatabaseTableDatabaseView']]:
        """
        Views.
        """
        return pulumi.get(self, "views")


@pulumi.output_type
class MigrateJobMigrateOptionDatabaseTableDatabaseRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newRoleName":
            suggest = "new_role_name"
        elif key == "roleName":
            suggest = "role_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateJobMigrateOptionDatabaseTableDatabaseRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateJobMigrateOptionDatabaseTableDatabaseRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateJobMigrateOptionDatabaseTableDatabaseRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_role_name: Optional[str] = None,
                 role_name: Optional[str] = None):
        """
        :param str new_role_name: NewRoleName.
        :param str role_name: RoleName.
        """
        if new_role_name is not None:
            pulumi.set(__self__, "new_role_name", new_role_name)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter(name="newRoleName")
    def new_role_name(self) -> Optional[str]:
        """
        NewRoleName.
        """
        return pulumi.get(self, "new_role_name")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[str]:
        """
        RoleName.
        """
        return pulumi.get(self, "role_name")


@pulumi.output_type
class MigrateJobMigrateOptionDatabaseTableDatabaseTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newTableName":
            suggest = "new_table_name"
        elif key == "tableEditMode":
            suggest = "table_edit_mode"
        elif key == "tableName":
            suggest = "table_name"
        elif key == "tmpTables":
            suggest = "tmp_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateJobMigrateOptionDatabaseTableDatabaseTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateJobMigrateOptionDatabaseTableDatabaseTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateJobMigrateOptionDatabaseTableDatabaseTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_table_name: Optional[str] = None,
                 table_edit_mode: Optional[str] = None,
                 table_name: Optional[str] = None,
                 tmp_tables: Optional[Sequence[str]] = None):
        """
        :param str new_table_name: new table name.
        :param str table_edit_mode: table edit mode.
        :param str table_name: table name.
        :param Sequence[str] tmp_tables: temporary tables.
        """
        if new_table_name is not None:
            pulumi.set(__self__, "new_table_name", new_table_name)
        if table_edit_mode is not None:
            pulumi.set(__self__, "table_edit_mode", table_edit_mode)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if tmp_tables is not None:
            pulumi.set(__self__, "tmp_tables", tmp_tables)

    @property
    @pulumi.getter(name="newTableName")
    def new_table_name(self) -> Optional[str]:
        """
        new table name.
        """
        return pulumi.get(self, "new_table_name")

    @property
    @pulumi.getter(name="tableEditMode")
    def table_edit_mode(self) -> Optional[str]:
        """
        table edit mode.
        """
        return pulumi.get(self, "table_edit_mode")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        """
        table name.
        """
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="tmpTables")
    def tmp_tables(self) -> Optional[Sequence[str]]:
        """
        temporary tables.
        """
        return pulumi.get(self, "tmp_tables")


@pulumi.output_type
class MigrateJobMigrateOptionDatabaseTableDatabaseView(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newViewName":
            suggest = "new_view_name"
        elif key == "viewName":
            suggest = "view_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateJobMigrateOptionDatabaseTableDatabaseView. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateJobMigrateOptionDatabaseTableDatabaseView.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateJobMigrateOptionDatabaseTableDatabaseView.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_view_name: Optional[str] = None,
                 view_name: Optional[str] = None):
        """
        :param str new_view_name: NewViewName.
        :param str view_name: ViewName.
        """
        if new_view_name is not None:
            pulumi.set(__self__, "new_view_name", new_view_name)
        if view_name is not None:
            pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter(name="newViewName")
    def new_view_name(self) -> Optional[str]:
        """
        NewViewName.
        """
        return pulumi.get(self, "new_view_name")

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> Optional[str]:
        """
        ViewName.
        """
        return pulumi.get(self, "view_name")


@pulumi.output_type
class MigrateJobMigrateOptionExtraAttr(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Key.
        :param str value: Value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MigrateJobSrcInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessType":
            suggest = "access_type"
        elif key == "databaseType":
            suggest = "database_type"
        elif key == "nodeType":
            suggest = "node_type"
        elif key == "extraAttrs":
            suggest = "extra_attrs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateJobSrcInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateJobSrcInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateJobSrcInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_type: str,
                 database_type: str,
                 infos: Sequence['outputs.MigrateJobSrcInfoInfo'],
                 node_type: str,
                 region: str,
                 extra_attrs: Optional[Sequence['outputs.MigrateJobSrcInfoExtraAttr']] = None,
                 supplier: Optional[str] = None):
        """
        :param str access_type: AccessType.
        :param str database_type: DatabaseType.
        :param Sequence['MigrateJobSrcInfoInfoArgs'] infos: Info.
        :param str node_type: NodeType.
        :param str region: Region.
        :param Sequence['MigrateJobSrcInfoExtraAttrArgs'] extra_attrs: ExtraAttr.
        :param str supplier: Supplier.
        """
        pulumi.set(__self__, "access_type", access_type)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "region", region)
        if extra_attrs is not None:
            pulumi.set(__self__, "extra_attrs", extra_attrs)
        if supplier is not None:
            pulumi.set(__self__, "supplier", supplier)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> str:
        """
        AccessType.
        """
        return pulumi.get(self, "access_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        DatabaseType.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.MigrateJobSrcInfoInfo']:
        """
        Info.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        NodeType.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="extraAttrs")
    def extra_attrs(self) -> Optional[Sequence['outputs.MigrateJobSrcInfoExtraAttr']]:
        """
        ExtraAttr.
        """
        return pulumi.get(self, "extra_attrs")

    @property
    @pulumi.getter
    def supplier(self) -> Optional[str]:
        """
        Supplier.
        """
        return pulumi.get(self, "supplier")


@pulumi.output_type
class MigrateJobSrcInfoExtraAttr(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Key.
        :param str value: Value.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class MigrateJobSrcInfoInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountMode":
            suggest = "account_mode"
        elif key == "accountRole":
            suggest = "account_role"
        elif key == "ccnGwId":
            suggest = "ccn_gw_id"
        elif key == "cvmInstanceId":
            suggest = "cvm_instance_id"
        elif key == "dbKernel":
            suggest = "db_kernel"
        elif key == "engineVersion":
            suggest = "engine_version"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "tmpSecretId":
            suggest = "tmp_secret_id"
        elif key == "tmpSecretKey":
            suggest = "tmp_secret_key"
        elif key == "tmpToken":
            suggest = "tmp_token"
        elif key == "uniqDcgId":
            suggest = "uniq_dcg_id"
        elif key == "uniqVpnGwId":
            suggest = "uniq_vpn_gw_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateJobSrcInfoInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateJobSrcInfoInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateJobSrcInfoInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account: Optional[str] = None,
                 account_mode: Optional[str] = None,
                 account_role: Optional[str] = None,
                 ccn_gw_id: Optional[str] = None,
                 cvm_instance_id: Optional[str] = None,
                 db_kernel: Optional[str] = None,
                 engine_version: Optional[str] = None,
                 host: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 role: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 tmp_secret_id: Optional[str] = None,
                 tmp_secret_key: Optional[str] = None,
                 tmp_token: Optional[str] = None,
                 uniq_dcg_id: Optional[str] = None,
                 uniq_vpn_gw_id: Optional[str] = None,
                 user: Optional[str] = None,
                 vpc_id: Optional[str] = None):
        """
        :param str account: Account.
        :param str account_mode: AccountMode.
        :param str account_role: AccountRole.
        :param str ccn_gw_id: CcnGwId.
        :param str cvm_instance_id: CvmInstanceId.
        :param str db_kernel: DbKernel.
        :param str engine_version: EngineVersion.
        :param str host: Host.
        :param str instance_id: InstanceId.
        :param str password: Password.
        :param int port: Port.
        :param str role: Role.
        :param str subnet_id: SubnetId.
        :param str tmp_secret_id: TmpSecretId.
        :param str tmp_secret_key: TmpSecretKey.
        :param str tmp_token: TmpToken.
        :param str uniq_dcg_id: UniqDcgId.
        :param str uniq_vpn_gw_id: UniqVpnGwId.
        :param str user: User.
        :param str vpc_id: VpcId.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if account_mode is not None:
            pulumi.set(__self__, "account_mode", account_mode)
        if account_role is not None:
            pulumi.set(__self__, "account_role", account_role)
        if ccn_gw_id is not None:
            pulumi.set(__self__, "ccn_gw_id", ccn_gw_id)
        if cvm_instance_id is not None:
            pulumi.set(__self__, "cvm_instance_id", cvm_instance_id)
        if db_kernel is not None:
            pulumi.set(__self__, "db_kernel", db_kernel)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tmp_secret_id is not None:
            pulumi.set(__self__, "tmp_secret_id", tmp_secret_id)
        if tmp_secret_key is not None:
            pulumi.set(__self__, "tmp_secret_key", tmp_secret_key)
        if tmp_token is not None:
            pulumi.set(__self__, "tmp_token", tmp_token)
        if uniq_dcg_id is not None:
            pulumi.set(__self__, "uniq_dcg_id", uniq_dcg_id)
        if uniq_vpn_gw_id is not None:
            pulumi.set(__self__, "uniq_vpn_gw_id", uniq_vpn_gw_id)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def account(self) -> Optional[str]:
        """
        Account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="accountMode")
    def account_mode(self) -> Optional[str]:
        """
        AccountMode.
        """
        return pulumi.get(self, "account_mode")

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> Optional[str]:
        """
        AccountRole.
        """
        return pulumi.get(self, "account_role")

    @property
    @pulumi.getter(name="ccnGwId")
    def ccn_gw_id(self) -> Optional[str]:
        """
        CcnGwId.
        """
        return pulumi.get(self, "ccn_gw_id")

    @property
    @pulumi.getter(name="cvmInstanceId")
    def cvm_instance_id(self) -> Optional[str]:
        """
        CvmInstanceId.
        """
        return pulumi.get(self, "cvm_instance_id")

    @property
    @pulumi.getter(name="dbKernel")
    def db_kernel(self) -> Optional[str]:
        """
        DbKernel.
        """
        return pulumi.get(self, "db_kernel")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[str]:
        """
        EngineVersion.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        InstanceId.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        SubnetId.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tmpSecretId")
    def tmp_secret_id(self) -> Optional[str]:
        """
        TmpSecretId.
        """
        return pulumi.get(self, "tmp_secret_id")

    @property
    @pulumi.getter(name="tmpSecretKey")
    def tmp_secret_key(self) -> Optional[str]:
        """
        TmpSecretKey.
        """
        return pulumi.get(self, "tmp_secret_key")

    @property
    @pulumi.getter(name="tmpToken")
    def tmp_token(self) -> Optional[str]:
        """
        TmpToken.
        """
        return pulumi.get(self, "tmp_token")

    @property
    @pulumi.getter(name="uniqDcgId")
    def uniq_dcg_id(self) -> Optional[str]:
        """
        UniqDcgId.
        """
        return pulumi.get(self, "uniq_dcg_id")

    @property
    @pulumi.getter(name="uniqVpnGwId")
    def uniq_vpn_gw_id(self) -> Optional[str]:
        """
        UniqVpnGwId.
        """
        return pulumi.get(self, "uniq_vpn_gw_id")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        VpcId.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class MigrateServiceTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValue":
            suggest = "tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrateServiceTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrateServiceTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrateServiceTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_key: Optional[str] = None,
                 tag_value: Optional[str] = None):
        """
        :param str tag_key: tag key.
        :param str tag_value: tag value.
        """
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[str]:
        """
        tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[str]:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class SyncConfigDstInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountMode":
            suggest = "account_mode"
        elif key == "accountRole":
            suggest = "account_role"
        elif key == "ccnId":
            suggest = "ccn_id"
        elif key == "cvmInstanceId":
            suggest = "cvm_instance_id"
        elif key == "databaseNetEnv":
            suggest = "database_net_env"
        elif key == "dbKernel":
            suggest = "db_kernel"
        elif key == "dbName":
            suggest = "db_name"
        elif key == "encryptConn":
            suggest = "encrypt_conn"
        elif key == "engineVersion":
            suggest = "engine_version"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "roleExternalId":
            suggest = "role_external_id"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "tmpSecretId":
            suggest = "tmp_secret_id"
        elif key == "tmpSecretKey":
            suggest = "tmp_secret_key"
        elif key == "tmpToken":
            suggest = "tmp_token"
        elif key == "uniqDcgId":
            suggest = "uniq_dcg_id"
        elif key == "uniqVpnGwId":
            suggest = "uniq_vpn_gw_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyncConfigDstInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyncConfigDstInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyncConfigDstInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account: Optional[str] = None,
                 account_mode: Optional[str] = None,
                 account_role: Optional[str] = None,
                 ccn_id: Optional[str] = None,
                 cvm_instance_id: Optional[str] = None,
                 database_net_env: Optional[str] = None,
                 db_kernel: Optional[str] = None,
                 db_name: Optional[str] = None,
                 encrypt_conn: Optional[str] = None,
                 engine_version: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 ip: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 region: Optional[str] = None,
                 role: Optional[str] = None,
                 role_external_id: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 supplier: Optional[str] = None,
                 tmp_secret_id: Optional[str] = None,
                 tmp_secret_key: Optional[str] = None,
                 tmp_token: Optional[str] = None,
                 uniq_dcg_id: Optional[str] = None,
                 uniq_vpn_gw_id: Optional[str] = None,
                 user: Optional[str] = None,
                 vpc_id: Optional[str] = None):
        """
        :param str account: The account to which the instance belongs. This field is required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        :param str account_mode: The account to which the resource belongs is empty or self (represents resources within this account), other (represents cross-account resources). Note: This field may return null, indicating that no valid value can be obtained.
        :param str account_role: The role during cross-account synchronization, only [a-zA-Z0-9-_]+ is allowed, if it is a cross-account instance, this field is required. Note: This field may return null, indicating that no valid value can be obtained.
        :param str ccn_id: Cloud networking ID, which is required for the cloud networking access type. Note: This field may return null, indicating that no valid value can be obtained.
        :param str cvm_instance_id: CVM instance short ID, which is the same as the instance ID displayed on the cloud server console page. If it is a self-built instance of CVM, this field needs to be passed. Note: This field may return null, indicating that no valid value can be obtained.
        :param str database_net_env: The network environment to which the database belongs. It is required when AccessType is Cloud Network (CCN). `UserIDC` represents the user IDC. `TencentVPC` represents Tencent Cloud VPC. Note: This field may return null, indicating that no valid value can be obtained.
        :param str db_kernel: Database kernel type, used to distinguish different kernels in tdsql: percona, mariadb, mysql. Note: This field may return null, indicating that no valid value can be obtained.
        :param str db_name: Database name, when the database is cdwpg, it needs to be provided. Note: This field may return null, indicating that no valid value can be obtained.
        :param str encrypt_conn: Whether to use encrypted transmission, UnEncrypted means not to use encrypted transmission, Encrypted means to use encrypted transmission, the default is UnEncrypted. Note: This field may return null, indicating that no valid value can be obtained.
        :param str engine_version: Database version, valid only when the instance is an RDS instance, ignored by other instances, the format is: 5.6 or 5.7, the default is 5.6. Note: This field may return null, indicating that no valid value can be obtained.
        :param str instance_id: Database instance id. Note: This field may return null, indicating that no valid value can be obtained.
        :param str ip: The IP address of the instance, which is required when the access type is non-cdb. Note: This field may return null, indicating that no valid value can be obtained.
        :param str password: Password, required for instances that require username and password authentication for access. Note: This field may return null, indicating that no valid value can be obtained.
        :param int port: Instance port, this item is required when the access type is non-cdb. Note: This field may return null, indicating that no valid value can be obtained.
        :param str region: The english name of region. Note: This field may return null, indicating that no valid value can be obtained.
        :param str role: The node type of tdsql mysql version, the enumeration value is proxy, set. Note: This field may return null, indicating that no valid value can be obtained.
        :param str role_external_id: External role id. Note: This field may return null, indicating that no valid value can be obtained.
        :param str subnet_id: The subnet ID under the private network, this item is required for the private network, leased line, and VPN access methods. Note: This field may return null, indicating that no valid value can be obtained.
        :param str supplier: Cloud vendor type, when the instance is an RDS instance, fill in aliyun, in other cases fill in others, the default is others. Note: This field may return null, indicating that no valid value can be obtained.
        :param str tmp_secret_id: Temporary key Id, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        :param str tmp_secret_key: Temporary key Key, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        :param str tmp_token: Temporary Token, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        :param str uniq_dcg_id: Leased line gateway ID, which is required for the leased line access type. Note: This field may return null, indicating that no valid value can be obtained.
        :param str uniq_vpn_gw_id: VPN gateway ID, which is required for the VPN access type. Note: This field may return null, indicating that no valid value can be obtained.
        :param str user: Username, required for instances that require username and password authentication for access. Note: This field may return null, indicating that no valid value can be obtained.
        :param str vpc_id: Private network ID, which is required for access methods of private network, leased line, and VPN. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if account_mode is not None:
            pulumi.set(__self__, "account_mode", account_mode)
        if account_role is not None:
            pulumi.set(__self__, "account_role", account_role)
        if ccn_id is not None:
            pulumi.set(__self__, "ccn_id", ccn_id)
        if cvm_instance_id is not None:
            pulumi.set(__self__, "cvm_instance_id", cvm_instance_id)
        if database_net_env is not None:
            pulumi.set(__self__, "database_net_env", database_net_env)
        if db_kernel is not None:
            pulumi.set(__self__, "db_kernel", db_kernel)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if encrypt_conn is not None:
            pulumi.set(__self__, "encrypt_conn", encrypt_conn)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if role_external_id is not None:
            pulumi.set(__self__, "role_external_id", role_external_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if supplier is not None:
            pulumi.set(__self__, "supplier", supplier)
        if tmp_secret_id is not None:
            pulumi.set(__self__, "tmp_secret_id", tmp_secret_id)
        if tmp_secret_key is not None:
            pulumi.set(__self__, "tmp_secret_key", tmp_secret_key)
        if tmp_token is not None:
            pulumi.set(__self__, "tmp_token", tmp_token)
        if uniq_dcg_id is not None:
            pulumi.set(__self__, "uniq_dcg_id", uniq_dcg_id)
        if uniq_vpn_gw_id is not None:
            pulumi.set(__self__, "uniq_vpn_gw_id", uniq_vpn_gw_id)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def account(self) -> Optional[str]:
        """
        The account to which the instance belongs. This field is required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="accountMode")
    def account_mode(self) -> Optional[str]:
        """
        The account to which the resource belongs is empty or self (represents resources within this account), other (represents cross-account resources). Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "account_mode")

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> Optional[str]:
        """
        The role during cross-account synchronization, only [a-zA-Z0-9-_]+ is allowed, if it is a cross-account instance, this field is required. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "account_role")

    @property
    @pulumi.getter(name="ccnId")
    def ccn_id(self) -> Optional[str]:
        """
        Cloud networking ID, which is required for the cloud networking access type. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ccn_id")

    @property
    @pulumi.getter(name="cvmInstanceId")
    def cvm_instance_id(self) -> Optional[str]:
        """
        CVM instance short ID, which is the same as the instance ID displayed on the cloud server console page. If it is a self-built instance of CVM, this field needs to be passed. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cvm_instance_id")

    @property
    @pulumi.getter(name="databaseNetEnv")
    def database_net_env(self) -> Optional[str]:
        """
        The network environment to which the database belongs. It is required when AccessType is Cloud Network (CCN). `UserIDC` represents the user IDC. `TencentVPC` represents Tencent Cloud VPC. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "database_net_env")

    @property
    @pulumi.getter(name="dbKernel")
    def db_kernel(self) -> Optional[str]:
        """
        Database kernel type, used to distinguish different kernels in tdsql: percona, mariadb, mysql. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "db_kernel")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        """
        Database name, when the database is cdwpg, it needs to be provided. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="encryptConn")
    def encrypt_conn(self) -> Optional[str]:
        """
        Whether to use encrypted transmission, UnEncrypted means not to use encrypted transmission, Encrypted means to use encrypted transmission, the default is UnEncrypted. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "encrypt_conn")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[str]:
        """
        Database version, valid only when the instance is an RDS instance, ignored by other instances, the format is: 5.6 or 5.7, the default is 5.6. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        Database instance id. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        The IP address of the instance, which is required when the access type is non-cdb. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password, required for instances that require username and password authentication for access. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Instance port, this item is required when the access type is non-cdb. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The english name of region. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        The node type of tdsql mysql version, the enumeration value is proxy, set. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="roleExternalId")
    def role_external_id(self) -> Optional[str]:
        """
        External role id. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "role_external_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The subnet ID under the private network, this item is required for the private network, leased line, and VPN access methods. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def supplier(self) -> Optional[str]:
        """
        Cloud vendor type, when the instance is an RDS instance, fill in aliyun, in other cases fill in others, the default is others. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "supplier")

    @property
    @pulumi.getter(name="tmpSecretId")
    def tmp_secret_id(self) -> Optional[str]:
        """
        Temporary key Id, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "tmp_secret_id")

    @property
    @pulumi.getter(name="tmpSecretKey")
    def tmp_secret_key(self) -> Optional[str]:
        """
        Temporary key Key, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "tmp_secret_key")

    @property
    @pulumi.getter(name="tmpToken")
    def tmp_token(self) -> Optional[str]:
        """
        Temporary Token, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "tmp_token")

    @property
    @pulumi.getter(name="uniqDcgId")
    def uniq_dcg_id(self) -> Optional[str]:
        """
        Leased line gateway ID, which is required for the leased line access type. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "uniq_dcg_id")

    @property
    @pulumi.getter(name="uniqVpnGwId")
    def uniq_vpn_gw_id(self) -> Optional[str]:
        """
        VPN gateway ID, which is required for the VPN access type. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "uniq_vpn_gw_id")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        Username, required for instances that require username and password authentication for access. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        Private network ID, which is required for access methods of private network, leased line, and VPN. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class SyncConfigObjects(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advancedObjects":
            suggest = "advanced_objects"
        elif key == "onlineDdl":
            suggest = "online_ddl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyncConfigObjects. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyncConfigObjects.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyncConfigObjects.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advanced_objects: Optional[Sequence[str]] = None,
                 databases: Optional[Sequence['outputs.SyncConfigObjectsDatabase']] = None,
                 mode: Optional[str] = None,
                 online_ddl: Optional['outputs.SyncConfigObjectsOnlineDdl'] = None):
        """
        :param Sequence[str] advanced_objects: For advanced object types, such as function and procedure, when an advanced object needs to be synchronized, the initialization type must include the structure initialization type, that is, the value of the Options.InitType field is Structure or Full. Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['SyncConfigObjectsDatabaseArgs'] databases: Synchronization object, not null when Mode is Partial. Note: This field may return null, indicating that no valid value can be obtained.
        :param str mode: Migration object type Partial (partial object). Note: This field may return null, indicating that no valid value can be obtained.
        :param 'SyncConfigObjectsOnlineDdlArgs' online_ddl: OnlineDDL type. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if advanced_objects is not None:
            pulumi.set(__self__, "advanced_objects", advanced_objects)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if online_ddl is not None:
            pulumi.set(__self__, "online_ddl", online_ddl)

    @property
    @pulumi.getter(name="advancedObjects")
    def advanced_objects(self) -> Optional[Sequence[str]]:
        """
        For advanced object types, such as function and procedure, when an advanced object needs to be synchronized, the initialization type must include the structure initialization type, that is, the value of the Options.InitType field is Structure or Full. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "advanced_objects")

    @property
    @pulumi.getter
    def databases(self) -> Optional[Sequence['outputs.SyncConfigObjectsDatabase']]:
        """
        Synchronization object, not null when Mode is Partial. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Migration object type Partial (partial object). Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="onlineDdl")
    def online_ddl(self) -> Optional['outputs.SyncConfigObjectsOnlineDdl']:
        """
        OnlineDDL type. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "online_ddl")


@pulumi.output_type
class SyncConfigObjectsDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dbMode":
            suggest = "db_mode"
        elif key == "dbName":
            suggest = "db_name"
        elif key == "eventMode":
            suggest = "event_mode"
        elif key == "functionMode":
            suggest = "function_mode"
        elif key == "newDbName":
            suggest = "new_db_name"
        elif key == "newSchemaName":
            suggest = "new_schema_name"
        elif key == "procedureMode":
            suggest = "procedure_mode"
        elif key == "schemaName":
            suggest = "schema_name"
        elif key == "tableMode":
            suggest = "table_mode"
        elif key == "triggerMode":
            suggest = "trigger_mode"
        elif key == "viewMode":
            suggest = "view_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyncConfigObjectsDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyncConfigObjectsDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyncConfigObjectsDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 db_mode: Optional[str] = None,
                 db_name: Optional[str] = None,
                 event_mode: Optional[str] = None,
                 events: Optional[Sequence[str]] = None,
                 function_mode: Optional[str] = None,
                 functions: Optional[Sequence[str]] = None,
                 new_db_name: Optional[str] = None,
                 new_schema_name: Optional[str] = None,
                 procedure_mode: Optional[str] = None,
                 procedures: Optional[Sequence[str]] = None,
                 schema_name: Optional[str] = None,
                 table_mode: Optional[str] = None,
                 tables: Optional[Sequence['outputs.SyncConfigObjectsDatabaseTable']] = None,
                 trigger_mode: Optional[str] = None,
                 triggers: Optional[Sequence[str]] = None,
                 view_mode: Optional[str] = None,
                 views: Optional[Sequence['outputs.SyncConfigObjectsDatabaseView']] = None):
        """
        :param str db_mode: DB selection mode: All (for all objects under the current object), Partial (for some objects), when the Mode is Partial, this item is required. Note that synchronization of advanced objects does not depend on this value. Note: This field may return null, indicating that no valid value can be obtained.
        :param str db_name: The name of the library that needs to be migrated or synchronized. This item is required when the ObjectMode is Partial. Note: This field may return null, indicating that no valid value can be obtained.
        :param str event_mode: Event migration mode, all (for all objects under the current object), partial (partial objects). Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence[str] events: When EventMode is partial, specify the name of the event to be migrated. Note: This field may return null, indicating that no valid value can be obtained.
        :param str function_mode: Select the mode to be synchronized, Partial is a part, all is an entire selection. Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence[str] functions: Required when the FunctionMode value is Partial. Note: This field may return null, indicating that no valid value can be obtained.
        :param str new_db_name: The name of the library after migration or synchronization, which is the same as the source library by default. Note: This field may return null, indicating that no valid value can be obtained.
        :param str new_schema_name: Schema name after migration or synchronization. Note: This field may return null, indicating that no valid value can be obtained.
        :param str procedure_mode: Select the mode to be synchronized, Partial is part, All is the whole selection. Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence[str] procedures: Required when the value of ProcedureMode is Partial. Note: This field may return null, indicating that no valid value can be obtained.
        :param str schema_name: Migrated or synchronized schemaNote: This field may return null, indicating that no valid value can be obtained.
        :param str table_mode: Table selection mode: All (for all objects under the current object), Partial (for some objects), this item is required when the DBMode is Partial. Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['SyncConfigObjectsDatabaseTableArgs'] tables: A collection of table graph objects, when TableMode is Partial, this item needs to be filled in. Note: This field may return null, indicating that no valid value can be obtained.
        :param str trigger_mode: Trigger migration mode, all (for all objects under the current object), partial (partial objects). Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence[str] triggers: When TriggerMode is partial, specify the name of the trigger to be migrated. Note: This field may return null, indicating that no valid value can be obtained.
        :param str view_mode: View selection mode: All is all view objects under the current object, Partial is part of the view objects. Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['SyncConfigObjectsDatabaseViewArgs'] views: View object collection, when ViewMode is Partial, this item needs to be filled in. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if db_mode is not None:
            pulumi.set(__self__, "db_mode", db_mode)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if event_mode is not None:
            pulumi.set(__self__, "event_mode", event_mode)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if function_mode is not None:
            pulumi.set(__self__, "function_mode", function_mode)
        if functions is not None:
            pulumi.set(__self__, "functions", functions)
        if new_db_name is not None:
            pulumi.set(__self__, "new_db_name", new_db_name)
        if new_schema_name is not None:
            pulumi.set(__self__, "new_schema_name", new_schema_name)
        if procedure_mode is not None:
            pulumi.set(__self__, "procedure_mode", procedure_mode)
        if procedures is not None:
            pulumi.set(__self__, "procedures", procedures)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if table_mode is not None:
            pulumi.set(__self__, "table_mode", table_mode)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)
        if trigger_mode is not None:
            pulumi.set(__self__, "trigger_mode", trigger_mode)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)
        if view_mode is not None:
            pulumi.set(__self__, "view_mode", view_mode)
        if views is not None:
            pulumi.set(__self__, "views", views)

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> Optional[str]:
        """
        DB selection mode: All (for all objects under the current object), Partial (for some objects), when the Mode is Partial, this item is required. Note that synchronization of advanced objects does not depend on this value. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "db_mode")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        """
        The name of the library that needs to be migrated or synchronized. This item is required when the ObjectMode is Partial. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="eventMode")
    def event_mode(self) -> Optional[str]:
        """
        Event migration mode, all (for all objects under the current object), partial (partial objects). Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "event_mode")

    @property
    @pulumi.getter
    def events(self) -> Optional[Sequence[str]]:
        """
        When EventMode is partial, specify the name of the event to be migrated. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "events")

    @property
    @pulumi.getter(name="functionMode")
    def function_mode(self) -> Optional[str]:
        """
        Select the mode to be synchronized, Partial is a part, all is an entire selection. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "function_mode")

    @property
    @pulumi.getter
    def functions(self) -> Optional[Sequence[str]]:
        """
        Required when the FunctionMode value is Partial. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "functions")

    @property
    @pulumi.getter(name="newDbName")
    def new_db_name(self) -> Optional[str]:
        """
        The name of the library after migration or synchronization, which is the same as the source library by default. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "new_db_name")

    @property
    @pulumi.getter(name="newSchemaName")
    def new_schema_name(self) -> Optional[str]:
        """
        Schema name after migration or synchronization. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "new_schema_name")

    @property
    @pulumi.getter(name="procedureMode")
    def procedure_mode(self) -> Optional[str]:
        """
        Select the mode to be synchronized, Partial is part, All is the whole selection. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "procedure_mode")

    @property
    @pulumi.getter
    def procedures(self) -> Optional[Sequence[str]]:
        """
        Required when the value of ProcedureMode is Partial. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "procedures")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        """
        Migrated or synchronized schemaNote: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="tableMode")
    def table_mode(self) -> Optional[str]:
        """
        Table selection mode: All (for all objects under the current object), Partial (for some objects), this item is required when the DBMode is Partial. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "table_mode")

    @property
    @pulumi.getter
    def tables(self) -> Optional[Sequence['outputs.SyncConfigObjectsDatabaseTable']]:
        """
        A collection of table graph objects, when TableMode is Partial, this item needs to be filled in. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "tables")

    @property
    @pulumi.getter(name="triggerMode")
    def trigger_mode(self) -> Optional[str]:
        """
        Trigger migration mode, all (for all objects under the current object), partial (partial objects). Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "trigger_mode")

    @property
    @pulumi.getter
    def triggers(self) -> Optional[Sequence[str]]:
        """
        When TriggerMode is partial, specify the name of the trigger to be migrated. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter(name="viewMode")
    def view_mode(self) -> Optional[str]:
        """
        View selection mode: All is all view objects under the current object, Partial is part of the view objects. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "view_mode")

    @property
    @pulumi.getter
    def views(self) -> Optional[Sequence['outputs.SyncConfigObjectsDatabaseView']]:
        """
        View object collection, when ViewMode is Partial, this item needs to be filled in. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "views")


@pulumi.output_type
class SyncConfigObjectsDatabaseTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterCondition":
            suggest = "filter_condition"
        elif key == "newTableName":
            suggest = "new_table_name"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyncConfigObjectsDatabaseTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyncConfigObjectsDatabaseTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyncConfigObjectsDatabaseTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter_condition: Optional[str] = None,
                 new_table_name: Optional[str] = None,
                 table_name: Optional[str] = None):
        """
        :param str filter_condition: Filter condition. Note: This field may return null, indicating that no valid value can be obtained.
        :param str new_table_name: New table name. Note: This field may return null, indicating that no valid value can be obtained.
        :param str table_name: Table name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if filter_condition is not None:
            pulumi.set(__self__, "filter_condition", filter_condition)
        if new_table_name is not None:
            pulumi.set(__self__, "new_table_name", new_table_name)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="filterCondition")
    def filter_condition(self) -> Optional[str]:
        """
        Filter condition. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "filter_condition")

    @property
    @pulumi.getter(name="newTableName")
    def new_table_name(self) -> Optional[str]:
        """
        New table name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "new_table_name")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        """
        Table name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class SyncConfigObjectsDatabaseView(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newViewName":
            suggest = "new_view_name"
        elif key == "viewName":
            suggest = "view_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyncConfigObjectsDatabaseView. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyncConfigObjectsDatabaseView.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyncConfigObjectsDatabaseView.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_view_name: Optional[str] = None,
                 view_name: Optional[str] = None):
        """
        :param str new_view_name: New view name. Note: This field may return null, indicating that no valid value can be obtained.
        :param str view_name: View name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if new_view_name is not None:
            pulumi.set(__self__, "new_view_name", new_view_name)
        if view_name is not None:
            pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter(name="newViewName")
    def new_view_name(self) -> Optional[str]:
        """
        New view name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "new_view_name")

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> Optional[str]:
        """
        View name. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "view_name")


@pulumi.output_type
class SyncConfigObjectsOnlineDdl(dict):
    def __init__(__self__, *,
                 status: Optional[str] = None):
        """
        :param str status: status.
        """
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class SyncConfigOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addAdditionalColumn":
            suggest = "add_additional_column"
        elif key == "conflictHandleOption":
            suggest = "conflict_handle_option"
        elif key == "conflictHandleType":
            suggest = "conflict_handle_type"
        elif key == "ddlOptions":
            suggest = "ddl_options"
        elif key == "dealOfExistSameTable":
            suggest = "deal_of_exist_same_table"
        elif key == "initType":
            suggest = "init_type"
        elif key == "opTypes":
            suggest = "op_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyncConfigOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyncConfigOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyncConfigOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_additional_column: Optional[bool] = None,
                 conflict_handle_option: Optional['outputs.SyncConfigOptionsConflictHandleOption'] = None,
                 conflict_handle_type: Optional[str] = None,
                 ddl_options: Optional[Sequence['outputs.SyncConfigOptionsDdlOption']] = None,
                 deal_of_exist_same_table: Optional[str] = None,
                 init_type: Optional[str] = None,
                 op_types: Optional[Sequence[str]] = None):
        """
        :param bool add_additional_column: Whether to add additional columns. Note: This field may return null, indicating that no valid value can be obtained.
        :param 'SyncConfigOptionsConflictHandleOptionArgs' conflict_handle_option: Detailed options for conflict handling, such as conditional rows and conditional actions in conditional overrides. Note: This field may return null, indicating that no valid value can be obtained.
        :param str conflict_handle_type: Conflict handling options, ReportError (error report, the default value), Ignore (ignore), Cover (cover), ConditionCover (condition coverage). Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence['SyncConfigOptionsDdlOptionArgs'] ddl_options: DDL synchronization options, specifically describe which DDLs to synchronize. Note: This field may return null, indicating that no valid value can be obtained.
        :param str deal_of_exist_same_table: The processing of the table with the same name, ReportErrorAfterCheck (pre-check and report error, default), InitializeAfterDelete (delete and re-initialize), ExecuteAfterIgnore (ignore and continue to execute). Note: This field may return null, indicating that no valid value can be obtained.
        :param str init_type: Synchronous initialization options, Data (full data initialization), Structure (structure initialization), Full (full data and structure initialization, default), None (incremental only). Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence[str] op_types: DML and DDL options to be synchronized, Insert (insert operation), Update (update operation), Delete (delete operation), DDL (structure synchronization), leave blank (not selected), PartialDDL (custom, work with DdlOptions). Note: This field may return null, indicating that no valid value can be obtained.
        """
        if add_additional_column is not None:
            pulumi.set(__self__, "add_additional_column", add_additional_column)
        if conflict_handle_option is not None:
            pulumi.set(__self__, "conflict_handle_option", conflict_handle_option)
        if conflict_handle_type is not None:
            pulumi.set(__self__, "conflict_handle_type", conflict_handle_type)
        if ddl_options is not None:
            pulumi.set(__self__, "ddl_options", ddl_options)
        if deal_of_exist_same_table is not None:
            pulumi.set(__self__, "deal_of_exist_same_table", deal_of_exist_same_table)
        if init_type is not None:
            pulumi.set(__self__, "init_type", init_type)
        if op_types is not None:
            pulumi.set(__self__, "op_types", op_types)

    @property
    @pulumi.getter(name="addAdditionalColumn")
    def add_additional_column(self) -> Optional[bool]:
        """
        Whether to add additional columns. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "add_additional_column")

    @property
    @pulumi.getter(name="conflictHandleOption")
    def conflict_handle_option(self) -> Optional['outputs.SyncConfigOptionsConflictHandleOption']:
        """
        Detailed options for conflict handling, such as conditional rows and conditional actions in conditional overrides. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "conflict_handle_option")

    @property
    @pulumi.getter(name="conflictHandleType")
    def conflict_handle_type(self) -> Optional[str]:
        """
        Conflict handling options, ReportError (error report, the default value), Ignore (ignore), Cover (cover), ConditionCover (condition coverage). Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "conflict_handle_type")

    @property
    @pulumi.getter(name="ddlOptions")
    def ddl_options(self) -> Optional[Sequence['outputs.SyncConfigOptionsDdlOption']]:
        """
        DDL synchronization options, specifically describe which DDLs to synchronize. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ddl_options")

    @property
    @pulumi.getter(name="dealOfExistSameTable")
    def deal_of_exist_same_table(self) -> Optional[str]:
        """
        The processing of the table with the same name, ReportErrorAfterCheck (pre-check and report error, default), InitializeAfterDelete (delete and re-initialize), ExecuteAfterIgnore (ignore and continue to execute). Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "deal_of_exist_same_table")

    @property
    @pulumi.getter(name="initType")
    def init_type(self) -> Optional[str]:
        """
        Synchronous initialization options, Data (full data initialization), Structure (structure initialization), Full (full data and structure initialization, default), None (incremental only). Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "init_type")

    @property
    @pulumi.getter(name="opTypes")
    def op_types(self) -> Optional[Sequence[str]]:
        """
        DML and DDL options to be synchronized, Insert (insert operation), Update (update operation), Delete (delete operation), DDL (structure synchronization), leave blank (not selected), PartialDDL (custom, work with DdlOptions). Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "op_types")


@pulumi.output_type
class SyncConfigOptionsConflictHandleOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "conditionColumn":
            suggest = "condition_column"
        elif key == "conditionOperator":
            suggest = "condition_operator"
        elif key == "conditionOrderInSrcAndDst":
            suggest = "condition_order_in_src_and_dst"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyncConfigOptionsConflictHandleOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyncConfigOptionsConflictHandleOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyncConfigOptionsConflictHandleOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition_column: Optional[str] = None,
                 condition_operator: Optional[str] = None,
                 condition_order_in_src_and_dst: Optional[str] = None):
        """
        :param str condition_column: Columns covered by the condition. Note: This field may return null, indicating that no valid value can be obtained.
        :param str condition_operator: Conditional Override Operation. Note: This field may return null, indicating that no valid value can be obtained.
        :param str condition_order_in_src_and_dst: Conditional Override Priority Processing. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if condition_column is not None:
            pulumi.set(__self__, "condition_column", condition_column)
        if condition_operator is not None:
            pulumi.set(__self__, "condition_operator", condition_operator)
        if condition_order_in_src_and_dst is not None:
            pulumi.set(__self__, "condition_order_in_src_and_dst", condition_order_in_src_and_dst)

    @property
    @pulumi.getter(name="conditionColumn")
    def condition_column(self) -> Optional[str]:
        """
        Columns covered by the condition. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "condition_column")

    @property
    @pulumi.getter(name="conditionOperator")
    def condition_operator(self) -> Optional[str]:
        """
        Conditional Override Operation. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "condition_operator")

    @property
    @pulumi.getter(name="conditionOrderInSrcAndDst")
    def condition_order_in_src_and_dst(self) -> Optional[str]:
        """
        Conditional Override Priority Processing. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "condition_order_in_src_and_dst")


@pulumi.output_type
class SyncConfigOptionsDdlOption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ddlObject":
            suggest = "ddl_object"
        elif key == "ddlValues":
            suggest = "ddl_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyncConfigOptionsDdlOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyncConfigOptionsDdlOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyncConfigOptionsDdlOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ddl_object: Optional[str] = None,
                 ddl_values: Optional[Sequence[str]] = None):
        """
        :param str ddl_object: Ddl type, such as Database, Table, View, Index, etc. Note: This field may return null, indicating that no valid value can be obtained.
        :param Sequence[str] ddl_values: The specific value of ddl, the possible values for Database [Create,Drop,Alter].The possible values for Table [Create,Drop,Alter,Truncate,Rename].The possible values for View[Create,Drop].For the possible values of Index [Create, Drop]. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if ddl_object is not None:
            pulumi.set(__self__, "ddl_object", ddl_object)
        if ddl_values is not None:
            pulumi.set(__self__, "ddl_values", ddl_values)

    @property
    @pulumi.getter(name="ddlObject")
    def ddl_object(self) -> Optional[str]:
        """
        Ddl type, such as Database, Table, View, Index, etc. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ddl_object")

    @property
    @pulumi.getter(name="ddlValues")
    def ddl_values(self) -> Optional[Sequence[str]]:
        """
        The specific value of ddl, the possible values for Database [Create,Drop,Alter].The possible values for Table [Create,Drop,Alter,Truncate,Rename].The possible values for View[Create,Drop].For the possible values of Index [Create, Drop]. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ddl_values")


@pulumi.output_type
class SyncConfigSrcInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountMode":
            suggest = "account_mode"
        elif key == "accountRole":
            suggest = "account_role"
        elif key == "ccnId":
            suggest = "ccn_id"
        elif key == "cvmInstanceId":
            suggest = "cvm_instance_id"
        elif key == "databaseNetEnv":
            suggest = "database_net_env"
        elif key == "dbKernel":
            suggest = "db_kernel"
        elif key == "dbName":
            suggest = "db_name"
        elif key == "encryptConn":
            suggest = "encrypt_conn"
        elif key == "engineVersion":
            suggest = "engine_version"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "roleExternalId":
            suggest = "role_external_id"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "tmpSecretId":
            suggest = "tmp_secret_id"
        elif key == "tmpSecretKey":
            suggest = "tmp_secret_key"
        elif key == "tmpToken":
            suggest = "tmp_token"
        elif key == "uniqDcgId":
            suggest = "uniq_dcg_id"
        elif key == "uniqVpnGwId":
            suggest = "uniq_vpn_gw_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyncConfigSrcInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyncConfigSrcInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyncConfigSrcInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account: Optional[str] = None,
                 account_mode: Optional[str] = None,
                 account_role: Optional[str] = None,
                 ccn_id: Optional[str] = None,
                 cvm_instance_id: Optional[str] = None,
                 database_net_env: Optional[str] = None,
                 db_kernel: Optional[str] = None,
                 db_name: Optional[str] = None,
                 encrypt_conn: Optional[str] = None,
                 engine_version: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 ip: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 region: Optional[str] = None,
                 role: Optional[str] = None,
                 role_external_id: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 supplier: Optional[str] = None,
                 tmp_secret_id: Optional[str] = None,
                 tmp_secret_key: Optional[str] = None,
                 tmp_token: Optional[str] = None,
                 uniq_dcg_id: Optional[str] = None,
                 uniq_vpn_gw_id: Optional[str] = None,
                 user: Optional[str] = None,
                 vpc_id: Optional[str] = None):
        """
        :param str account: The account to which the instance belongs. This field is required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        :param str account_mode: The account to which the resource belongs is empty or self (represents resources within this account), other (represents cross-account resources). Note: This field may return null, indicating that no valid value can be obtained.
        :param str account_role: The role during cross-account synchronization, only [a-zA-Z0-9-_]+ is allowed, if it is a cross-account instance, this field is required. Note: This field may return null, indicating that no valid value can be obtained.
        :param str ccn_id: Cloud networking ID, which is required for the cloud networking access type. Note: This field may return null, indicating that no valid value can be obtained.
        :param str cvm_instance_id: CVM instance short ID, which is the same as the instance ID displayed on the cloud server console page. If it is a self-built instance of CVM, this field needs to be passed. Note: This field may return null, indicating that no valid value can be obtained.
        :param str database_net_env: The network environment to which the database belongs. It is required when AccessType is Cloud Network (CCN). `UserIDC` represents the user IDC. `TencentVPC` represents Tencent Cloud VPC. Note: This field may return null, indicating that no valid value can be obtained.
        :param str db_kernel: Database kernel type, used to distinguish different kernels in tdsql: percona, mariadb, mysql. Note: This field may return null, indicating that no valid value can be obtained.
        :param str db_name: Database name, when the database is cdwpg, it needs to be provided. Note: This field may return null, indicating that no valid value can be obtained.
        :param str encrypt_conn: Whether to use encrypted transmission, UnEncrypted means not to use encrypted transmission, Encrypted means to use encrypted transmission, the default is UnEncrypted. Note: This field may return null, indicating that no valid value can be obtained.
        :param str engine_version: Database version, valid only when the instance is an RDS instance, ignored by other instances, the format is: 5.6 or 5.7, the default is 5.6. Note: This field may return null, indicating that no valid value can be obtained.
        :param str instance_id: Database instance id. Note: This field may return null, indicating that no valid value can be obtained.
        :param str ip: The IP address of the instance, which is required when the access type is non-cdb. Note: This field may return null, indicating that no valid value can be obtained.
        :param str password: Password, required for instances that require username and password authentication for access. Note: This field may return null, indicating that no valid value can be obtained.
        :param int port: Instance port, this item is required when the access type is non-cdb. Note: This field may return null, indicating that no valid value can be obtained.
        :param str region: The english name of region. Note: This field may return null, indicating that no valid value can be obtained.
        :param str role: The node type of tdsql mysql version, the enumeration value is proxy, set. Note: This field may return null, indicating that no valid value can be obtained.
        :param str role_external_id: External role id. Note: This field may return null, indicating that no valid value can be obtained.
        :param str subnet_id: The subnet ID under the private network, this item is required for the private network, leased line, and VPN access methods. Note: This field may return null, indicating that no valid value can be obtained.
        :param str supplier: Cloud vendor type, when the instance is an RDS instance, fill in aliyun, in other cases fill in others, the default is others. Note: This field may return null, indicating that no valid value can be obtained.
        :param str tmp_secret_id: Temporary key Id, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        :param str tmp_secret_key: Temporary key Key, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        :param str tmp_token: Temporary Token, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        :param str uniq_dcg_id: Leased line gateway ID, which is required for the leased line access type. Note: This field may return null, indicating that no valid value can be obtained.
        :param str uniq_vpn_gw_id: VPN gateway ID, which is required for the VPN access type. Note: This field may return null, indicating that no valid value can be obtained.
        :param str user: Username, required for instances that require username and password authentication for access. Note: This field may return null, indicating that no valid value can be obtained.
        :param str vpc_id: Private network ID, which is required for access methods of private network, leased line, and VPN. Note: This field may return null, indicating that no valid value can be obtained.
        """
        if account is not None:
            pulumi.set(__self__, "account", account)
        if account_mode is not None:
            pulumi.set(__self__, "account_mode", account_mode)
        if account_role is not None:
            pulumi.set(__self__, "account_role", account_role)
        if ccn_id is not None:
            pulumi.set(__self__, "ccn_id", ccn_id)
        if cvm_instance_id is not None:
            pulumi.set(__self__, "cvm_instance_id", cvm_instance_id)
        if database_net_env is not None:
            pulumi.set(__self__, "database_net_env", database_net_env)
        if db_kernel is not None:
            pulumi.set(__self__, "db_kernel", db_kernel)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if encrypt_conn is not None:
            pulumi.set(__self__, "encrypt_conn", encrypt_conn)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if role_external_id is not None:
            pulumi.set(__self__, "role_external_id", role_external_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if supplier is not None:
            pulumi.set(__self__, "supplier", supplier)
        if tmp_secret_id is not None:
            pulumi.set(__self__, "tmp_secret_id", tmp_secret_id)
        if tmp_secret_key is not None:
            pulumi.set(__self__, "tmp_secret_key", tmp_secret_key)
        if tmp_token is not None:
            pulumi.set(__self__, "tmp_token", tmp_token)
        if uniq_dcg_id is not None:
            pulumi.set(__self__, "uniq_dcg_id", uniq_dcg_id)
        if uniq_vpn_gw_id is not None:
            pulumi.set(__self__, "uniq_vpn_gw_id", uniq_vpn_gw_id)
        if user is not None:
            pulumi.set(__self__, "user", user)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def account(self) -> Optional[str]:
        """
        The account to which the instance belongs. This field is required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="accountMode")
    def account_mode(self) -> Optional[str]:
        """
        The account to which the resource belongs is empty or self (represents resources within this account), other (represents cross-account resources). Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "account_mode")

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> Optional[str]:
        """
        The role during cross-account synchronization, only [a-zA-Z0-9-_]+ is allowed, if it is a cross-account instance, this field is required. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "account_role")

    @property
    @pulumi.getter(name="ccnId")
    def ccn_id(self) -> Optional[str]:
        """
        Cloud networking ID, which is required for the cloud networking access type. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ccn_id")

    @property
    @pulumi.getter(name="cvmInstanceId")
    def cvm_instance_id(self) -> Optional[str]:
        """
        CVM instance short ID, which is the same as the instance ID displayed on the cloud server console page. If it is a self-built instance of CVM, this field needs to be passed. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "cvm_instance_id")

    @property
    @pulumi.getter(name="databaseNetEnv")
    def database_net_env(self) -> Optional[str]:
        """
        The network environment to which the database belongs. It is required when AccessType is Cloud Network (CCN). `UserIDC` represents the user IDC. `TencentVPC` represents Tencent Cloud VPC. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "database_net_env")

    @property
    @pulumi.getter(name="dbKernel")
    def db_kernel(self) -> Optional[str]:
        """
        Database kernel type, used to distinguish different kernels in tdsql: percona, mariadb, mysql. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "db_kernel")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        """
        Database name, when the database is cdwpg, it needs to be provided. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="encryptConn")
    def encrypt_conn(self) -> Optional[str]:
        """
        Whether to use encrypted transmission, UnEncrypted means not to use encrypted transmission, Encrypted means to use encrypted transmission, the default is UnEncrypted. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "encrypt_conn")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[str]:
        """
        Database version, valid only when the instance is an RDS instance, ignored by other instances, the format is: 5.6 or 5.7, the default is 5.6. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        Database instance id. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        """
        The IP address of the instance, which is required when the access type is non-cdb. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        Password, required for instances that require username and password authentication for access. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Instance port, this item is required when the access type is non-cdb. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        """
        The english name of region. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        The node type of tdsql mysql version, the enumeration value is proxy, set. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="roleExternalId")
    def role_external_id(self) -> Optional[str]:
        """
        External role id. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "role_external_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The subnet ID under the private network, this item is required for the private network, leased line, and VPN access methods. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def supplier(self) -> Optional[str]:
        """
        Cloud vendor type, when the instance is an RDS instance, fill in aliyun, in other cases fill in others, the default is others. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "supplier")

    @property
    @pulumi.getter(name="tmpSecretId")
    def tmp_secret_id(self) -> Optional[str]:
        """
        Temporary key Id, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "tmp_secret_id")

    @property
    @pulumi.getter(name="tmpSecretKey")
    def tmp_secret_key(self) -> Optional[str]:
        """
        Temporary key Key, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "tmp_secret_key")

    @property
    @pulumi.getter(name="tmpToken")
    def tmp_token(self) -> Optional[str]:
        """
        Temporary Token, required if it is a cross-account instance. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "tmp_token")

    @property
    @pulumi.getter(name="uniqDcgId")
    def uniq_dcg_id(self) -> Optional[str]:
        """
        Leased line gateway ID, which is required for the leased line access type. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "uniq_dcg_id")

    @property
    @pulumi.getter(name="uniqVpnGwId")
    def uniq_vpn_gw_id(self) -> Optional[str]:
        """
        VPN gateway ID, which is required for the VPN access type. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "uniq_vpn_gw_id")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        Username, required for instances that require username and password authentication for access. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        """
        Private network ID, which is required for access methods of private network, leased line, and VPN. Note: This field may return null, indicating that no valid value can be obtained.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class SyncJobTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValue":
            suggest = "tag_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SyncJobTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SyncJobTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SyncJobTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_key: Optional[str] = None,
                 tag_value: Optional[str] = None):
        """
        :param str tag_key: tag key.
        :param str tag_value: tag value.
        """
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[str]:
        """
        tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[str]:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetCompareTasksListResult(dict):
    def __init__(__self__, *,
                 check_processes: Sequence['outputs.GetCompareTasksListCheckProcessResult'],
                 compare_processes: Sequence['outputs.GetCompareTasksListCompareProcessResult'],
                 compare_task_id: str,
                 conclusion: str,
                 configs: Sequence['outputs.GetCompareTasksListConfigResult'],
                 created_at: str,
                 finished_at: str,
                 job_id: str,
                 started_at: str,
                 status: str,
                 task_name: str):
        """
        :param Sequence['GetCompareTasksListCheckProcessArgs'] check_processes: compare check info.
        :param Sequence['GetCompareTasksListCompareProcessArgs'] compare_processes: compare processing info.
        :param str compare_task_id: compare task id.
        :param str conclusion: conclusion.
        :param Sequence['GetCompareTasksListConfigArgs'] configs: config.
        :param str created_at: create time.
        :param str finished_at: finished time.
        :param str job_id: job id.
        :param str started_at: start time.
        :param str status: compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
        :param str task_name: compare task name.
        """
        pulumi.set(__self__, "check_processes", check_processes)
        pulumi.set(__self__, "compare_processes", compare_processes)
        pulumi.set(__self__, "compare_task_id", compare_task_id)
        pulumi.set(__self__, "conclusion", conclusion)
        pulumi.set(__self__, "configs", configs)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "finished_at", finished_at)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "started_at", started_at)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "task_name", task_name)

    @property
    @pulumi.getter(name="checkProcesses")
    def check_processes(self) -> Sequence['outputs.GetCompareTasksListCheckProcessResult']:
        """
        compare check info.
        """
        return pulumi.get(self, "check_processes")

    @property
    @pulumi.getter(name="compareProcesses")
    def compare_processes(self) -> Sequence['outputs.GetCompareTasksListCompareProcessResult']:
        """
        compare processing info.
        """
        return pulumi.get(self, "compare_processes")

    @property
    @pulumi.getter(name="compareTaskId")
    def compare_task_id(self) -> str:
        """
        compare task id.
        """
        return pulumi.get(self, "compare_task_id")

    @property
    @pulumi.getter
    def conclusion(self) -> str:
        """
        conclusion.
        """
        return pulumi.get(self, "conclusion")

    @property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.GetCompareTasksListConfigResult']:
        """
        config.
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        create time.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> str:
        """
        finished time.
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> str:
        """
        job id.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> str:
        """
        start time.
        """
        return pulumi.get(self, "started_at")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="taskName")
    def task_name(self) -> str:
        """
        compare task name.
        """
        return pulumi.get(self, "task_name")


@pulumi.output_type
class GetCompareTasksListCheckProcessResult(dict):
    def __init__(__self__, *,
                 message: str,
                 percent: int,
                 status: str,
                 step_all: int,
                 step_now: int,
                 steps: Sequence['outputs.GetCompareTasksListCheckProcessStepResult']):
        """
        :param str message: message.
        :param int percent: progress info.
        :param str status: compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
        :param int step_all: all step counts.
        :param int step_now: current step number.
        :param Sequence['GetCompareTasksListCheckProcessStepArgs'] steps: step info.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "percent", percent)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "step_all", step_all)
        pulumi.set(__self__, "step_now", step_now)
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def percent(self) -> int:
        """
        progress info.
        """
        return pulumi.get(self, "percent")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stepAll")
    def step_all(self) -> int:
        """
        all step counts.
        """
        return pulumi.get(self, "step_all")

    @property
    @pulumi.getter(name="stepNow")
    def step_now(self) -> int:
        """
        current step number.
        """
        return pulumi.get(self, "step_now")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.GetCompareTasksListCheckProcessStepResult']:
        """
        step info.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class GetCompareTasksListCheckProcessStepResult(dict):
    def __init__(__self__, *,
                 errors: Optional[Sequence['outputs.GetCompareTasksListCheckProcessStepErrorResult']] = None,
                 percent: Optional[int] = None,
                 start_time: Optional[str] = None,
                 status: Optional[str] = None,
                 step_id: Optional[str] = None,
                 step_message: Optional[str] = None,
                 step_name: Optional[str] = None,
                 step_no: Optional[int] = None,
                 warnings: Optional[Sequence['outputs.GetCompareTasksListCheckProcessStepWarningResult']] = None):
        """
        :param Sequence['GetCompareTasksListCheckProcessStepErrorArgs'] errors: errors info.
        :param int percent: progress info.
        :param str start_time: start time.
        :param str status: compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
        :param str step_id: step id.
        :param str step_message: step message.
        :param str step_name: step name.
        :param int step_no: step number.
        :param Sequence['GetCompareTasksListCheckProcessStepWarningArgs'] warnings: warnings info.
        """
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if step_id is not None:
            pulumi.set(__self__, "step_id", step_id)
        if step_message is not None:
            pulumi.set(__self__, "step_message", step_message)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if step_no is not None:
            pulumi.set(__self__, "step_no", step_no)
        if warnings is not None:
            pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.GetCompareTasksListCheckProcessStepErrorResult']]:
        """
        errors info.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def percent(self) -> Optional[int]:
        """
        progress info.
        """
        return pulumi.get(self, "percent")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> Optional[str]:
        """
        step id.
        """
        return pulumi.get(self, "step_id")

    @property
    @pulumi.getter(name="stepMessage")
    def step_message(self) -> Optional[str]:
        """
        step message.
        """
        return pulumi.get(self, "step_message")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[str]:
        """
        step name.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepNo")
    def step_no(self) -> Optional[int]:
        """
        step number.
        """
        return pulumi.get(self, "step_no")

    @property
    @pulumi.getter
    def warnings(self) -> Optional[Sequence['outputs.GetCompareTasksListCheckProcessStepWarningResult']]:
        """
        warnings info.
        """
        return pulumi.get(self, "warnings")


@pulumi.output_type
class GetCompareTasksListCheckProcessStepErrorResult(dict):
    def __init__(__self__, *,
                 help_doc: Optional[str] = None,
                 message: Optional[str] = None,
                 solution: Optional[str] = None):
        """
        :param str help_doc: help document.
        :param str message: message.
        :param str solution: solution.
        """
        if help_doc is not None:
            pulumi.set(__self__, "help_doc", help_doc)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if solution is not None:
            pulumi.set(__self__, "solution", solution)

    @property
    @pulumi.getter(name="helpDoc")
    def help_doc(self) -> Optional[str]:
        """
        help document.
        """
        return pulumi.get(self, "help_doc")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def solution(self) -> Optional[str]:
        """
        solution.
        """
        return pulumi.get(self, "solution")


@pulumi.output_type
class GetCompareTasksListCheckProcessStepWarningResult(dict):
    def __init__(__self__, *,
                 help_doc: Optional[str] = None,
                 message: Optional[str] = None,
                 solution: Optional[str] = None):
        """
        :param str help_doc: help document.
        :param str message: message.
        :param str solution: solution.
        """
        if help_doc is not None:
            pulumi.set(__self__, "help_doc", help_doc)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if solution is not None:
            pulumi.set(__self__, "solution", solution)

    @property
    @pulumi.getter(name="helpDoc")
    def help_doc(self) -> Optional[str]:
        """
        help document.
        """
        return pulumi.get(self, "help_doc")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def solution(self) -> Optional[str]:
        """
        solution.
        """
        return pulumi.get(self, "solution")


@pulumi.output_type
class GetCompareTasksListCompareProcessResult(dict):
    def __init__(__self__, *,
                 message: str,
                 percent: int,
                 status: str,
                 step_all: int,
                 step_now: int,
                 steps: Sequence['outputs.GetCompareTasksListCompareProcessStepResult']):
        """
        :param str message: message.
        :param int percent: progress info.
        :param str status: compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
        :param int step_all: all step counts.
        :param int step_now: current step number.
        :param Sequence['GetCompareTasksListCompareProcessStepArgs'] steps: step info.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "percent", percent)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "step_all", step_all)
        pulumi.set(__self__, "step_now", step_now)
        pulumi.set(__self__, "steps", steps)

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def percent(self) -> int:
        """
        progress info.
        """
        return pulumi.get(self, "percent")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stepAll")
    def step_all(self) -> int:
        """
        all step counts.
        """
        return pulumi.get(self, "step_all")

    @property
    @pulumi.getter(name="stepNow")
    def step_now(self) -> int:
        """
        current step number.
        """
        return pulumi.get(self, "step_now")

    @property
    @pulumi.getter
    def steps(self) -> Sequence['outputs.GetCompareTasksListCompareProcessStepResult']:
        """
        step info.
        """
        return pulumi.get(self, "steps")


@pulumi.output_type
class GetCompareTasksListCompareProcessStepResult(dict):
    def __init__(__self__, *,
                 errors: Optional[Sequence['outputs.GetCompareTasksListCompareProcessStepErrorResult']] = None,
                 percent: Optional[int] = None,
                 start_time: Optional[str] = None,
                 status: Optional[str] = None,
                 step_id: Optional[str] = None,
                 step_message: Optional[str] = None,
                 step_name: Optional[str] = None,
                 step_no: Optional[int] = None,
                 warnings: Optional[Sequence['outputs.GetCompareTasksListCompareProcessStepWarningResult']] = None):
        """
        :param Sequence['GetCompareTasksListCompareProcessStepErrorArgs'] errors: errors info.
        :param int percent: progress info.
        :param str start_time: start time.
        :param str status: compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
        :param str step_id: step id.
        :param str step_message: step message.
        :param str step_name: step name.
        :param int step_no: step number.
        :param Sequence['GetCompareTasksListCompareProcessStepWarningArgs'] warnings: warnings info.
        """
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if percent is not None:
            pulumi.set(__self__, "percent", percent)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if step_id is not None:
            pulumi.set(__self__, "step_id", step_id)
        if step_message is not None:
            pulumi.set(__self__, "step_message", step_message)
        if step_name is not None:
            pulumi.set(__self__, "step_name", step_name)
        if step_no is not None:
            pulumi.set(__self__, "step_no", step_no)
        if warnings is not None:
            pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def errors(self) -> Optional[Sequence['outputs.GetCompareTasksListCompareProcessStepErrorResult']]:
        """
        errors info.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def percent(self) -> Optional[int]:
        """
        progress info.
        """
        return pulumi.get(self, "percent")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        compare task status, optional value is created/readyRun/running/success/stopping/failed/canceled.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> Optional[str]:
        """
        step id.
        """
        return pulumi.get(self, "step_id")

    @property
    @pulumi.getter(name="stepMessage")
    def step_message(self) -> Optional[str]:
        """
        step message.
        """
        return pulumi.get(self, "step_message")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> Optional[str]:
        """
        step name.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepNo")
    def step_no(self) -> Optional[int]:
        """
        step number.
        """
        return pulumi.get(self, "step_no")

    @property
    @pulumi.getter
    def warnings(self) -> Optional[Sequence['outputs.GetCompareTasksListCompareProcessStepWarningResult']]:
        """
        warnings info.
        """
        return pulumi.get(self, "warnings")


@pulumi.output_type
class GetCompareTasksListCompareProcessStepErrorResult(dict):
    def __init__(__self__, *,
                 help_doc: Optional[str] = None,
                 message: Optional[str] = None,
                 solution: Optional[str] = None):
        """
        :param str help_doc: help document.
        :param str message: message.
        :param str solution: solution.
        """
        if help_doc is not None:
            pulumi.set(__self__, "help_doc", help_doc)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if solution is not None:
            pulumi.set(__self__, "solution", solution)

    @property
    @pulumi.getter(name="helpDoc")
    def help_doc(self) -> Optional[str]:
        """
        help document.
        """
        return pulumi.get(self, "help_doc")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def solution(self) -> Optional[str]:
        """
        solution.
        """
        return pulumi.get(self, "solution")


@pulumi.output_type
class GetCompareTasksListCompareProcessStepWarningResult(dict):
    def __init__(__self__, *,
                 help_doc: Optional[str] = None,
                 message: Optional[str] = None,
                 solution: Optional[str] = None):
        """
        :param str help_doc: help document.
        :param str message: message.
        :param str solution: solution.
        """
        if help_doc is not None:
            pulumi.set(__self__, "help_doc", help_doc)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if solution is not None:
            pulumi.set(__self__, "solution", solution)

    @property
    @pulumi.getter(name="helpDoc")
    def help_doc(self) -> Optional[str]:
        """
        help document.
        """
        return pulumi.get(self, "help_doc")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def solution(self) -> Optional[str]:
        """
        solution.
        """
        return pulumi.get(self, "solution")


@pulumi.output_type
class GetCompareTasksListConfigResult(dict):
    def __init__(__self__, *,
                 object_items: Sequence['outputs.GetCompareTasksListConfigObjectItemResult'],
                 object_mode: str):
        """
        :param Sequence['GetCompareTasksListConfigObjectItemArgs'] object_items: object items.
        :param str object_mode: object mode.
        """
        pulumi.set(__self__, "object_items", object_items)
        pulumi.set(__self__, "object_mode", object_mode)

    @property
    @pulumi.getter(name="objectItems")
    def object_items(self) -> Sequence['outputs.GetCompareTasksListConfigObjectItemResult']:
        """
        object items.
        """
        return pulumi.get(self, "object_items")

    @property
    @pulumi.getter(name="objectMode")
    def object_mode(self) -> str:
        """
        object mode.
        """
        return pulumi.get(self, "object_mode")


@pulumi.output_type
class GetCompareTasksListConfigObjectItemResult(dict):
    def __init__(__self__, *,
                 db_mode: Optional[str] = None,
                 db_name: Optional[str] = None,
                 schema_name: Optional[str] = None,
                 table_mode: Optional[str] = None,
                 tables: Optional[Sequence['outputs.GetCompareTasksListConfigObjectItemTableResult']] = None,
                 view_mode: Optional[str] = None,
                 views: Optional[Sequence['outputs.GetCompareTasksListConfigObjectItemViewResult']] = None):
        """
        :param str db_mode: database mode.
        :param str db_name: database name.
        :param str schema_name: schema name.
        :param str table_mode: table mode.
        :param Sequence['GetCompareTasksListConfigObjectItemTableArgs'] tables: table list.
        :param str view_mode: view mode.
        :param Sequence['GetCompareTasksListConfigObjectItemViewArgs'] views: view list.
        """
        if db_mode is not None:
            pulumi.set(__self__, "db_mode", db_mode)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)
        if table_mode is not None:
            pulumi.set(__self__, "table_mode", table_mode)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)
        if view_mode is not None:
            pulumi.set(__self__, "view_mode", view_mode)
        if views is not None:
            pulumi.set(__self__, "views", views)

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> Optional[str]:
        """
        database mode.
        """
        return pulumi.get(self, "db_mode")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        """
        database name.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[str]:
        """
        schema name.
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="tableMode")
    def table_mode(self) -> Optional[str]:
        """
        table mode.
        """
        return pulumi.get(self, "table_mode")

    @property
    @pulumi.getter
    def tables(self) -> Optional[Sequence['outputs.GetCompareTasksListConfigObjectItemTableResult']]:
        """
        table list.
        """
        return pulumi.get(self, "tables")

    @property
    @pulumi.getter(name="viewMode")
    def view_mode(self) -> Optional[str]:
        """
        view mode.
        """
        return pulumi.get(self, "view_mode")

    @property
    @pulumi.getter
    def views(self) -> Optional[Sequence['outputs.GetCompareTasksListConfigObjectItemViewResult']]:
        """
        view list.
        """
        return pulumi.get(self, "views")


@pulumi.output_type
class GetCompareTasksListConfigObjectItemTableResult(dict):
    def __init__(__self__, *,
                 table_name: Optional[str] = None):
        """
        :param str table_name: table name.
        """
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[str]:
        """
        table name.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class GetCompareTasksListConfigObjectItemViewResult(dict):
    def __init__(__self__, *,
                 view_name: Optional[str] = None):
        """
        :param str view_name: view name.
        """
        if view_name is not None:
            pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> Optional[str]:
        """
        view name.
        """
        return pulumi.get(self, "view_name")


@pulumi.output_type
class GetMigrateDbInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 hint: str,
                 instance_id: str,
                 instance_name: str,
                 usable: int,
                 vip: str,
                 vport: int):
        """
        :param str hint: The reason of can&#39;t used in migration.
        :param str instance_id: Database instance id.
        :param str instance_name: Database instance name.
        :param int usable: Can used in migration, 1-yes, 0-no.
        :param str vip: Instance vip.
        :param int vport: Instance port.
        """
        pulumi.set(__self__, "hint", hint)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_name", instance_name)
        pulumi.set(__self__, "usable", usable)
        pulumi.set(__self__, "vip", vip)
        pulumi.set(__self__, "vport", vport)

    @property
    @pulumi.getter
    def hint(self) -> str:
        """
        The reason of can&#39;t used in migration.
        """
        return pulumi.get(self, "hint")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        Database instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Database instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def usable(self) -> int:
        """
        Can used in migration, 1-yes, 0-no.
        """
        return pulumi.get(self, "usable")

    @property
    @pulumi.getter
    def vip(self) -> str:
        """
        Instance vip.
        """
        return pulumi.get(self, "vip")

    @property
    @pulumi.getter
    def vport(self) -> int:
        """
        Instance port.
        """
        return pulumi.get(self, "vport")


@pulumi.output_type
class GetMigrateJobsListResult(dict):
    def __init__(__self__, *,
                 actions: Sequence['outputs.GetMigrateJobsListActionResult'],
                 brief_msg: str,
                 compare_tasks: Sequence['outputs.GetMigrateJobsListCompareTaskResult'],
                 create_time: str,
                 dst_infos: Sequence['outputs.GetMigrateJobsListDstInfoResult'],
                 end_time: str,
                 expect_run_time: str,
                 job_id: str,
                 job_name: str,
                 src_infos: Sequence['outputs.GetMigrateJobsListSrcInfoResult'],
                 start_time: str,
                 status: str,
                 step_infos: Sequence['outputs.GetMigrateJobsListStepInfoResult'],
                 tags: Sequence['outputs.GetMigrateJobsListTagResult'],
                 trade_infos: Sequence['outputs.GetMigrateJobsListTradeInfoResult'],
                 update_time: str,
                 run_mode: Optional[str] = None):
        """
        :param Sequence['GetMigrateJobsListActionArgs'] actions: action info.
        :param str brief_msg: brief message for migrate error.
        :param Sequence['GetMigrateJobsListCompareTaskArgs'] compare_tasks: compare task info.
        :param str create_time: create time.
        :param Sequence['GetMigrateJobsListDstInfoArgs'] dst_infos: destination info.
        :param str end_time: end time.
        :param str expect_run_time: expected run time.
        :param str job_id: job id.
        :param str job_name: job name.
        :param Sequence['GetMigrateJobsListSrcInfoArgs'] src_infos: source info.
        :param str start_time: start time.
        :param str status: migrate status.
        :param Sequence['GetMigrateJobsListStepInfoArgs'] step_infos: step infos.
        :param Sequence['GetMigrateJobsListTagArgs'] tags: tag list.
        :param Sequence['GetMigrateJobsListTradeInfoArgs'] trade_infos: trade info.
        :param str update_time: update time.
        :param str run_mode: run mode.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "brief_msg", brief_msg)
        pulumi.set(__self__, "compare_tasks", compare_tasks)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "dst_infos", dst_infos)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "expect_run_time", expect_run_time)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_name", job_name)
        pulumi.set(__self__, "src_infos", src_infos)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "step_infos", step_infos)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "trade_infos", trade_infos)
        pulumi.set(__self__, "update_time", update_time)
        if run_mode is not None:
            pulumi.set(__self__, "run_mode", run_mode)

    @property
    @pulumi.getter
    def actions(self) -> Sequence['outputs.GetMigrateJobsListActionResult']:
        """
        action info.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="briefMsg")
    def brief_msg(self) -> str:
        """
        brief message for migrate error.
        """
        return pulumi.get(self, "brief_msg")

    @property
    @pulumi.getter(name="compareTasks")
    def compare_tasks(self) -> Sequence['outputs.GetMigrateJobsListCompareTaskResult']:
        """
        compare task info.
        """
        return pulumi.get(self, "compare_tasks")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="dstInfos")
    def dst_infos(self) -> Sequence['outputs.GetMigrateJobsListDstInfoResult']:
        """
        destination info.
        """
        return pulumi.get(self, "dst_infos")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        end time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="expectRunTime")
    def expect_run_time(self) -> str:
        """
        expected run time.
        """
        return pulumi.get(self, "expect_run_time")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> str:
        """
        job id.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> str:
        """
        job name.
        """
        return pulumi.get(self, "job_name")

    @property
    @pulumi.getter(name="srcInfos")
    def src_infos(self) -> Sequence['outputs.GetMigrateJobsListSrcInfoResult']:
        """
        source info.
        """
        return pulumi.get(self, "src_infos")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        migrate status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stepInfos")
    def step_infos(self) -> Sequence['outputs.GetMigrateJobsListStepInfoResult']:
        """
        step infos.
        """
        return pulumi.get(self, "step_infos")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetMigrateJobsListTagResult']:
        """
        tag list.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tradeInfos")
    def trade_infos(self) -> Sequence['outputs.GetMigrateJobsListTradeInfoResult']:
        """
        trade info.
        """
        return pulumi.get(self, "trade_infos")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> str:
        """
        update time.
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="runMode")
    def run_mode(self) -> Optional[str]:
        """
        run mode.
        """
        return pulumi.get(self, "run_mode")


@pulumi.output_type
class GetMigrateJobsListActionResult(dict):
    def __init__(__self__, *,
                 all_actions: Sequence[str],
                 allowed_actions: Sequence[str]):
        """
        :param Sequence[str] all_actions: all action list.
        :param Sequence[str] allowed_actions: allowed action list.
        """
        pulumi.set(__self__, "all_actions", all_actions)
        pulumi.set(__self__, "allowed_actions", allowed_actions)

    @property
    @pulumi.getter(name="allActions")
    def all_actions(self) -> Sequence[str]:
        """
        all action list.
        """
        return pulumi.get(self, "all_actions")

    @property
    @pulumi.getter(name="allowedActions")
    def allowed_actions(self) -> Sequence[str]:
        """
        allowed action list.
        """
        return pulumi.get(self, "allowed_actions")


@pulumi.output_type
class GetMigrateJobsListCompareTaskResult(dict):
    def __init__(__self__, *,
                 compare_task_id: str,
                 status: str):
        """
        :param str compare_task_id: compare task id.
        :param str status: migrate status.
        """
        pulumi.set(__self__, "compare_task_id", compare_task_id)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="compareTaskId")
    def compare_task_id(self) -> str:
        """
        compare task id.
        """
        return pulumi.get(self, "compare_task_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        migrate status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetMigrateJobsListDstInfoResult(dict):
    def __init__(__self__, *,
                 access_type: str,
                 database_type: str,
                 infos: Sequence['outputs.GetMigrateJobsListDstInfoInfoResult'],
                 node_type: str,
                 region: str):
        """
        :param str access_type: access type.
        :param str database_type: database type.
        :param Sequence['GetMigrateJobsListDstInfoInfoArgs'] infos: db info.
        :param str node_type: node type.
        :param str region: region.
        """
        pulumi.set(__self__, "access_type", access_type)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> str:
        """
        access type.
        """
        return pulumi.get(self, "access_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        database type.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetMigrateJobsListDstInfoInfoResult']:
        """
        db info.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        node type.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        region.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class GetMigrateJobsListDstInfoInfoResult(dict):
    def __init__(__self__, *,
                 account: str,
                 account_mode: str,
                 account_role: str,
                 ccn_gw_id: str,
                 cvm_instance_id: str,
                 db_kernel: str,
                 engine_version: str,
                 host: str,
                 instance_id: str,
                 password: str,
                 port: int,
                 role: str,
                 subnet_id: str,
                 tmp_secret_id: str,
                 tmp_secret_key: str,
                 tmp_token: str,
                 uniq_vpn_gw_id: str,
                 user: str,
                 vpc_id: str):
        """
        :param str account: account.
        :param str account_mode: account mode.
        :param str account_role: account role.
        :param str ccn_gw_id: ccn gateway id.
        :param str cvm_instance_id: cvm instance id.
        :param str db_kernel: database kernel.
        :param str engine_version: engine version.
        :param str host: host.
        :param str instance_id: instance id.
        :param str password: password.
        :param int port: port.
        :param str role: node role.
        :param str subnet_id: subnet id.
        :param str tmp_secret_id: temporary secret id.
        :param str tmp_secret_key: temporary secret key.
        :param str tmp_token: temporary token.
        :param str uniq_vpn_gw_id: vpn gateway id.
        :param str user: user.
        :param str vpc_id: vpc id.
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "account_mode", account_mode)
        pulumi.set(__self__, "account_role", account_role)
        pulumi.set(__self__, "ccn_gw_id", ccn_gw_id)
        pulumi.set(__self__, "cvm_instance_id", cvm_instance_id)
        pulumi.set(__self__, "db_kernel", db_kernel)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tmp_secret_id", tmp_secret_id)
        pulumi.set(__self__, "tmp_secret_key", tmp_secret_key)
        pulumi.set(__self__, "tmp_token", tmp_token)
        pulumi.set(__self__, "uniq_vpn_gw_id", uniq_vpn_gw_id)
        pulumi.set(__self__, "user", user)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def account(self) -> str:
        """
        account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="accountMode")
    def account_mode(self) -> str:
        """
        account mode.
        """
        return pulumi.get(self, "account_mode")

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> str:
        """
        account role.
        """
        return pulumi.get(self, "account_role")

    @property
    @pulumi.getter(name="ccnGwId")
    def ccn_gw_id(self) -> str:
        """
        ccn gateway id.
        """
        return pulumi.get(self, "ccn_gw_id")

    @property
    @pulumi.getter(name="cvmInstanceId")
    def cvm_instance_id(self) -> str:
        """
        cvm instance id.
        """
        return pulumi.get(self, "cvm_instance_id")

    @property
    @pulumi.getter(name="dbKernel")
    def db_kernel(self) -> str:
        """
        database kernel.
        """
        return pulumi.get(self, "db_kernel")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        """
        engine version.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        node role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tmpSecretId")
    def tmp_secret_id(self) -> str:
        """
        temporary secret id.
        """
        return pulumi.get(self, "tmp_secret_id")

    @property
    @pulumi.getter(name="tmpSecretKey")
    def tmp_secret_key(self) -> str:
        """
        temporary secret key.
        """
        return pulumi.get(self, "tmp_secret_key")

    @property
    @pulumi.getter(name="tmpToken")
    def tmp_token(self) -> str:
        """
        temporary token.
        """
        return pulumi.get(self, "tmp_token")

    @property
    @pulumi.getter(name="uniqVpnGwId")
    def uniq_vpn_gw_id(self) -> str:
        """
        vpn gateway id.
        """
        return pulumi.get(self, "uniq_vpn_gw_id")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        user.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetMigrateJobsListSrcInfoResult(dict):
    def __init__(__self__, *,
                 access_type: str,
                 database_type: str,
                 extra_attrs: Sequence['outputs.GetMigrateJobsListSrcInfoExtraAttrResult'],
                 infos: Sequence['outputs.GetMigrateJobsListSrcInfoInfoResult'],
                 node_type: str,
                 region: str,
                 supplier: str):
        """
        :param str access_type: access type.
        :param str database_type: database type.
        :param Sequence['GetMigrateJobsListSrcInfoExtraAttrArgs'] extra_attrs: extra attributes.
        :param Sequence['GetMigrateJobsListSrcInfoInfoArgs'] infos: db info.
        :param str node_type: node type.
        :param str region: region.
        :param str supplier: supplier.
        """
        pulumi.set(__self__, "access_type", access_type)
        pulumi.set(__self__, "database_type", database_type)
        pulumi.set(__self__, "extra_attrs", extra_attrs)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "node_type", node_type)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "supplier", supplier)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> str:
        """
        access type.
        """
        return pulumi.get(self, "access_type")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        """
        database type.
        """
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter(name="extraAttrs")
    def extra_attrs(self) -> Sequence['outputs.GetMigrateJobsListSrcInfoExtraAttrResult']:
        """
        extra attributes.
        """
        return pulumi.get(self, "extra_attrs")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetMigrateJobsListSrcInfoInfoResult']:
        """
        db info.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> str:
        """
        node type.
        """
        return pulumi.get(self, "node_type")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def supplier(self) -> str:
        """
        supplier.
        """
        return pulumi.get(self, "supplier")


@pulumi.output_type
class GetMigrateJobsListSrcInfoExtraAttrResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: key.
        :param str value: value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetMigrateJobsListSrcInfoInfoResult(dict):
    def __init__(__self__, *,
                 account: str,
                 account_mode: str,
                 account_role: str,
                 ccn_gw_id: str,
                 cvm_instance_id: str,
                 db_kernel: str,
                 engine_version: str,
                 host: str,
                 instance_id: str,
                 password: str,
                 port: int,
                 role: str,
                 subnet_id: str,
                 tmp_secret_id: str,
                 tmp_secret_key: str,
                 tmp_token: str,
                 uniq_vpn_gw_id: str,
                 user: str,
                 vpc_id: str):
        """
        :param str account: account.
        :param str account_mode: account mode.
        :param str account_role: account role.
        :param str ccn_gw_id: ccn gateway id.
        :param str cvm_instance_id: cvm instance id.
        :param str db_kernel: database kernel.
        :param str engine_version: engine version.
        :param str host: host.
        :param str instance_id: instance id.
        :param str password: password.
        :param int port: port.
        :param str role: node role.
        :param str subnet_id: subnet id.
        :param str tmp_secret_id: temporary secret id.
        :param str tmp_secret_key: temporary secret key.
        :param str tmp_token: temporary token.
        :param str uniq_vpn_gw_id: vpn gateway id.
        :param str user: user.
        :param str vpc_id: vpc id.
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "account_mode", account_mode)
        pulumi.set(__self__, "account_role", account_role)
        pulumi.set(__self__, "ccn_gw_id", ccn_gw_id)
        pulumi.set(__self__, "cvm_instance_id", cvm_instance_id)
        pulumi.set(__self__, "db_kernel", db_kernel)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tmp_secret_id", tmp_secret_id)
        pulumi.set(__self__, "tmp_secret_key", tmp_secret_key)
        pulumi.set(__self__, "tmp_token", tmp_token)
        pulumi.set(__self__, "uniq_vpn_gw_id", uniq_vpn_gw_id)
        pulumi.set(__self__, "user", user)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def account(self) -> str:
        """
        account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="accountMode")
    def account_mode(self) -> str:
        """
        account mode.
        """
        return pulumi.get(self, "account_mode")

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> str:
        """
        account role.
        """
        return pulumi.get(self, "account_role")

    @property
    @pulumi.getter(name="ccnGwId")
    def ccn_gw_id(self) -> str:
        """
        ccn gateway id.
        """
        return pulumi.get(self, "ccn_gw_id")

    @property
    @pulumi.getter(name="cvmInstanceId")
    def cvm_instance_id(self) -> str:
        """
        cvm instance id.
        """
        return pulumi.get(self, "cvm_instance_id")

    @property
    @pulumi.getter(name="dbKernel")
    def db_kernel(self) -> str:
        """
        database kernel.
        """
        return pulumi.get(self, "db_kernel")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        """
        engine version.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        node role.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tmpSecretId")
    def tmp_secret_id(self) -> str:
        """
        temporary secret id.
        """
        return pulumi.get(self, "tmp_secret_id")

    @property
    @pulumi.getter(name="tmpSecretKey")
    def tmp_secret_key(self) -> str:
        """
        temporary secret key.
        """
        return pulumi.get(self, "tmp_secret_key")

    @property
    @pulumi.getter(name="tmpToken")
    def tmp_token(self) -> str:
        """
        temporary token.
        """
        return pulumi.get(self, "tmp_token")

    @property
    @pulumi.getter(name="uniqVpnGwId")
    def uniq_vpn_gw_id(self) -> str:
        """
        vpn gateway id.
        """
        return pulumi.get(self, "uniq_vpn_gw_id")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        user.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetMigrateJobsListStepInfoResult(dict):
    def __init__(__self__, *,
                 master_slave_distance: int,
                 seconds_behind_master: int,
                 step_all: int,
                 step_infos: Sequence['outputs.GetMigrateJobsListStepInfoStepInfoResult'],
                 step_now: int):
        """
        :param int master_slave_distance: master slave distance.
        :param int seconds_behind_master: seconds behind master.
        :param int step_all: number of all steps.
        :param Sequence['GetMigrateJobsListStepInfoStepInfoArgs'] step_infos: step infos.
        :param int step_now: current step.
        """
        pulumi.set(__self__, "master_slave_distance", master_slave_distance)
        pulumi.set(__self__, "seconds_behind_master", seconds_behind_master)
        pulumi.set(__self__, "step_all", step_all)
        pulumi.set(__self__, "step_infos", step_infos)
        pulumi.set(__self__, "step_now", step_now)

    @property
    @pulumi.getter(name="masterSlaveDistance")
    def master_slave_distance(self) -> int:
        """
        master slave distance.
        """
        return pulumi.get(self, "master_slave_distance")

    @property
    @pulumi.getter(name="secondsBehindMaster")
    def seconds_behind_master(self) -> int:
        """
        seconds behind master.
        """
        return pulumi.get(self, "seconds_behind_master")

    @property
    @pulumi.getter(name="stepAll")
    def step_all(self) -> int:
        """
        number of all steps.
        """
        return pulumi.get(self, "step_all")

    @property
    @pulumi.getter(name="stepInfos")
    def step_infos(self) -> Sequence['outputs.GetMigrateJobsListStepInfoStepInfoResult']:
        """
        step infos.
        """
        return pulumi.get(self, "step_infos")

    @property
    @pulumi.getter(name="stepNow")
    def step_now(self) -> int:
        """
        current step.
        """
        return pulumi.get(self, "step_now")


@pulumi.output_type
class GetMigrateJobsListStepInfoStepInfoResult(dict):
    def __init__(__self__, *,
                 errors: Sequence['outputs.GetMigrateJobsListStepInfoStepInfoErrorResult'],
                 percent: int,
                 start_time: str,
                 status: str,
                 step_id: str,
                 step_message: str,
                 step_name: str,
                 step_no: int,
                 warnings: Sequence['outputs.GetMigrateJobsListStepInfoStepInfoWarningResult']):
        """
        :param Sequence['GetMigrateJobsListStepInfoStepInfoErrorArgs'] errors: error list.
        :param int percent: the percent of miragtion progress.
        :param str start_time: start time.
        :param str status: migrate status.
        :param str step_id: step id.
        :param str step_message: step message.
        :param str step_name: step name.
        :param int step_no: step number.
        :param Sequence['GetMigrateJobsListStepInfoStepInfoWarningArgs'] warnings: warning list.
        """
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "percent", percent)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "step_id", step_id)
        pulumi.set(__self__, "step_message", step_message)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "step_no", step_no)
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.GetMigrateJobsListStepInfoStepInfoErrorResult']:
        """
        error list.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def percent(self) -> int:
        """
        the percent of miragtion progress.
        """
        return pulumi.get(self, "percent")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        migrate status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> str:
        """
        step id.
        """
        return pulumi.get(self, "step_id")

    @property
    @pulumi.getter(name="stepMessage")
    def step_message(self) -> str:
        """
        step message.
        """
        return pulumi.get(self, "step_message")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        """
        step name.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepNo")
    def step_no(self) -> int:
        """
        step number.
        """
        return pulumi.get(self, "step_no")

    @property
    @pulumi.getter
    def warnings(self) -> Sequence['outputs.GetMigrateJobsListStepInfoStepInfoWarningResult']:
        """
        warning list.
        """
        return pulumi.get(self, "warnings")


@pulumi.output_type
class GetMigrateJobsListStepInfoStepInfoErrorResult(dict):
    def __init__(__self__, *,
                 help_doc: str,
                 message: str,
                 solution: str):
        """
        :param str help_doc: help document.
        :param str message: message.
        :param str solution: solution.
        """
        pulumi.set(__self__, "help_doc", help_doc)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "solution", solution)

    @property
    @pulumi.getter(name="helpDoc")
    def help_doc(self) -> str:
        """
        help document.
        """
        return pulumi.get(self, "help_doc")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def solution(self) -> str:
        """
        solution.
        """
        return pulumi.get(self, "solution")


@pulumi.output_type
class GetMigrateJobsListStepInfoStepInfoWarningResult(dict):
    def __init__(__self__, *,
                 help_doc: str,
                 message: str,
                 solution: str):
        """
        :param str help_doc: help document.
        :param str message: message.
        :param str solution: solution.
        """
        pulumi.set(__self__, "help_doc", help_doc)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "solution", solution)

    @property
    @pulumi.getter(name="helpDoc")
    def help_doc(self) -> str:
        """
        help document.
        """
        return pulumi.get(self, "help_doc")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def solution(self) -> str:
        """
        solution.
        """
        return pulumi.get(self, "solution")


@pulumi.output_type
class GetMigrateJobsListTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: tag key.
        :param str tag_value: tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetMigrateJobsListTradeInfoResult(dict):
    def __init__(__self__, *,
                 billing_type: str,
                 deal_name: str,
                 expire_time: str,
                 instance_class: str,
                 isolate_reason: str,
                 isolate_time: str,
                 last_deal_name: str,
                 offline_reason: str,
                 offline_time: str,
                 pay_type: str,
                 trade_status: str):
        """
        :param str billing_type: billing type.
        :param str deal_name: deal name.
        :param str expire_time: expired time.
        :param str instance_class: instance class.
        :param str isolate_reason: isolate reason.
        :param str isolate_time: isolate time.
        :param str last_deal_name: last deal name.
        :param str offline_reason: offline reason.
        :param str offline_time: offline time.
        :param str pay_type: pay type.
        :param str trade_status: trade status.
        """
        pulumi.set(__self__, "billing_type", billing_type)
        pulumi.set(__self__, "deal_name", deal_name)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "instance_class", instance_class)
        pulumi.set(__self__, "isolate_reason", isolate_reason)
        pulumi.set(__self__, "isolate_time", isolate_time)
        pulumi.set(__self__, "last_deal_name", last_deal_name)
        pulumi.set(__self__, "offline_reason", offline_reason)
        pulumi.set(__self__, "offline_time", offline_time)
        pulumi.set(__self__, "pay_type", pay_type)
        pulumi.set(__self__, "trade_status", trade_status)

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> str:
        """
        billing type.
        """
        return pulumi.get(self, "billing_type")

    @property
    @pulumi.getter(name="dealName")
    def deal_name(self) -> str:
        """
        deal name.
        """
        return pulumi.get(self, "deal_name")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        expired time.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="instanceClass")
    def instance_class(self) -> str:
        """
        instance class.
        """
        return pulumi.get(self, "instance_class")

    @property
    @pulumi.getter(name="isolateReason")
    def isolate_reason(self) -> str:
        """
        isolate reason.
        """
        return pulumi.get(self, "isolate_reason")

    @property
    @pulumi.getter(name="isolateTime")
    def isolate_time(self) -> str:
        """
        isolate time.
        """
        return pulumi.get(self, "isolate_time")

    @property
    @pulumi.getter(name="lastDealName")
    def last_deal_name(self) -> str:
        """
        last deal name.
        """
        return pulumi.get(self, "last_deal_name")

    @property
    @pulumi.getter(name="offlineReason")
    def offline_reason(self) -> str:
        """
        offline reason.
        """
        return pulumi.get(self, "offline_reason")

    @property
    @pulumi.getter(name="offlineTime")
    def offline_time(self) -> str:
        """
        offline time.
        """
        return pulumi.get(self, "offline_time")

    @property
    @pulumi.getter(name="payType")
    def pay_type(self) -> str:
        """
        pay type.
        """
        return pulumi.get(self, "pay_type")

    @property
    @pulumi.getter(name="tradeStatus")
    def trade_status(self) -> str:
        """
        trade status.
        """
        return pulumi.get(self, "trade_status")


@pulumi.output_type
class GetMigrateJobsTagFilterResult(dict):
    def __init__(__self__, *,
                 tag_key: Optional[str] = None,
                 tag_value: Optional[str] = None):
        """
        :param str tag_key: tag key.
        :param str tag_value: tag value.
        """
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[str]:
        """
        tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[str]:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetSyncJobsListResult(dict):
    def __init__(__self__, *,
                 actions: Sequence[str],
                 all_actions: Sequence[str],
                 create_time: str,
                 details: Sequence['outputs.GetSyncJobsListDetailResult'],
                 dst_access_type: str,
                 dst_database_type: str,
                 dst_infos: Sequence['outputs.GetSyncJobsListDstInfoResult'],
                 dst_region: str,
                 end_time: str,
                 expect_run_time: str,
                 expire_time: str,
                 job_id: str,
                 job_name: str,
                 objects: Sequence['outputs.GetSyncJobsListObjectResult'],
                 options: Sequence['outputs.GetSyncJobsListOptionResult'],
                 pay_mode: str,
                 run_mode: str,
                 specification: str,
                 src_access_type: str,
                 src_database_type: str,
                 src_infos: Sequence['outputs.GetSyncJobsListSrcInfoResult'],
                 src_region: str,
                 start_time: str,
                 status: str,
                 tags: Sequence['outputs.GetSyncJobsListTagResult']):
        """
        :param Sequence[str] actions: support action list for current status.
        :param Sequence[str] all_actions: all action list.
        :param str create_time: create time.
        :param Sequence['GetSyncJobsListDetailArgs'] details: tag list.
        :param str dst_access_type: destination access type.
        :param str dst_database_type: destination database type.
        :param Sequence['GetSyncJobsListDstInfoArgs'] dst_infos: destination info.
        :param str dst_region: destination region.
        :param str end_time: end time.
        :param str expect_run_time: expected run time.
        :param str expire_time: expire time.
        :param str job_id: job id.
        :param str job_name: job name.
        :param Sequence['GetSyncJobsListObjectArgs'] objects: objects.
        :param Sequence['GetSyncJobsListOptionArgs'] options: options.
        :param str pay_mode: pay mode, optional value is PrePay or PostPay.
        :param str run_mode: run mode, optional value is mmediate or Timed.
        :param str specification: specification.
        :param str src_access_type: source access type.
        :param str src_database_type: source database type.
        :param Sequence['GetSyncJobsListSrcInfoArgs'] src_infos: source info.
        :param str src_region: source region.
        :param str start_time: start time.
        :param str status: status.
        :param Sequence['GetSyncJobsListTagArgs'] tags: tag list.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "all_actions", all_actions)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "details", details)
        pulumi.set(__self__, "dst_access_type", dst_access_type)
        pulumi.set(__self__, "dst_database_type", dst_database_type)
        pulumi.set(__self__, "dst_infos", dst_infos)
        pulumi.set(__self__, "dst_region", dst_region)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "expect_run_time", expect_run_time)
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "job_id", job_id)
        pulumi.set(__self__, "job_name", job_name)
        pulumi.set(__self__, "objects", objects)
        pulumi.set(__self__, "options", options)
        pulumi.set(__self__, "pay_mode", pay_mode)
        pulumi.set(__self__, "run_mode", run_mode)
        pulumi.set(__self__, "specification", specification)
        pulumi.set(__self__, "src_access_type", src_access_type)
        pulumi.set(__self__, "src_database_type", src_database_type)
        pulumi.set(__self__, "src_infos", src_infos)
        pulumi.set(__self__, "src_region", src_region)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def actions(self) -> Sequence[str]:
        """
        support action list for current status.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="allActions")
    def all_actions(self) -> Sequence[str]:
        """
        all action list.
        """
        return pulumi.get(self, "all_actions")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        create time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def details(self) -> Sequence['outputs.GetSyncJobsListDetailResult']:
        """
        tag list.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter(name="dstAccessType")
    def dst_access_type(self) -> str:
        """
        destination access type.
        """
        return pulumi.get(self, "dst_access_type")

    @property
    @pulumi.getter(name="dstDatabaseType")
    def dst_database_type(self) -> str:
        """
        destination database type.
        """
        return pulumi.get(self, "dst_database_type")

    @property
    @pulumi.getter(name="dstInfos")
    def dst_infos(self) -> Sequence['outputs.GetSyncJobsListDstInfoResult']:
        """
        destination info.
        """
        return pulumi.get(self, "dst_infos")

    @property
    @pulumi.getter(name="dstRegion")
    def dst_region(self) -> str:
        """
        destination region.
        """
        return pulumi.get(self, "dst_region")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        """
        end time.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="expectRunTime")
    def expect_run_time(self) -> str:
        """
        expected run time.
        """
        return pulumi.get(self, "expect_run_time")

    @property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> str:
        """
        expire time.
        """
        return pulumi.get(self, "expire_time")

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> str:
        """
        job id.
        """
        return pulumi.get(self, "job_id")

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> str:
        """
        job name.
        """
        return pulumi.get(self, "job_name")

    @property
    @pulumi.getter
    def objects(self) -> Sequence['outputs.GetSyncJobsListObjectResult']:
        """
        objects.
        """
        return pulumi.get(self, "objects")

    @property
    @pulumi.getter
    def options(self) -> Sequence['outputs.GetSyncJobsListOptionResult']:
        """
        options.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="payMode")
    def pay_mode(self) -> str:
        """
        pay mode, optional value is PrePay or PostPay.
        """
        return pulumi.get(self, "pay_mode")

    @property
    @pulumi.getter(name="runMode")
    def run_mode(self) -> str:
        """
        run mode, optional value is mmediate or Timed.
        """
        return pulumi.get(self, "run_mode")

    @property
    @pulumi.getter
    def specification(self) -> str:
        """
        specification.
        """
        return pulumi.get(self, "specification")

    @property
    @pulumi.getter(name="srcAccessType")
    def src_access_type(self) -> str:
        """
        source access type.
        """
        return pulumi.get(self, "src_access_type")

    @property
    @pulumi.getter(name="srcDatabaseType")
    def src_database_type(self) -> str:
        """
        source database type.
        """
        return pulumi.get(self, "src_database_type")

    @property
    @pulumi.getter(name="srcInfos")
    def src_infos(self) -> Sequence['outputs.GetSyncJobsListSrcInfoResult']:
        """
        source info.
        """
        return pulumi.get(self, "src_infos")

    @property
    @pulumi.getter(name="srcRegion")
    def src_region(self) -> str:
        """
        source region.
        """
        return pulumi.get(self, "src_region")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetSyncJobsListTagResult']:
        """
        tag list.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSyncJobsListDetailResult(dict):
    def __init__(__self__, *,
                 current_step_progress: int,
                 master_slave_distance: int,
                 message: str,
                 progress: int,
                 seconds_behind_master: int,
                 step_all: int,
                 step_infos: Sequence['outputs.GetSyncJobsListDetailStepInfoResult'],
                 step_now: int):
        """
        :param int current_step_progress: current step progress.
        :param int master_slave_distance: master slave distance.
        :param str message: message.
        :param int progress: current step progress.
        :param int seconds_behind_master: seconds behind master.
        :param int step_all: total step numbers.
        :param Sequence['GetSyncJobsListDetailStepInfoArgs'] step_infos: step infos.
        :param int step_now: current step number.
        """
        pulumi.set(__self__, "current_step_progress", current_step_progress)
        pulumi.set(__self__, "master_slave_distance", master_slave_distance)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "seconds_behind_master", seconds_behind_master)
        pulumi.set(__self__, "step_all", step_all)
        pulumi.set(__self__, "step_infos", step_infos)
        pulumi.set(__self__, "step_now", step_now)

    @property
    @pulumi.getter(name="currentStepProgress")
    def current_step_progress(self) -> int:
        """
        current step progress.
        """
        return pulumi.get(self, "current_step_progress")

    @property
    @pulumi.getter(name="masterSlaveDistance")
    def master_slave_distance(self) -> int:
        """
        master slave distance.
        """
        return pulumi.get(self, "master_slave_distance")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def progress(self) -> int:
        """
        current step progress.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="secondsBehindMaster")
    def seconds_behind_master(self) -> int:
        """
        seconds behind master.
        """
        return pulumi.get(self, "seconds_behind_master")

    @property
    @pulumi.getter(name="stepAll")
    def step_all(self) -> int:
        """
        total step numbers.
        """
        return pulumi.get(self, "step_all")

    @property
    @pulumi.getter(name="stepInfos")
    def step_infos(self) -> Sequence['outputs.GetSyncJobsListDetailStepInfoResult']:
        """
        step infos.
        """
        return pulumi.get(self, "step_infos")

    @property
    @pulumi.getter(name="stepNow")
    def step_now(self) -> int:
        """
        current step number.
        """
        return pulumi.get(self, "step_now")


@pulumi.output_type
class GetSyncJobsListDetailStepInfoResult(dict):
    def __init__(__self__, *,
                 errors: Sequence['outputs.GetSyncJobsListDetailStepInfoErrorResult'],
                 progress: int,
                 start_time: str,
                 status: str,
                 step_id: str,
                 step_name: str,
                 step_no: int,
                 warnings: Sequence['outputs.GetSyncJobsListDetailStepInfoWarningResult']):
        """
        :param Sequence['GetSyncJobsListDetailStepInfoErrorArgs'] errors: error list.
        :param int progress: current step progress.
        :param str start_time: start time.
        :param str status: status.
        :param str step_id: step id.
        :param str step_name: step name.
        :param int step_no: step number.
        :param Sequence['GetSyncJobsListDetailStepInfoWarningArgs'] warnings: waring list.
        """
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "step_id", step_id)
        pulumi.set(__self__, "step_name", step_name)
        pulumi.set(__self__, "step_no", step_no)
        pulumi.set(__self__, "warnings", warnings)

    @property
    @pulumi.getter
    def errors(self) -> Sequence['outputs.GetSyncJobsListDetailStepInfoErrorResult']:
        """
        error list.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter
    def progress(self) -> int:
        """
        current step progress.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        """
        start time.
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="stepId")
    def step_id(self) -> str:
        """
        step id.
        """
        return pulumi.get(self, "step_id")

    @property
    @pulumi.getter(name="stepName")
    def step_name(self) -> str:
        """
        step name.
        """
        return pulumi.get(self, "step_name")

    @property
    @pulumi.getter(name="stepNo")
    def step_no(self) -> int:
        """
        step number.
        """
        return pulumi.get(self, "step_no")

    @property
    @pulumi.getter
    def warnings(self) -> Sequence['outputs.GetSyncJobsListDetailStepInfoWarningResult']:
        """
        waring list.
        """
        return pulumi.get(self, "warnings")


@pulumi.output_type
class GetSyncJobsListDetailStepInfoErrorResult(dict):
    def __init__(__self__, *,
                 code: str,
                 help_doc: str,
                 message: str,
                 solution: str):
        """
        :param str code: code.
        :param str help_doc: help document.
        :param str message: message.
        :param str solution: solution.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "help_doc", help_doc)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "solution", solution)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="helpDoc")
    def help_doc(self) -> str:
        """
        help document.
        """
        return pulumi.get(self, "help_doc")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def solution(self) -> str:
        """
        solution.
        """
        return pulumi.get(self, "solution")


@pulumi.output_type
class GetSyncJobsListDetailStepInfoWarningResult(dict):
    def __init__(__self__, *,
                 code: str,
                 help_doc: str,
                 message: str,
                 solution: str):
        """
        :param str code: code.
        :param str help_doc: help document.
        :param str message: message.
        :param str solution: solution.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "help_doc", help_doc)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "solution", solution)

    @property
    @pulumi.getter
    def code(self) -> str:
        """
        code.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="helpDoc")
    def help_doc(self) -> str:
        """
        help document.
        """
        return pulumi.get(self, "help_doc")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def solution(self) -> str:
        """
        solution.
        """
        return pulumi.get(self, "solution")


@pulumi.output_type
class GetSyncJobsListDstInfoResult(dict):
    def __init__(__self__, *,
                 account: str,
                 account_mode: str,
                 account_role: str,
                 ccn_id: str,
                 cvm_instance_id: str,
                 db_kernel: str,
                 db_name: str,
                 engine_version: str,
                 instance_id: str,
                 ip: str,
                 password: str,
                 port: int,
                 region: str,
                 subnet_id: str,
                 supplier: str,
                 tmp_secret_id: str,
                 tmp_secret_key: str,
                 tmp_token: str,
                 uniq_dcg_id: str,
                 uniq_vpn_gw_id: str,
                 user: str,
                 vpc_id: str):
        """
        :param str account: account.
        :param str account_mode: account mode.
        :param str account_role: account role.
        :param str ccn_id: ccn id.
        :param str cvm_instance_id: cvm instance id.
        :param str db_kernel: database kernel.
        :param str db_name: database name.
        :param str engine_version: engine version.
        :param str instance_id: instance id.
        :param str ip: ip.
        :param str password: password.
        :param int port: port.
        :param str region: region.
        :param str subnet_id: subnet id.
        :param str supplier: supplier.
        :param str tmp_secret_id: temporary secret id.
        :param str tmp_secret_key: temporary secret key.
        :param str tmp_token: temporary token.
        :param str uniq_dcg_id: dedicated gateway id.
        :param str uniq_vpn_gw_id: vpn gateway id.
        :param str user: user.
        :param str vpc_id: vpc id.
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "account_mode", account_mode)
        pulumi.set(__self__, "account_role", account_role)
        pulumi.set(__self__, "ccn_id", ccn_id)
        pulumi.set(__self__, "cvm_instance_id", cvm_instance_id)
        pulumi.set(__self__, "db_kernel", db_kernel)
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "supplier", supplier)
        pulumi.set(__self__, "tmp_secret_id", tmp_secret_id)
        pulumi.set(__self__, "tmp_secret_key", tmp_secret_key)
        pulumi.set(__self__, "tmp_token", tmp_token)
        pulumi.set(__self__, "uniq_dcg_id", uniq_dcg_id)
        pulumi.set(__self__, "uniq_vpn_gw_id", uniq_vpn_gw_id)
        pulumi.set(__self__, "user", user)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def account(self) -> str:
        """
        account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="accountMode")
    def account_mode(self) -> str:
        """
        account mode.
        """
        return pulumi.get(self, "account_mode")

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> str:
        """
        account role.
        """
        return pulumi.get(self, "account_role")

    @property
    @pulumi.getter(name="ccnId")
    def ccn_id(self) -> str:
        """
        ccn id.
        """
        return pulumi.get(self, "ccn_id")

    @property
    @pulumi.getter(name="cvmInstanceId")
    def cvm_instance_id(self) -> str:
        """
        cvm instance id.
        """
        return pulumi.get(self, "cvm_instance_id")

    @property
    @pulumi.getter(name="dbKernel")
    def db_kernel(self) -> str:
        """
        database kernel.
        """
        return pulumi.get(self, "db_kernel")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        database name.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        """
        engine version.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def supplier(self) -> str:
        """
        supplier.
        """
        return pulumi.get(self, "supplier")

    @property
    @pulumi.getter(name="tmpSecretId")
    def tmp_secret_id(self) -> str:
        """
        temporary secret id.
        """
        return pulumi.get(self, "tmp_secret_id")

    @property
    @pulumi.getter(name="tmpSecretKey")
    def tmp_secret_key(self) -> str:
        """
        temporary secret key.
        """
        return pulumi.get(self, "tmp_secret_key")

    @property
    @pulumi.getter(name="tmpToken")
    def tmp_token(self) -> str:
        """
        temporary token.
        """
        return pulumi.get(self, "tmp_token")

    @property
    @pulumi.getter(name="uniqDcgId")
    def uniq_dcg_id(self) -> str:
        """
        dedicated gateway id.
        """
        return pulumi.get(self, "uniq_dcg_id")

    @property
    @pulumi.getter(name="uniqVpnGwId")
    def uniq_vpn_gw_id(self) -> str:
        """
        vpn gateway id.
        """
        return pulumi.get(self, "uniq_vpn_gw_id")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        user.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetSyncJobsListObjectResult(dict):
    def __init__(__self__, *,
                 advanced_objects: Sequence[str],
                 databases: Sequence['outputs.GetSyncJobsListObjectDatabaseResult'],
                 mode: str):
        """
        :param Sequence[str] advanced_objects: advanced objects.
        :param Sequence['GetSyncJobsListObjectDatabaseArgs'] databases: database list.
        :param str mode: object mode.
        """
        pulumi.set(__self__, "advanced_objects", advanced_objects)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="advancedObjects")
    def advanced_objects(self) -> Sequence[str]:
        """
        advanced objects.
        """
        return pulumi.get(self, "advanced_objects")

    @property
    @pulumi.getter
    def databases(self) -> Sequence['outputs.GetSyncJobsListObjectDatabaseResult']:
        """
        database list.
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        object mode.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetSyncJobsListObjectDatabaseResult(dict):
    def __init__(__self__, *,
                 db_mode: str,
                 db_name: str,
                 function_mode: str,
                 functions: Sequence[str],
                 new_db_name: str,
                 new_schema_name: str,
                 procedure_mode: str,
                 procedures: Sequence[str],
                 schema_name: str,
                 table_mode: str,
                 tables: Sequence['outputs.GetSyncJobsListObjectDatabaseTableResult'],
                 view_mode: str,
                 views: Sequence['outputs.GetSyncJobsListObjectDatabaseViewResult']):
        """
        :param str db_mode: database mode.
        :param str db_name: database name.
        :param str function_mode: function mode.
        :param Sequence[str] functions: functions.
        :param str new_db_name: new database name.
        :param str new_schema_name: new schema name.
        :param str procedure_mode: procedure mode.
        :param Sequence[str] procedures: procedures.
        :param str schema_name: schema name.
        :param str table_mode: table mode.
        :param Sequence['GetSyncJobsListObjectDatabaseTableArgs'] tables: table list.
        :param str view_mode: view mode.
        :param Sequence['GetSyncJobsListObjectDatabaseViewArgs'] views: view list.
        """
        pulumi.set(__self__, "db_mode", db_mode)
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "function_mode", function_mode)
        pulumi.set(__self__, "functions", functions)
        pulumi.set(__self__, "new_db_name", new_db_name)
        pulumi.set(__self__, "new_schema_name", new_schema_name)
        pulumi.set(__self__, "procedure_mode", procedure_mode)
        pulumi.set(__self__, "procedures", procedures)
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "table_mode", table_mode)
        pulumi.set(__self__, "tables", tables)
        pulumi.set(__self__, "view_mode", view_mode)
        pulumi.set(__self__, "views", views)

    @property
    @pulumi.getter(name="dbMode")
    def db_mode(self) -> str:
        """
        database mode.
        """
        return pulumi.get(self, "db_mode")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        database name.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="functionMode")
    def function_mode(self) -> str:
        """
        function mode.
        """
        return pulumi.get(self, "function_mode")

    @property
    @pulumi.getter
    def functions(self) -> Sequence[str]:
        """
        functions.
        """
        return pulumi.get(self, "functions")

    @property
    @pulumi.getter(name="newDbName")
    def new_db_name(self) -> str:
        """
        new database name.
        """
        return pulumi.get(self, "new_db_name")

    @property
    @pulumi.getter(name="newSchemaName")
    def new_schema_name(self) -> str:
        """
        new schema name.
        """
        return pulumi.get(self, "new_schema_name")

    @property
    @pulumi.getter(name="procedureMode")
    def procedure_mode(self) -> str:
        """
        procedure mode.
        """
        return pulumi.get(self, "procedure_mode")

    @property
    @pulumi.getter
    def procedures(self) -> Sequence[str]:
        """
        procedures.
        """
        return pulumi.get(self, "procedures")

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        schema name.
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="tableMode")
    def table_mode(self) -> str:
        """
        table mode.
        """
        return pulumi.get(self, "table_mode")

    @property
    @pulumi.getter
    def tables(self) -> Sequence['outputs.GetSyncJobsListObjectDatabaseTableResult']:
        """
        table list.
        """
        return pulumi.get(self, "tables")

    @property
    @pulumi.getter(name="viewMode")
    def view_mode(self) -> str:
        """
        view mode.
        """
        return pulumi.get(self, "view_mode")

    @property
    @pulumi.getter
    def views(self) -> Sequence['outputs.GetSyncJobsListObjectDatabaseViewResult']:
        """
        view list.
        """
        return pulumi.get(self, "views")


@pulumi.output_type
class GetSyncJobsListObjectDatabaseTableResult(dict):
    def __init__(__self__, *,
                 filter_condition: str,
                 new_table_name: str,
                 table_name: str):
        """
        :param str filter_condition: filter condition.
        :param str new_table_name: new table name.
        :param str table_name: table name.
        """
        pulumi.set(__self__, "filter_condition", filter_condition)
        pulumi.set(__self__, "new_table_name", new_table_name)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="filterCondition")
    def filter_condition(self) -> str:
        """
        filter condition.
        """
        return pulumi.get(self, "filter_condition")

    @property
    @pulumi.getter(name="newTableName")
    def new_table_name(self) -> str:
        """
        new table name.
        """
        return pulumi.get(self, "new_table_name")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        """
        table name.
        """
        return pulumi.get(self, "table_name")


@pulumi.output_type
class GetSyncJobsListObjectDatabaseViewResult(dict):
    def __init__(__self__, *,
                 new_view_name: str,
                 view_name: str):
        """
        :param str new_view_name: new view name.
        :param str view_name: view name.
        """
        pulumi.set(__self__, "new_view_name", new_view_name)
        pulumi.set(__self__, "view_name", view_name)

    @property
    @pulumi.getter(name="newViewName")
    def new_view_name(self) -> str:
        """
        new view name.
        """
        return pulumi.get(self, "new_view_name")

    @property
    @pulumi.getter(name="viewName")
    def view_name(self) -> str:
        """
        view name.
        """
        return pulumi.get(self, "view_name")


@pulumi.output_type
class GetSyncJobsListOptionResult(dict):
    def __init__(__self__, *,
                 add_additional_column: bool,
                 conflict_handle_options: Sequence['outputs.GetSyncJobsListOptionConflictHandleOptionResult'],
                 conflict_handle_type: str,
                 ddl_options: Sequence['outputs.GetSyncJobsListOptionDdlOptionResult'],
                 deal_of_exist_same_table: str,
                 init_type: str,
                 op_types: Sequence[str]):
        """
        :param bool add_additional_column: add additional column.
        :param Sequence['GetSyncJobsListOptionConflictHandleOptionArgs'] conflict_handle_options: conflict handle option.
        :param str conflict_handle_type: conflict handle type.
        :param Sequence['GetSyncJobsListOptionDdlOptionArgs'] ddl_options: ddl options.
        :param str deal_of_exist_same_table: deal of exist same table.
        :param str init_type: init type.
        :param Sequence[str] op_types: operation types.
        """
        pulumi.set(__self__, "add_additional_column", add_additional_column)
        pulumi.set(__self__, "conflict_handle_options", conflict_handle_options)
        pulumi.set(__self__, "conflict_handle_type", conflict_handle_type)
        pulumi.set(__self__, "ddl_options", ddl_options)
        pulumi.set(__self__, "deal_of_exist_same_table", deal_of_exist_same_table)
        pulumi.set(__self__, "init_type", init_type)
        pulumi.set(__self__, "op_types", op_types)

    @property
    @pulumi.getter(name="addAdditionalColumn")
    def add_additional_column(self) -> bool:
        """
        add additional column.
        """
        return pulumi.get(self, "add_additional_column")

    @property
    @pulumi.getter(name="conflictHandleOptions")
    def conflict_handle_options(self) -> Sequence['outputs.GetSyncJobsListOptionConflictHandleOptionResult']:
        """
        conflict handle option.
        """
        return pulumi.get(self, "conflict_handle_options")

    @property
    @pulumi.getter(name="conflictHandleType")
    def conflict_handle_type(self) -> str:
        """
        conflict handle type.
        """
        return pulumi.get(self, "conflict_handle_type")

    @property
    @pulumi.getter(name="ddlOptions")
    def ddl_options(self) -> Sequence['outputs.GetSyncJobsListOptionDdlOptionResult']:
        """
        ddl options.
        """
        return pulumi.get(self, "ddl_options")

    @property
    @pulumi.getter(name="dealOfExistSameTable")
    def deal_of_exist_same_table(self) -> str:
        """
        deal of exist same table.
        """
        return pulumi.get(self, "deal_of_exist_same_table")

    @property
    @pulumi.getter(name="initType")
    def init_type(self) -> str:
        """
        init type.
        """
        return pulumi.get(self, "init_type")

    @property
    @pulumi.getter(name="opTypes")
    def op_types(self) -> Sequence[str]:
        """
        operation types.
        """
        return pulumi.get(self, "op_types")


@pulumi.output_type
class GetSyncJobsListOptionConflictHandleOptionResult(dict):
    def __init__(__self__, *,
                 condition_column: str,
                 condition_operator: str,
                 condition_order_in_src_and_dst: str):
        """
        :param str condition_column: condition column.
        :param str condition_operator: condition override operator.
        :param str condition_order_in_src_and_dst: condition order in source and destination.
        """
        pulumi.set(__self__, "condition_column", condition_column)
        pulumi.set(__self__, "condition_operator", condition_operator)
        pulumi.set(__self__, "condition_order_in_src_and_dst", condition_order_in_src_and_dst)

    @property
    @pulumi.getter(name="conditionColumn")
    def condition_column(self) -> str:
        """
        condition column.
        """
        return pulumi.get(self, "condition_column")

    @property
    @pulumi.getter(name="conditionOperator")
    def condition_operator(self) -> str:
        """
        condition override operator.
        """
        return pulumi.get(self, "condition_operator")

    @property
    @pulumi.getter(name="conditionOrderInSrcAndDst")
    def condition_order_in_src_and_dst(self) -> str:
        """
        condition order in source and destination.
        """
        return pulumi.get(self, "condition_order_in_src_and_dst")


@pulumi.output_type
class GetSyncJobsListOptionDdlOptionResult(dict):
    def __init__(__self__, *,
                 ddl_object: str,
                 ddl_values: Sequence[str]):
        """
        :param str ddl_object: ddl object.
        :param Sequence[str] ddl_values: ddl value.
        """
        pulumi.set(__self__, "ddl_object", ddl_object)
        pulumi.set(__self__, "ddl_values", ddl_values)

    @property
    @pulumi.getter(name="ddlObject")
    def ddl_object(self) -> str:
        """
        ddl object.
        """
        return pulumi.get(self, "ddl_object")

    @property
    @pulumi.getter(name="ddlValues")
    def ddl_values(self) -> Sequence[str]:
        """
        ddl value.
        """
        return pulumi.get(self, "ddl_values")


@pulumi.output_type
class GetSyncJobsListSrcInfoResult(dict):
    def __init__(__self__, *,
                 account: str,
                 account_mode: str,
                 account_role: str,
                 ccn_id: str,
                 cvm_instance_id: str,
                 db_kernel: str,
                 db_name: str,
                 engine_version: str,
                 instance_id: str,
                 ip: str,
                 password: str,
                 port: int,
                 region: str,
                 subnet_id: str,
                 supplier: str,
                 tmp_secret_id: str,
                 tmp_secret_key: str,
                 tmp_token: str,
                 uniq_dcg_id: str,
                 uniq_vpn_gw_id: str,
                 user: str,
                 vpc_id: str):
        """
        :param str account: account.
        :param str account_mode: account mode.
        :param str account_role: account role.
        :param str ccn_id: ccn id.
        :param str cvm_instance_id: cvm instance id.
        :param str db_kernel: database kernel.
        :param str db_name: database name.
        :param str engine_version: engine version.
        :param str instance_id: instance id.
        :param str ip: ip.
        :param str password: password.
        :param int port: port.
        :param str region: region.
        :param str subnet_id: subnet id.
        :param str supplier: supplier.
        :param str tmp_secret_id: temporary secret id.
        :param str tmp_secret_key: temporary secret key.
        :param str tmp_token: temporary token.
        :param str uniq_dcg_id: dedicated gateway id.
        :param str uniq_vpn_gw_id: vpn gateway id.
        :param str user: user.
        :param str vpc_id: vpc id.
        """
        pulumi.set(__self__, "account", account)
        pulumi.set(__self__, "account_mode", account_mode)
        pulumi.set(__self__, "account_role", account_role)
        pulumi.set(__self__, "ccn_id", ccn_id)
        pulumi.set(__self__, "cvm_instance_id", cvm_instance_id)
        pulumi.set(__self__, "db_kernel", db_kernel)
        pulumi.set(__self__, "db_name", db_name)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "supplier", supplier)
        pulumi.set(__self__, "tmp_secret_id", tmp_secret_id)
        pulumi.set(__self__, "tmp_secret_key", tmp_secret_key)
        pulumi.set(__self__, "tmp_token", tmp_token)
        pulumi.set(__self__, "uniq_dcg_id", uniq_dcg_id)
        pulumi.set(__self__, "uniq_vpn_gw_id", uniq_vpn_gw_id)
        pulumi.set(__self__, "user", user)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def account(self) -> str:
        """
        account.
        """
        return pulumi.get(self, "account")

    @property
    @pulumi.getter(name="accountMode")
    def account_mode(self) -> str:
        """
        account mode.
        """
        return pulumi.get(self, "account_mode")

    @property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> str:
        """
        account role.
        """
        return pulumi.get(self, "account_role")

    @property
    @pulumi.getter(name="ccnId")
    def ccn_id(self) -> str:
        """
        ccn id.
        """
        return pulumi.get(self, "ccn_id")

    @property
    @pulumi.getter(name="cvmInstanceId")
    def cvm_instance_id(self) -> str:
        """
        cvm instance id.
        """
        return pulumi.get(self, "cvm_instance_id")

    @property
    @pulumi.getter(name="dbKernel")
    def db_kernel(self) -> str:
        """
        database kernel.
        """
        return pulumi.get(self, "db_kernel")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> str:
        """
        database name.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> str:
        """
        engine version.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        """
        instance id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        """
        ip.
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        region.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        subnet id.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def supplier(self) -> str:
        """
        supplier.
        """
        return pulumi.get(self, "supplier")

    @property
    @pulumi.getter(name="tmpSecretId")
    def tmp_secret_id(self) -> str:
        """
        temporary secret id.
        """
        return pulumi.get(self, "tmp_secret_id")

    @property
    @pulumi.getter(name="tmpSecretKey")
    def tmp_secret_key(self) -> str:
        """
        temporary secret key.
        """
        return pulumi.get(self, "tmp_secret_key")

    @property
    @pulumi.getter(name="tmpToken")
    def tmp_token(self) -> str:
        """
        temporary token.
        """
        return pulumi.get(self, "tmp_token")

    @property
    @pulumi.getter(name="uniqDcgId")
    def uniq_dcg_id(self) -> str:
        """
        dedicated gateway id.
        """
        return pulumi.get(self, "uniq_dcg_id")

    @property
    @pulumi.getter(name="uniqVpnGwId")
    def uniq_vpn_gw_id(self) -> str:
        """
        vpn gateway id.
        """
        return pulumi.get(self, "uniq_vpn_gw_id")

    @property
    @pulumi.getter
    def user(self) -> str:
        """
        user.
        """
        return pulumi.get(self, "user")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        vpc id.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetSyncJobsListTagResult(dict):
    def __init__(__self__, *,
                 tag_key: str,
                 tag_value: str):
        """
        :param str tag_key: tag key.
        :param str tag_value: tag value.
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        """
        tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> str:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")


@pulumi.output_type
class GetSyncJobsTagFilterResult(dict):
    def __init__(__self__, *,
                 tag_key: Optional[str] = None,
                 tag_value: Optional[str] = None):
        """
        :param str tag_key: tag key.
        :param str tag_value: tag value.
        """
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_value is not None:
            pulumi.set(__self__, "tag_value", tag_value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[str]:
        """
        tag key.
        """
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[str]:
        """
        tag value.
        """
        return pulumi.get(self, "tag_value")


