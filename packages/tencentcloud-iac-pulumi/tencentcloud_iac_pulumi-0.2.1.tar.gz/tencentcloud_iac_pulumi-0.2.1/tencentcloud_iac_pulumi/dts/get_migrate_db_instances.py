# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMigrateDbInstancesResult',
    'AwaitableGetMigrateDbInstancesResult',
    'get_migrate_db_instances',
    'get_migrate_db_instances_output',
]

@pulumi.output_type
class GetMigrateDbInstancesResult:
    """
    A collection of values returned by getMigrateDbInstances.
    """
    def __init__(__self__, account_mode=None, database_type=None, id=None, instance_id=None, instance_name=None, instances=None, limit=None, migrate_role=None, offset=None, request_id=None, result_output_file=None, tmp_secret_id=None, tmp_secret_key=None, tmp_token=None):
        if account_mode and not isinstance(account_mode, str):
            raise TypeError("Expected argument 'account_mode' to be a str")
        pulumi.set(__self__, "account_mode", account_mode)
        if database_type and not isinstance(database_type, str):
            raise TypeError("Expected argument 'database_type' to be a str")
        pulumi.set(__self__, "database_type", database_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if migrate_role and not isinstance(migrate_role, str):
            raise TypeError("Expected argument 'migrate_role' to be a str")
        pulumi.set(__self__, "migrate_role", migrate_role)
        if offset and not isinstance(offset, int):
            raise TypeError("Expected argument 'offset' to be a int")
        pulumi.set(__self__, "offset", offset)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if result_output_file and not isinstance(result_output_file, str):
            raise TypeError("Expected argument 'result_output_file' to be a str")
        pulumi.set(__self__, "result_output_file", result_output_file)
        if tmp_secret_id and not isinstance(tmp_secret_id, str):
            raise TypeError("Expected argument 'tmp_secret_id' to be a str")
        pulumi.set(__self__, "tmp_secret_id", tmp_secret_id)
        if tmp_secret_key and not isinstance(tmp_secret_key, str):
            raise TypeError("Expected argument 'tmp_secret_key' to be a str")
        pulumi.set(__self__, "tmp_secret_key", tmp_secret_key)
        if tmp_token and not isinstance(tmp_token, str):
            raise TypeError("Expected argument 'tmp_token' to be a str")
        pulumi.set(__self__, "tmp_token", tmp_token)

    @property
    @pulumi.getter(name="accountMode")
    def account_mode(self) -> Optional[str]:
        return pulumi.get(self, "account_mode")

    @property
    @pulumi.getter(name="databaseType")
    def database_type(self) -> str:
        return pulumi.get(self, "database_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        Instance Id.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> Optional[str]:
        """
        Database instance name.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetMigrateDbInstancesInstanceResult']:
        """
        Instance list.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter(name="migrateRole")
    def migrate_role(self) -> Optional[str]:
        return pulumi.get(self, "migrate_role")

    @property
    @pulumi.getter
    def offset(self) -> Optional[int]:
        return pulumi.get(self, "offset")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        """
        Unique request id, provide this when encounter a problem.
        """
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="resultOutputFile")
    def result_output_file(self) -> Optional[str]:
        return pulumi.get(self, "result_output_file")

    @property
    @pulumi.getter(name="tmpSecretId")
    def tmp_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "tmp_secret_id")

    @property
    @pulumi.getter(name="tmpSecretKey")
    def tmp_secret_key(self) -> Optional[str]:
        return pulumi.get(self, "tmp_secret_key")

    @property
    @pulumi.getter(name="tmpToken")
    def tmp_token(self) -> Optional[str]:
        return pulumi.get(self, "tmp_token")


class AwaitableGetMigrateDbInstancesResult(GetMigrateDbInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMigrateDbInstancesResult(
            account_mode=self.account_mode,
            database_type=self.database_type,
            id=self.id,
            instance_id=self.instance_id,
            instance_name=self.instance_name,
            instances=self.instances,
            limit=self.limit,
            migrate_role=self.migrate_role,
            offset=self.offset,
            request_id=self.request_id,
            result_output_file=self.result_output_file,
            tmp_secret_id=self.tmp_secret_id,
            tmp_secret_key=self.tmp_secret_key,
            tmp_token=self.tmp_token)


def get_migrate_db_instances(account_mode: Optional[str] = None,
                             database_type: Optional[str] = None,
                             instance_id: Optional[str] = None,
                             instance_name: Optional[str] = None,
                             limit: Optional[int] = None,
                             migrate_role: Optional[str] = None,
                             offset: Optional[int] = None,
                             result_output_file: Optional[str] = None,
                             tmp_secret_id: Optional[str] = None,
                             tmp_secret_key: Optional[str] = None,
                             tmp_token: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMigrateDbInstancesResult:
    """
    Use this data source to query detailed information of dts migrate_db_instances

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    migrate_db_instances = tencentcloud.Dts.get_migrate_db_instances(account_mode="self",
        database_type="mysql",
        instance_id="cdb-ffulb2sg",
        instance_name="cdb_test",
        limit=10,
        migrate_role="src",
        offset=10,
        tmp_secret_id="AKIDvBDyVmna9TadcS4YzfBZmkU5TbX12345",
        tmp_secret_key="ZswjGWWHm24qMeiX6QUJsELDpC12345",
        tmp_token="JOqqCPVuWdNZvlVDLxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param str account_mode: The owning account of the resource is null or self(resources in the self account), other(resources in the other account).
    :param str database_type: Database type.
    :param str instance_id: Database instance id.
    :param str instance_name: Database instance name.
    :param int limit: Limit.
    :param str migrate_role: Whether the instance is the migration source or destination,src(for source), dst(for destination).
    :param int offset: Offset.
    :param str result_output_file: Used to save results.
    :param str tmp_secret_id: temporary secret id, used across account.
    :param str tmp_secret_key: temporary secret key, used across account.
    :param str tmp_token: temporary token, used across account.
    """
    __args__ = dict()
    __args__['accountMode'] = account_mode
    __args__['databaseType'] = database_type
    __args__['instanceId'] = instance_id
    __args__['instanceName'] = instance_name
    __args__['limit'] = limit
    __args__['migrateRole'] = migrate_role
    __args__['offset'] = offset
    __args__['resultOutputFile'] = result_output_file
    __args__['tmpSecretId'] = tmp_secret_id
    __args__['tmpSecretKey'] = tmp_secret_key
    __args__['tmpToken'] = tmp_token
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('tencentcloud:Dts/getMigrateDbInstances:getMigrateDbInstances', __args__, opts=opts, typ=GetMigrateDbInstancesResult).value

    return AwaitableGetMigrateDbInstancesResult(
        account_mode=pulumi.get(__ret__, 'account_mode'),
        database_type=pulumi.get(__ret__, 'database_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        instances=pulumi.get(__ret__, 'instances'),
        limit=pulumi.get(__ret__, 'limit'),
        migrate_role=pulumi.get(__ret__, 'migrate_role'),
        offset=pulumi.get(__ret__, 'offset'),
        request_id=pulumi.get(__ret__, 'request_id'),
        result_output_file=pulumi.get(__ret__, 'result_output_file'),
        tmp_secret_id=pulumi.get(__ret__, 'tmp_secret_id'),
        tmp_secret_key=pulumi.get(__ret__, 'tmp_secret_key'),
        tmp_token=pulumi.get(__ret__, 'tmp_token'))


@_utilities.lift_output_func(get_migrate_db_instances)
def get_migrate_db_instances_output(account_mode: Optional[pulumi.Input[Optional[str]]] = None,
                                    database_type: Optional[pulumi.Input[str]] = None,
                                    instance_id: Optional[pulumi.Input[Optional[str]]] = None,
                                    instance_name: Optional[pulumi.Input[Optional[str]]] = None,
                                    limit: Optional[pulumi.Input[Optional[int]]] = None,
                                    migrate_role: Optional[pulumi.Input[Optional[str]]] = None,
                                    offset: Optional[pulumi.Input[Optional[int]]] = None,
                                    result_output_file: Optional[pulumi.Input[Optional[str]]] = None,
                                    tmp_secret_id: Optional[pulumi.Input[Optional[str]]] = None,
                                    tmp_secret_key: Optional[pulumi.Input[Optional[str]]] = None,
                                    tmp_token: Optional[pulumi.Input[Optional[str]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMigrateDbInstancesResult]:
    """
    Use this data source to query detailed information of dts migrate_db_instances

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_tencentcloud as tencentcloud

    migrate_db_instances = tencentcloud.Dts.get_migrate_db_instances(account_mode="self",
        database_type="mysql",
        instance_id="cdb-ffulb2sg",
        instance_name="cdb_test",
        limit=10,
        migrate_role="src",
        offset=10,
        tmp_secret_id="AKIDvBDyVmna9TadcS4YzfBZmkU5TbX12345",
        tmp_secret_key="ZswjGWWHm24qMeiX6QUJsELDpC12345",
        tmp_token="JOqqCPVuWdNZvlVDLxxx")
    ```
    <!--End PulumiCodeChooser -->


    :param str account_mode: The owning account of the resource is null or self(resources in the self account), other(resources in the other account).
    :param str database_type: Database type.
    :param str instance_id: Database instance id.
    :param str instance_name: Database instance name.
    :param int limit: Limit.
    :param str migrate_role: Whether the instance is the migration source or destination,src(for source), dst(for destination).
    :param int offset: Offset.
    :param str result_output_file: Used to save results.
    :param str tmp_secret_id: temporary secret id, used across account.
    :param str tmp_secret_key: temporary secret key, used across account.
    :param str tmp_token: temporary token, used across account.
    """
    ...
