# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

# CAUTION: RELATIVE IMPORT IS REQUIRED, PLEASE CORRECT THE IMPORT STATEMENT AFTER RECOMPILING THE PROTOBUF
from ..grpc import messaging_pb2 as messaging__pb2

# TODO version compatibility

# GRPC_GENERATED_VERSION = '1.66.1'
# GRPC_VERSION = grpc.__version__
# _version_not_supported = False

# try:
#     from grpc._utilities import first_version_is_lower
#     _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
# except ImportError:
#     _version_not_supported = True

# if _version_not_supported:
#     raise RuntimeError(
#         f'The grpc package installed is at version {GRPC_VERSION},'
#         + f' but the generated code in messaging_pb2_grpc.py depends on'
#         + f' grpcio>={GRPC_GENERATED_VERSION}.'
#         + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
#         + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
#     )


class RoleMLMessagingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.invoke_procedure = channel.unary_unary(
                '/RoleMLMessaging/invoke_procedure',
                request_serializer=messaging__pb2.Request.SerializeToString,
                response_deserializer=messaging__pb2.Response.FromString,
                _registered_method=True)
        self.handshake = channel.unary_unary(
                '/RoleMLMessaging/handshake',
                request_serializer=messaging__pb2.Handshake.SerializeToString,
                response_deserializer=messaging__pb2.Response.FromString,
                _registered_method=True)
        self.handwave = channel.unary_unary(
                '/RoleMLMessaging/handwave',
                request_serializer=messaging__pb2.Handwave.SerializeToString,
                response_deserializer=messaging__pb2.Response.FromString,
                _registered_method=True)


class RoleMLMessagingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def invoke_procedure(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def handshake(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def handwave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoleMLMessagingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'invoke_procedure': grpc.unary_unary_rpc_method_handler(
                    servicer.invoke_procedure,
                    request_deserializer=messaging__pb2.Request.FromString,
                    response_serializer=messaging__pb2.Response.SerializeToString,
            ),
            'handshake': grpc.unary_unary_rpc_method_handler(
                    servicer.handshake,
                    request_deserializer=messaging__pb2.Handshake.FromString,
                    response_serializer=messaging__pb2.Response.SerializeToString,
            ),
            'handwave': grpc.unary_unary_rpc_method_handler(
                    servicer.handwave,
                    request_deserializer=messaging__pb2.Handwave.FromString,
                    response_serializer=messaging__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RoleMLMessaging', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('RoleMLMessaging', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RoleMLMessaging(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def invoke_procedure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RoleMLMessaging/invoke_procedure',
            messaging__pb2.Request.SerializeToString,
            messaging__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def handshake(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RoleMLMessaging/handshake',
            messaging__pb2.Handshake.SerializeToString,
            messaging__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def handwave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/RoleMLMessaging/handwave',
            messaging__pb2.Handwave.SerializeToString,
            messaging__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
