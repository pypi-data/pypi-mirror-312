from Illuminate.Contracts.Support.JsonSerializable import JsonSerializable
from _typeshed import Incomplete
from djing.core.AuthorizedToSee import AuthorizedToSee
from djing.core.Dashboard import Dashboard as Dashboard
from djing.core.Makeable import Makeable
from djing.core.Resource import Resource as Resource
from djing.core.WithBadge import WithBadge
from typing import Any, Callable

class MenuItem(AuthorizedToSee, Makeable, WithBadge, JsonSerializable):
    component: str
    def __init__(self, name, path: Incomplete | None = None) -> None: ...
    def path(self, path: Incomplete | None = None): ...
    def external(self): ...
    @classmethod
    def external_link(cls, name, path): ...
    def active_when(self, callback: Callable[[Any], Any]): ...
    @classmethod
    def dashboard(cls, dashboard_class: type['Dashboard']): ...
    @classmethod
    def resource(cls, resource_class: type['Resource']): ...
    def json_serialize(self) -> dict: ...
