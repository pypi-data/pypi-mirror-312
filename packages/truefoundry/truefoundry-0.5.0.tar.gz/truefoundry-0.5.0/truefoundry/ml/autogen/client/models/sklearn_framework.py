# coding: utf-8

"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from truefoundry.ml.autogen.client.models.serialization_format import (
    SerializationFormat,
)
from truefoundry.pydantic_v1 import BaseModel, Field, StrictStr, validator


class SklearnFramework(BaseModel):
    """
    +docs=Scikit-learn framework for the model version +label=Sklearn  # noqa: E501
    """

    type: StrictStr = Field(
        default=...,
        description="+label=Type +usage=Type of the framework +value=sklearn",
    )
    serialization_format: Optional[SerializationFormat] = Field(
        default=None,
        description="+label=Serialization format +usage=Serialization format used for the model",
    )
    model_filename: Optional[StrictStr] = Field(
        default=None, description="+label=Model file name +usage=Name of the model file"
    )
    __properties = ["type", "serialization_format", "model_filename"]

    @validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("sklearn",):
            raise ValueError("must be one of enum values ('sklearn')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SklearnFramework:
        """Create an instance of SklearnFramework from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SklearnFramework:
        """Create an instance of SklearnFramework from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SklearnFramework.parse_obj(obj)

        _obj = SklearnFramework.parse_obj(
            {
                "type": obj.get("type"),
                "serialization_format": obj.get("serialization_format"),
                "model_filename": obj.get("model_filename"),
            }
        )
        return _obj
