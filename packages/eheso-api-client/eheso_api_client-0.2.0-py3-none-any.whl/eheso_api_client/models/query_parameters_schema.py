# coding: utf-8

"""
    EHESO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from eheso_api_client.models.field_data_response_format_schema import FieldDataResponseFormatSchema
from eheso_api_client.models.sort_order_schema import SortOrderSchema

class QueryParametersSchema(BaseModel):
    """
    QueryParametersSchema
    """
    format: Optional[FieldDataResponseFormatSchema] = None
    result_info: Optional[StrictBool] = Field(default=None, alias="resultInfo")
    limit: Optional[StrictInt] = None
    locale: Optional[StrictStr] = None
    find: Optional[Dict[str, Dict[str, Any]]] = None
    select: Optional[conlist(StrictStr)] = None
    deselect: Optional[conlist(StrictStr)] = None
    sort: Optional[Dict[str, SortOrderSchema]] = None
    __properties = ["format", "resultInfo", "limit", "locale", "find", "select", "deselect", "sort"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QueryParametersSchema:
        """Create an instance of QueryParametersSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QueryParametersSchema:
        """Create an instance of QueryParametersSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QueryParametersSchema.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in QueryParametersSchema) in the input: " + obj)

        _obj = QueryParametersSchema.parse_obj({
            "format": obj.get("format"),
            "result_info": obj.get("resultInfo"),
            "limit": obj.get("limit"),
            "locale": obj.get("locale"),
            "find": obj.get("find"),
            "select": obj.get("select"),
            "deselect": obj.get("deselect"),
            "sort": dict((_k, _v) for _k, _v in obj.get("sort").items())
        })
        return _obj


