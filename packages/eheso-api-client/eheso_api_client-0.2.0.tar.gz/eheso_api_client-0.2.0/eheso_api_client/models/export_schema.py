# coding: utf-8

"""
    EHESO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from eheso_api_client.models.export_schema_file_export import ExportSchemaFileExport

class ExportSchema(BaseModel):
    """
    ExportSchema
    """
    file_export: ExportSchemaFileExport = Field(default=..., alias="fileExport")
    __properties = ["fileExport"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExportSchema:
        """Create an instance of ExportSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of file_export
        if self.file_export:
            _dict['fileExport'] = self.file_export.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExportSchema:
        """Create an instance of ExportSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExportSchema.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in ExportSchema) in the input: " + obj)

        _obj = ExportSchema.parse_obj({
            "file_export": ExportSchemaFileExport.from_dict(obj.get("fileExport")) if obj.get("fileExport") is not None else None
        })
        return _obj


