# coding: utf-8

"""
    EHESO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictStr, conlist

class DataAccessConfigSchemaGrantsValue(BaseModel):
    """
    DataAccessConfigSchemaGrantsValue
    """
    documents: Optional[Dict[str, Any]] = None
    fields: Optional[conlist(StrictStr)] = None
    __properties = ["documents", "fields"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DataAccessConfigSchemaGrantsValue:
        """Create an instance of DataAccessConfigSchemaGrantsValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if documents (nullable) is None
        # and __fields_set__ contains the field
        if self.documents is None and "documents" in self.__fields_set__:
            _dict['documents'] = None

        # set to None if fields (nullable) is None
        # and __fields_set__ contains the field
        if self.fields is None and "fields" in self.__fields_set__:
            _dict['fields'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DataAccessConfigSchemaGrantsValue:
        """Create an instance of DataAccessConfigSchemaGrantsValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DataAccessConfigSchemaGrantsValue.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in DataAccessConfigSchemaGrantsValue) in the input: " + obj)

        _obj = DataAccessConfigSchemaGrantsValue.parse_obj({
            "documents": obj.get("documents"),
            "fields": obj.get("fields")
        })
        return _obj


