# coding: utf-8

"""
    EHESO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class LayerFieldsInner(BaseModel):
    """
    LayerFieldsInner
    """
    layer_id: Optional[StrictStr] = Field(default=None, alias="layerId", description="The identifier for the layer.")
    is_key: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="isKey", description="Is this field part of the unique key of this layers data? (set to integer > 0)")
    field_id: Optional[StrictStr] = Field(default=None, alias="fieldId", description="The internal identifier for the field.")
    field_name: Optional[StrictStr] = Field(default=None, alias="fieldName", description="The name of the field.")
    field_type: Optional[StrictStr] = Field(default=None, alias="fieldType", description="The data type of the field.")
    __properties = ["layerId", "isKey", "fieldId", "fieldName", "fieldType"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LayerFieldsInner:
        """Create an instance of LayerFieldsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LayerFieldsInner:
        """Create an instance of LayerFieldsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LayerFieldsInner.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in LayerFieldsInner) in the input: " + obj)

        _obj = LayerFieldsInner.parse_obj({
            "layer_id": obj.get("layerId"),
            "is_key": obj.get("isKey"),
            "field_id": obj.get("fieldId"),
            "field_name": obj.get("fieldName"),
            "field_type": obj.get("fieldType")
        })
        return _obj


