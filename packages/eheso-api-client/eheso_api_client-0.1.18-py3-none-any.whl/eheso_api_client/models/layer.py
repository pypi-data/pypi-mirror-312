# coding: utf-8

"""
    EHESO API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from eheso_api_client.models.layer_country_config import LayerCountryConfig
from eheso_api_client.models.layer_fields_inner import LayerFieldsInner

class Layer(BaseModel):
    """
    Layer
    """
    country_config: Optional[LayerCountryConfig] = Field(default=None, alias="countryConfig")
    access_config: Optional[conlist(Any)] = Field(default=None, alias="accessConfig")
    id: Optional[StrictStr] = Field(default=None, alias="_id", description="The internal identifier for the layer.")
    layer_id: Optional[StrictStr] = Field(default=None, alias="layerId", description="The identifier for the layer.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the layer.")
    description: Optional[StrictStr] = None
    collection_name: Optional[StrictStr] = Field(default=None, alias="collectionName", description="The name of the collection in the database.")
    field_groups: Optional[conlist(Any)] = Field(default=None, alias="fieldGroups")
    fields: Optional[conlist(LayerFieldsInner)] = None
    extra_field_properties: Optional[conlist(Any)] = Field(default=None, alias="extraFieldProperties")
    countries: Optional[conlist(Any)] = None
    __properties = ["countryConfig", "accessConfig", "_id", "layerId", "name", "description", "collectionName", "fieldGroups", "fields", "extraFieldProperties", "countries"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Layer:
        """Create an instance of Layer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of country_config
        if self.country_config:
            _dict['countryConfig'] = self.country_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item in self.fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Layer:
        """Create an instance of Layer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Layer.parse_obj(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError("Error due to additional fields (not defined in Layer) in the input: " + obj)

        _obj = Layer.parse_obj({
            "country_config": LayerCountryConfig.from_dict(obj.get("countryConfig")) if obj.get("countryConfig") is not None else None,
            "access_config": obj.get("accessConfig"),
            "id": obj.get("_id"),
            "layer_id": obj.get("layerId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "collection_name": obj.get("collectionName"),
            "field_groups": obj.get("fieldGroups"),
            "fields": [LayerFieldsInner.from_dict(_item) for _item in obj.get("fields")] if obj.get("fields") is not None else None,
            "extra_field_properties": obj.get("extraFieldProperties"),
            "countries": obj.get("countries")
        })
        return _obj


