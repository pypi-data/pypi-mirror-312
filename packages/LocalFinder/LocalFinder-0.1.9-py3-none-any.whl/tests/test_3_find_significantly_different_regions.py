import unittest
import argparse
import os
from LocalFinder.commands.find_significantly_different_regions import main as find_regions_main

class TestFindSignificantRegions(unittest.TestCase):
    def test_find_significant_regions(self):
        # Input files generated by test_calculate_correlation_FC.py
        track_FC = 'tests/data_calculate_correlation_FC/tracks_log_Wald_pValue.bedgraph'
        track_correlation = 'tests/data_calculate_correlation_FC/tracks_pearson.bedgraph'
        output_dir = 'tests/data_find_significantly_different_regions'

        args = argparse.Namespace(
            track_FC=track_FC,
            track_correlation=track_correlation,
            output_dir=output_dir,
            min_region_size=2,
            fc_high_percentile=75,
            fc_low_percentile=25,
            corr_high_percentile=75,
            corr_low_percentile=25,
            chroms=['chr20']
        )

        # Run the command
        find_regions_main(args)

        # Check that output files exist
        self.assertTrue(os.path.exists(os.path.join(output_dir, 'high_FC_high_correlation_bins.bed')))
        self.assertTrue(os.path.exists(os.path.join(output_dir, 'high_FC_low_correlation_bins.bed')))

    # @classmethod
    # def tearDownClass(cls):
    #     # Remove the generated output files after tests
    #     files_to_remove = [
    #         'tests/data/high_FC_high_correlation_bins.bed',
    #         'tests/data/high_FC_low_correlation_bins.bed',
    #         'tests/data/low_FC_high_correlation_bins.bed',
    #         'tests/data/low_FC_low_correlation_bins.bed',
    #         'tests/data/FC_vs_Correlation_scatter_plot.png'
    #     ]
    #     for file_path in files_to_remove:
    #         if os.path.exists(file_path):
    #             os.remove(file_path)

if __name__ == '__main__':
    unittest.main()
