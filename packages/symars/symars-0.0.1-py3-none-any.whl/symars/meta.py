from enum import Enum
import sympy as sp
from sympy.core.numbers import (
    Exp1,
    Pi,
    EulerGamma,
    GoldenRatio,
    Catalan,
    TribonacciConstant,
)
from sortedcontainers import SortedList

###############################################################
############################ types ############################
###############################################################


class DType(Enum):
    F32 = 0
    F64 = 1

    def __str__(self) -> str:
        return "f32" if self == DType.F32 else "f64"

    def suffix(self) -> str:
        return f"_{str(self)}"


###############################################################
########################## functions ##########################
###############################################################


def is_constant(expr: sp.Expr):
    return (
        isinstance(expr, (sp.Symbol, int, float, sp.Integer, sp.Number, sp.Rational))
        or expr in CONSTANTS
    )


def get_parameters(expr):
    if isinstance(expr, list):
        parameters = set()
        for e in expr:
            parameters = parameters.union(set(get_parameters(e)))
        return SortedList(parameters)
    else:
        return SortedList(map(lambda x: str(x), expr.free_symbols))


def funcname(name, mi, ni):
    return f"{name}_{mi}_{ni}"


def funcname_vector(name, i):
    return f"{name}_{i}"


def watermarked(code):
    return f"{HEAD}\n{code.replace(HEAD, '')}"


def func_template(
    name,
    param_list,
    value_type: DType,
    code,
    inline: bool = True,
    const: bool = False,
):
    code = f"""

{"#[inline]" if inline else ""}
pub {"const" if const else ""} fn {name}({param_list}) -> {str(value_type)} {{

    {code}

}}
"""
    return watermarked(code)


def is_valid_rust_ident(name: str) -> bool:
    # 检查是否是 Rust 关键字
    if name in RUST_KEYWORDS:
        return False

    # 检查是否以字母或下划线开头
    if not (name[0].isalpha() or name[0] == "_"):
        return False

    # 检查是否包含非法字符
    for char in name[1:]:
        if not (char.isalnum() or char == "_"):
            return False

    return True


def assert_name(name: str):
    assert is_valid_rust_ident(
        name
    ), f"Invalid function name! Expects a valid Rust identifier, found `{name}`"


###############################################################
########################## constants ##########################
###############################################################

CONSTANTS = {
    Exp1(),
    Pi(),
    EulerGamma(),
    GoldenRatio(),
    Catalan(),
    TribonacciConstant(),
}

HEAD = """
/*

* Code generated by Symars. Thank you for using Symars!
  Symars is licensed under MIT licnese.
  Repository: https://github.com/Da1sypetals/Symars

* Computation code is not intended for manual editing.

* If you find an error,
  or if you believe Symars generates incorrect result, 
  please raise an issue under our repo with minimal reproducible example.

*/
"""


RUST_KEYWORDS = {
    "abstract",
    "alignof",
    "as",
    "become",
    "box",
    "break",
    "const",
    "continue",
    "crate",
    "do",
    "else",
    "enum",
    "extern",
    "false",
    "final",
    "fn",
    "for",
    "if",
    "impl",
    "in",
    "let",
    "loop",
    "macro",
    "match",
    "mod",
    "move",
    "mut",
    "offsetof",
    "override",
    "priv",
    "proc",
    "pub",
    "pure",
    "ref",
    "return",
    "Self",
    "self",
    "sizeof",
    "static",
    "struct",
    "super",
    "trait",
    "true",
    "type",
    "typeof",
    "unsafe",
    "unsized",
    "use",
    "virtual",
    "where",
    "while",
    "yield",
}
