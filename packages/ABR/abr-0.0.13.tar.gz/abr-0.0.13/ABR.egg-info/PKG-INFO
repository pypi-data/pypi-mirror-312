Metadata-Version: 2.1
Name: ABR
Version: 0.0.13
Summary: Evoked potential analysis software
Author-email: Brad Buran <bburan@alum.mit.edu>, Brad Buran <buran@ohsu.edu>
Maintainer-email: Brad Buran <bburan@alum.mit.edu>, Brad Buran <buran@ohsu.edu>
License: BSD 3-Clause License
        
        Copyright (c) 2019, Brad Buran
        All rights reserved.
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        1. Redistributions of source code must retain the above copyright notice, this
           list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        
        3. Neither the name of the copyright holder nor the names of its
           contributors may be used to endorse or promote products derived from
           this software without specific prior written permission.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
Project-URL: homepage, https://github.com/bburan/abr
Project-URL: documentation, https://github.com/bburan/abr
Project-URL: repository, https://github.com/bburan/abr
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: BSD License
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: atom
Requires-Dist: enaml[qt6-pyside]
Requires-Dist: numpy
Requires-Dist: scipy
Requires-Dist: pandas
Requires-Dist: matplotlib

# ABR analysis

This program facilitates the analysis of auditory evoked responses (tested with auditory brainstem responses and compound action potentials).  You can visualize the waveform series collected during a single experiment, and identify the threshold and extract the amplitude and latency of each of the individual peaks in the waveform.

The program works with the fillowing file formats:
* ABR data generated by the Eaton Peabody Laboratories Cochlear Function Test Suite (EPL CFTS).
* ABR data generated by [psiexperiment](https://github.com/psiexperiment/psiexperiment).
* ABR data generated by the Intelligent Hearing Systems (IHS) text export.

Individal research groups have also adapted the program to work with their own file formats.

## Installing

The simplest way to get started is to download the [Anaconda Python Distribution](https://www.anaconda.com/distribution/). Once installed, you will have new programs available in your start menu. One of these is called `Anaconda Prompt`. Open the `Anaconda Prompt` and you will get a command window. Type the following sequence of commands:

    conda create -n abr python=3.10
    conda activate abr
    pip install abr

## Running the program

Open the `Anaconda Prompt` and type:

    conda activate abr
    abr

## Updating the program

    conda activate abr
    pip install --upgrade abr

## Programs available

There are two main interfaces to the ABR analysis program. The first is the basic interface where you manually drag files from your file browser and drop them on the window. You can drag one file or multiple files. Each file will be opened in a separate tab. The second interface is an automatic one that will loop through all unprocessed ABR files found in a folder and present each file to you individually for analysis. Once you save the analysis, it will immediately move to the next file.

Both interfaces are accessed via the launcher. When you first open the launcher, you will specify:

* Your name (i.e., the "analyzer")
* The file format.  For many of you, you will pick the EPL CFTS unless you are using my software, [psiexperiment](https://github.com/bburan/psiexperiment) for data acquisition.
* Which waves you want to analyze. If none are checked, we will assume that you only wish to mark threshold.
* Filter settings to use. The original version of this program (distributed via the EPL website), filters waveforms using a 300 to 3000 Hz bandpass butterworth filter.

## Processing

Each waveform is bandpass filtered using a butterworth filter (filter order and highpass and lowpass cutoffs are specified via command-line options). This filtering process removes the baseline shift as well as high-frequency noise that may interfere with the peak-finding algorithm.  To prevent the waveform from being filtered, use the --nofilter option; however, be aware that this may degrade the efficacy of the automated peak.  Important note: since the algorithm uses a forward and reverse filter (to minimize phase shift), the actual order is double the requested order.

An initial estimate of P1-5 is computed and presented for correction.  You may navigate through the waveform stack via the up/down arrows and select a point via the corresponding number (1-5).  Once a point is selected (it will turn to a white square), you can move it along the waveform using the right/left arrow keys.  Since the algorithm relies on the location of P1-5 to compute the best possible estimate of N1-5, you should correct the location of P1-5 before asking the algorithm to estimate N1-5.  You may also specify threshold by navigating to the appropriate waveform (via the up/down arrows) and hitting the "t" key.

## Output format

The amplitude and latency of each point are saved along with the threshold of the series. If the point is part of a subthreshold waveform, the additive inverse of the latency is saved (i.e. when parsing the file, subthreshold data can be recognized by negative latencies).  Amplitudes from subthreshold points can be used to estimate the noise floor if desired.

## Interface

The current waveform is displayed as a thick, black line.  Once a threshold is specified, subthreshold waveforms are indicated by a dashed line.  The selected point is indicated by a white square.  Negativities are indicated by triangles, positivities as squares.  Red is P1/N1, yellow is P2/N2, green is P3/N3, light blue is P4/N4, and dark blue is P5/N5.

Instructions for using the program are included in the user interface.

# Attributions

Code relating to marking points unscoreable and/or shifting waveforms up/down to ensure they don't run off the plot are adapted from work performed for the United States government and, therefore, are in the public domain. All other part of the code remain licensed under the BSD 3-clause.
