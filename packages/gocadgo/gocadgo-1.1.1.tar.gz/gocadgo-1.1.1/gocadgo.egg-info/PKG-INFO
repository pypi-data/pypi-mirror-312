Metadata-Version: 2.1
Name: gocadgo
Version: 1.1.1
Summary: A basic network-based solver to propagate through heat exchanger cell properties
Author: Marina Kovaleva
License: MIT
Project-URL: Homepage, https://github.com/marina8888/gocadgo
Project-URL: Bug Tracker, https://github.com/marina8888/gocadgo/issues
Keywords: cfd,heat-loss,heat-exchanger
Classifier: Development Status :: 1 - Planning
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX
Classifier: Operating System :: Unix
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Other/Nonlisted Topic
Requires-Python: >=3
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: cffi>=1.0.0
Requires-Dist: matplotlib
Requires-Dist: numpy
Requires-Dist: Cantera

# gocadgo


## To Do  
[] Add depedencies <br>
[] Add example code and readme. <br>
[] Correct code for P and Q calcs
[] ensure network is connected correctly and propagates 
[] get the fields to actually print (somehow)

## Installation

```bash
pip install gocadgo
```
In testing and planning stages - do not use. 


## Basic Usage

```python
    # set boundary conditions: 
    my_inlet = set_boundary(T_in=300,
                 P_in=101325,
                 m_in=0.1, 
                 P_out=101325,
                 T_out=300, 
                 gas_type="N2"
                 )
    
    # create mesh and run network: 
    sky_train = Network(8, 8, 20, my_inlet)
    
    # display fields of interest: 
    show_fields(sky_train, 'q')
```
Explain here

### Function Choices

Explain functions you can call

### Function Parameters

The `func1` and `func2` functions take in the following parameters:

##### Positional

- **heyword** : Add meaning here

##### Keyword (Optional)

- **keyword** : add meaning here

For assistance with parameter selection refer to [RFC 9106](https://www.rfc-editor.org/rfc/rfc9106.html), in particular "Chapter 4: Parameter Choice".

### Function Exceptions

### Uploading to PyPi
<b> Note:  ``setup.py`` is now depreciated. Instead, use pypa/build, pypa/installer or other standards-based tools. </b>

Check distribution: 
```console 
python setup.py sdist bdist_wheel
twine check dist/*
```

Follow instructions for a setuptools build:
https://packaging.python.org/en/latest/tutorials/packaging-projects/

Get API token on link below: 
https://pypi.org/manage/account/#api-tokens

Activate your local environment and shell session use: 
```console
export TWINE_PASSWORD=<your-token>
export TWINE_USERNAME=__token__
```

Upload to Test PyPi:
```console
twine upload --repository-url https://test.pypi.org/legacy/ dist/*
```

Upload to PyPi:
```console
twine upload dist/*
```

Exceptions generated by the underlying Argon2 hashing function are raised under the `Argon2Error` class which can be imported as follows:

```python
from pyargon2 import Argon2Error
```
