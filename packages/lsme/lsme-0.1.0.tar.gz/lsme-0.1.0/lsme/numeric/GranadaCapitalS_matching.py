## Symbols used:
# ydbar
# MS
# yd
# yl
# ylbar
# g1
# muH
# kappaS
# g2
# invepsilonbar
# lambdaS
# kappaS3
# mu
# lam
# yubar
# onelooporder
# yu

import sys
import os
import numpy as np

import lsme.numeric.matchingresult as matchingresult

class GranadaSMatchingResult(matchingresult.GenericMatchingResult):
    def __init__(self, name='S'):
        super().__init__(name)
        self.MS = 1
        self.kappaS = 1
        self.kappaSbar = 1
        self.lambdaS = 1
        self.lambdaSbar = 1
        self.kappaS3 = 1
        self.kappaS3bar = 1
        self.nonvanishing = ['alphaOH', 'alphaOHB', 'alphaOHBox', 'alphaOHD', 'alphaOHW', 'alphaOHWB', 'alphaOdH', 'alphaOeH', 'alphaOHd', 'alphaOHe', 'alphaOHl1', 'alphaOHl3', 'alphaOHq1', 'alphaOHq3', 'alphaOHu', 'alphaOHud', 'alphaOle', 'alphaOledq', 'alphaOlequ1', 'alphaOqd1', 'alphaOqd8', 'alphaOqu1', 'alphaOqu8', 'alphaOquqd1', 'alphaOuH']

    def alphaO3G(self, ):
        return 0

    def alphaO3Gt(self, ):
        return 0

    def alphaO3W(self, ):
        return 0

    def alphaO3Wt(self, ):
        return 0

    def alphaOH(self, ):
        return ((self.kappaS)**(3) * self.kappaS3 * (self.MS)**(-6) + (self.kappaS)**(2) * self.lambdaS * (self.MS)**(-4) + 19/16 * (self.kappaS)**(6) * (self.MS)**(-8) * self.onelooporder * (np.pi)**(-2) + 5/8 * self.invepsilonbar * (self.kappaS)**(6) * (self.MS)**(-8) * self.onelooporder * (np.pi)**(-2) + -99/32 * (self.kappaS)**(5) * self.kappaS3 * (self.MS)**(-8) * self.onelooporder * (np.pi)**(-2) + -21/16 * self.invepsilonbar * (self.kappaS)**(5) * self.kappaS3 * (self.MS)**(-8) * self.onelooporder * (np.pi)**(-2) + 9/4 * (self.kappaS)**(4) * (self.kappaS3)**(2) * (self.MS)**(-8) * self.onelooporder * (np.pi)**(-2) + -9/4 * (self.kappaS)**(3) * (self.kappaS3)**(3) * (self.MS)**(-8) * self.onelooporder * (np.pi)**(-2) + 31/288 * (self.g2)**(2) * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + 5/48 * (self.g2)**(2) * self.invepsilonbar * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + -25/6 * (self.kappaS)**(4) * self.lam * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + -5/2 * self.invepsilonbar * (self.kappaS)**(4) * self.lam * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + 39/8 * (self.kappaS)**(3) * self.kappaS3 * self.lam * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + 9/4 * self.invepsilonbar * (self.kappaS)**(3) * self.kappaS3 * self.lam * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + -83/32 * (self.kappaS)**(4) * self.lambdaS * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + -21/16 * self.invepsilonbar * (self.kappaS)**(4) * self.lambdaS * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + 15/4 * (self.kappaS)**(3) * self.kappaS3 * self.lambdaS * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + 3/4 * self.invepsilonbar * (self.kappaS)**(3) * self.kappaS3 * self.lambdaS * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + -9/4 * (self.kappaS)**(2) * (self.kappaS3)**(2) * self.lambdaS * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + -31/144 * (self.g2)**(2) * (self.kappaS)**(2) * self.lam * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + -5/24 * (self.g2)**(2) * self.invepsilonbar * (self.kappaS)**(2) * self.lam * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + 41/12 * (self.kappaS)**(2) * (self.lam)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + 5/2 * self.invepsilonbar * (self.kappaS)**(2) * (self.lam)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + 27/8 * (self.kappaS)**(2) * self.lam * self.lambdaS * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + 9/4 * self.invepsilonbar * (self.kappaS)**(2) * self.lam * self.lambdaS * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + 11/8 * (self.kappaS)**(2) * (self.lambdaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + 3/4 * self.invepsilonbar * (self.kappaS)**(2) * (self.lambdaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + -3/8 * self.kappaS * self.kappaS3 * (self.lambdaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + 1/24 * (self.lambdaS)**(3) * (self.MS)**(-2) * self.onelooporder * (np.pi)**(-2) + -15/32 * (self.kappaS)**(5) * self.kappaS3 * (self.MS)**(-10) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) + -3/16 * self.invepsilonbar * (self.kappaS)**(5) * self.kappaS3 * (self.MS)**(-10) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) + -15/32 * (self.kappaS)**(4) * self.lambdaS * (self.MS)**(-8) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) + -3/16 * self.invepsilonbar * (self.kappaS)**(4) * self.lambdaS * (self.MS)**(-8) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) + -5/8 * (self.kappaS)**(6) * (self.MS)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + 21/16 * (self.kappaS)**(5) * self.kappaS3 * (self.MS)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + -5/48 * (self.g2)**(2) * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + 5/2 * (self.kappaS)**(4) * self.lam * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + -9/4 * (self.kappaS)**(3) * self.kappaS3 * self.lam * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + 21/16 * (self.kappaS)**(4) * self.lambdaS * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + -3/4 * (self.kappaS)**(3) * self.kappaS3 * self.lambdaS * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + 5/24 * (self.g2)**(2) * (self.kappaS)**(2) * self.lam * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + -5/2 * (self.kappaS)**(2) * (self.lam)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + -9/4 * (self.kappaS)**(2) * self.lam * self.lambdaS * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + -3/4 * (self.kappaS)**(2) * (self.lambdaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + 3/16 * (self.kappaS)**(5) * self.kappaS3 * (self.MS)**(-10) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + 3/16 * (self.kappaS)**(4) * self.lambdaS * (self.MS)**(-8) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)))

    def alphaOHB(self, ):
        return 1/192 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2)

    def alphaOHBox(self, ):
        return (-1/2 * (self.kappaS)**(2) * (self.MS)**(-4) + 19/192 * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + 1/16 * self.invepsilonbar * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + -13/32 * (self.kappaS)**(3) * self.kappaS3 * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + 33/32 * (self.kappaS)**(2) * (self.kappaS3)**(2) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) + -31/1152 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + -31/384 * (self.g2)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + -5/192 * (self.g1)**(2) * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + -5/64 * (self.g2)**(2) * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + -25/96 * (self.kappaS)**(2) * self.lambdaS * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/4 * self.invepsilonbar * (self.kappaS)**(2) * self.lambdaS * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + 5/16 * self.kappaS * self.kappaS3 * self.lambdaS * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/96 * (self.lambdaS)**(2) * (self.MS)**(-2) * self.onelooporder * (np.pi)**(-2) + 5/32 * (self.kappaS)**(4) * (self.MS)**(-8) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) + 1/16 * self.invepsilonbar * (self.kappaS)**(4) * (self.MS)**(-8) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) + -1/16 * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + 5/192 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + 5/64 * (self.g2)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + 1/4 * (self.kappaS)**(2) * self.lambdaS * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + -1/16 * (self.kappaS)**(4) * (self.MS)**(-8) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)))

    def alphaOHBt(self, ):
        return 0

    def alphaOHD(self, ):
        return (-31/288 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + -5/48 * (self.g1)**(2) * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) + 5/48 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)))

    def alphaOHG(self, ):
        return 0

    def alphaOHGt(self, ):
        return 0

    def alphaOHW(self, ):
        return 1/192 * (self.g2)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2)

    def alphaOHWB(self, ):
        return 1/96 * self.g1 * self.g2 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2)

    def alphaOHWBt(self, ):
        return 0

    def alphaOHWt(self, ):
        return 0

    def alphaWeinberg(self, mif1,mif2):
        return 0

    def alphaOdB(self, mif1,mif2):
        return 0

    def alphaOdd(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOdG(self, mif1,mif2):
        return 0

    def alphaOdH(self, mif1,mif2):
        return (-29/192 * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -1/32 * self.invepsilonbar * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 3/32 * (self.kappaS)**(3) * self.kappaS3 * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -31/576 * (self.g2)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -5/96 * (self.g2)**(2) * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 29/96 * (self.kappaS)**(2) * self.lam * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 1/16 * self.invepsilonbar * (self.kappaS)**(2) * self.lam * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 3/32 * (self.kappaS)**(2) * self.lambdaS * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 1/32 * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 5/96 * (self.g2)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + -1/16 * (self.kappaS)**(2) * self.lam * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2])

    def alphaOdW(self, mif1,mif2):
        return 0

    def alphaOeB(self, mif1,mif2):
        return 0

    def alphaOed(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOee(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOeH(self, mif1,mif2):
        return (-29/192 * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -1/32 * self.invepsilonbar * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 3/32 * (self.kappaS)**(3) * self.kappaS3 * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -31/576 * (self.g2)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -5/96 * (self.g2)**(2) * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 29/96 * (self.kappaS)**(2) * self.lam * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 1/16 * self.invepsilonbar * (self.kappaS)**(2) * self.lam * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 3/32 * (self.kappaS)**(2) * self.lambdaS * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 1/32 * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 5/96 * (self.g2)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + -1/16 * (self.kappaS)**(2) * self.lam * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2])

    def alphaOeu(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOeW(self, mif1,mif2):
        return 0

    def alphaOHd(self, mif1,mif2):
        return (17/3456 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/576 * (self.g1)**(2) * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/576 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + -5/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.ydbar[0,mif1] + -1/64 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.ydbar[0,mif1] + 1/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.ydbar[0,mif1] + -5/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.ydbar[1,mif1] + -1/64 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.ydbar[1,mif1] + 1/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.ydbar[1,mif1] + -5/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.ydbar[2,mif1] + -1/64 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.ydbar[2,mif1] + 1/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.ydbar[2,mif1])

    def alphaOHe(self, mif1,mif2):
        return (17/1152 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/192 * (self.g1)**(2) * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/192 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + -5/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[0,mif1] + -1/64 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[0,mif1] + 1/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.ylbar[0,mif1] + -5/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[1,mif1] + -1/64 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[1,mif1] + 1/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.ylbar[1,mif1] + -5/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[2,mif1] + -1/64 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[2,mif1] + 1/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.ylbar[2,mif1])

    def alphaOHl1(self, mif1,mif2):
        return (17/2304 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/384 * (self.g1)**(2) * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/384 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,0] * self.ylbar[mif2,0] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,0] * self.ylbar[mif2,0] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[mif1,0] * self.ylbar[mif2,0] + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,1] * self.ylbar[mif2,1] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,1] * self.ylbar[mif2,1] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[mif1,1] * self.ylbar[mif2,1] + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,2] * self.ylbar[mif2,2] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,2] * self.ylbar[mif2,2] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[mif1,2] * self.ylbar[mif2,2])

    def alphaOHl3(self, mif1,mif2):
        return (-17/2304 * (self.g2)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/384 * (self.g2)**(2) * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/384 * (self.g2)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,0] * self.ylbar[mif2,0] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,0] * self.ylbar[mif2,0] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[mif1,0] * self.ylbar[mif2,0] + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,1] * self.ylbar[mif2,1] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,1] * self.ylbar[mif2,1] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[mif1,1] * self.ylbar[mif2,1] + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,2] * self.ylbar[mif2,2] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,2] * self.ylbar[mif2,2] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yl[mif1,2] * self.ylbar[mif2,2])

    def alphaOHq1(self, mif1,mif2):
        return (-17/6912 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/1152 * (self.g1)**(2) * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/1152 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[mif2,0] + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[mif2,1] + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[mif2,2] + -5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,0] * self.yubar[mif2,0] + -1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,0] * self.yubar[mif2,0] + 1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[mif1,0] * self.yubar[mif2,0] + -5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,1] * self.yubar[mif2,1] + -1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,1] * self.yubar[mif2,1] + 1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[mif1,1] * self.yubar[mif2,1] + -5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,2] * self.yubar[mif2,2] + -1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,2] * self.yubar[mif2,2] + 1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[mif1,2] * self.yubar[mif2,2])

    def alphaOHq3(self, mif1,mif2):
        return (-17/2304 * (self.g2)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/384 * (self.g2)**(2) * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/384 * (self.g2)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[mif2,0] + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[mif2,1] + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[mif2,2] + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,0] * self.yubar[mif2,0] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,0] * self.yubar[mif2,0] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[mif1,0] * self.yubar[mif2,0] + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,1] * self.yubar[mif2,1] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,1] * self.yubar[mif2,1] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[mif1,1] * self.yubar[mif2,1] + 5/256 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,2] * self.yubar[mif2,2] + 1/128 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,2] * self.yubar[mif2,2] + -1/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[mif1,2] * self.yubar[mif2,2])

    def alphaOHu(self, mif1,mif2):
        return (-17/1728 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/288 * (self.g1)**(2) * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/288 * (self.g1)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MS)**(2) * (self.mu)**(-2)) + 5/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yubar[0,mif1] + 1/64 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yubar[0,mif1] + -1/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[0,mif2] * self.yubar[0,mif1] + 5/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yubar[1,mif1] + 1/64 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yubar[1,mif1] + -1/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[1,mif2] * self.yubar[1,mif1] + 5/128 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yubar[2,mif1] + 1/64 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yubar[2,mif1] + -1/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[2,mif2] * self.yubar[2,mif1])

    def alphaOHud(self, mif1,mif2):
        return (-5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yubar[0,mif1] + -1/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yubar[0,mif1] + 1/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yubar[0,mif1] + -5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yubar[1,mif1] + -1/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yubar[1,mif1] + 1/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yubar[1,mif1] + -5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yubar[2,mif1] + -1/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yubar[2,mif1] + 1/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yubar[2,mif1])

    def alphaOld(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOle(self, mif1,mif2,mif3,mif4):
        return -1/192 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif4] * self.ylbar[mif2,mif3]

    def alphaOledq(self, mif1,mif2,mif3,mif4):
        return 1/96 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.ydbar[mif4,mif3] * self.yl[mif1,mif2]

    def alphaOlequ1(self, mif1,mif2,mif3,mif4):
        return -1/96 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] * self.yu[mif3,mif4]

    def alphaOlequ3(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOll(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOlq1(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOlq3(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOlu(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOqd1(self, mif1,mif2,mif3,mif4):
        return -1/576 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif4] * self.ydbar[mif2,mif3]

    def alphaOqd8(self, mif1,mif2,mif3,mif4):
        return -1/96 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif4] * self.ydbar[mif2,mif3]

    def alphaOqe(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOqq1(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOqq3(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOqu1(self, mif1,mif2,mif3,mif4):
        return -1/576 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif4] * self.yubar[mif2,mif3]

    def alphaOqu8(self, mif1,mif2,mif3,mif4):
        return -1/96 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif4] * self.yubar[mif2,mif3]

    def alphaOquqd1(self, mif1,mif2,mif3,mif4):
        return 1/96 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif3,mif4] * self.yu[mif1,mif2]

    def alphaOquqd8(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOuB(self, mif1,mif2):
        return 0

    def alphaOud1(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOud8(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOuG(self, mif1,mif2):
        return 0

    def alphaOuH(self, mif1,mif2):
        return (-29/192 * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -1/32 * self.invepsilonbar * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 3/32 * (self.kappaS)**(3) * self.kappaS3 * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -31/576 * (self.g2)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -5/96 * (self.g2)**(2) * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 29/96 * (self.kappaS)**(2) * self.lam * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 1/16 * self.invepsilonbar * (self.kappaS)**(2) * self.lam * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 3/32 * (self.kappaS)**(2) * self.lambdaS * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 1/32 * (self.kappaS)**(4) * (self.MS)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 5/96 * (self.g2)**(2) * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + -1/16 * (self.kappaS)**(2) * self.lam * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 5/64 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 3/32 * self.invepsilonbar * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + -3/32 * (self.kappaS)**(2) * (self.MS)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS)**(2) * (self.mu)**(-2)) * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2])

    def alphaOuu(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOuW(self, mif1,mif2):
        return 0
