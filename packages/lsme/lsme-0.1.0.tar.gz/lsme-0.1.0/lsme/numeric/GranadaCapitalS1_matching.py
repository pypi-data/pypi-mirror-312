## Symbols used:
# ydbar
# yd
# yS1
# yl
# ylbar
# MS1
# muH
# g1
# g2
# epsilonbar
# invepsilonbar
# lambdaHatS1
# yS1bar
# mu
# lam
# yubar
# onelooporder
# yu

import sys
import os
import numpy as np

import lsme.numeric.matchingresult as matchingresult

class GranadaS1MatchingResult(matchingresult.GenericMatchingResult):
    def __init__(self, name='S1'):
        super().__init__(name)
        self.MS1 = 1
        self.yS1 = np.ones((3, 3))
        self.yS1bar = np.ones((3, 3))
        self.lambdaHatS1 = 1
        self.lambdaHatS1bar = 1
        self.nonvanishing = ['alphaOH', 'alphaOHB', 'alphaOHBox', 'alphaOHD', 'alphaOdd', 'alphaOeB', 'alphaOed', 'alphaOee', 'alphaOeH', 'alphaOeu', 'alphaOeW', 'alphaOHd', 'alphaOHe', 'alphaOHl1', 'alphaOHl3', 'alphaOHq1', 'alphaOHu', 'alphaOld', 'alphaOle', 'alphaOll', 'alphaOlq1', 'alphaOlq3', 'alphaOlu', 'alphaOqd1', 'alphaOqe', 'alphaOqq1', 'alphaOqu1', 'alphaOud1', 'alphaOuu']

    def alphaO3G(self, ):
        return 0

    def alphaO3Gt(self, ):
        return 0

    def alphaO3W(self, ):
        return 0

    def alphaO3Wt(self, ):
        return 0

    def alphaOH(self, ):
        return 1/96 * (self.lambdaHatS1)**(3) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaOHB(self, ):
        return -1/192 * (self.g1)**(2) * self.lambdaHatS1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaOHBox(self, ):
        return (-1/3840 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) + -1/192 * (self.lambdaHatS1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2))

    def alphaOHBt(self, ):
        return 0

    def alphaOHD(self, ):
        return -1/960 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaOHG(self, ):
        return 0

    def alphaOHGt(self, ):
        return 0

    def alphaOHW(self, ):
        return 0

    def alphaOHWB(self, ):
        return 0

    def alphaOHWBt(self, ):
        return 0

    def alphaOHWt(self, ):
        return 0

    def alphaWeinberg(self, mif1,mif2):
        return 0

    def alphaOdB(self, mif1,mif2):
        return 0

    def alphaOdd(self, mif1,mif2,mif3,mif4):
        return -1/8640 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOdG(self, mif1,mif2):
        return 0

    def alphaOdH(self, mif1,mif2):
        return 0

    def alphaOdW(self, mif1,mif2):
        return 0

    def alphaOeB(self, mif1,mif2):
        return (1/48 * self.g1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yS1[0,mif1] * self.yS1bar[0,0] + 1/48 * self.g1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yS1[0,mif1] * self.yS1bar[0,1] + 1/48 * self.g1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yS1[0,mif1] * self.yS1bar[0,2] + 1/48 * self.g1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yS1[1,mif1] * self.yS1bar[1,0] + 1/48 * self.g1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yS1[1,mif1] * self.yS1bar[1,1] + 1/48 * self.g1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yS1[1,mif1] * self.yS1bar[1,2] + 1/48 * self.g1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yS1[2,mif1] * self.yS1bar[2,0] + 1/48 * self.g1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yS1[2,mif1] * self.yS1bar[2,1] + 1/48 * self.g1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yS1[2,mif1] * self.yS1bar[2,2])

    def alphaOed(self, mif1,mif2,mif3,mif4):
        return -1/1440 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOee(self, mif1,mif2,mif3,mif4):
        return -1/960 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOeH(self, mif1,mif2):
        return (1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yS1[0,0] * self.yS1bar[0,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yS1[0,0] * self.yS1bar[0,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yS1[0,0] * self.yS1bar[0,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yS1[0,1] * self.yS1bar[0,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yS1[0,1] * self.yS1bar[0,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yS1[0,1] * self.yS1bar[0,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yS1[0,2] * self.yS1bar[0,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yS1[0,2] * self.yS1bar[0,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yS1[0,2] * self.yS1bar[0,0] + 1/16 * self.lambdaHatS1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yS1[0,mif1] * self.yS1bar[0,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yS1[0,0] * self.yS1bar[0,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yS1[0,0] * self.yS1bar[0,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yS1[0,0] * self.yS1bar[0,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yS1[0,1] * self.yS1bar[0,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yS1[0,1] * self.yS1bar[0,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yS1[0,1] * self.yS1bar[0,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yS1[0,2] * self.yS1bar[0,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yS1[0,2] * self.yS1bar[0,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yS1[0,2] * self.yS1bar[0,1] + 1/16 * self.lambdaHatS1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yS1[0,mif1] * self.yS1bar[0,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yS1[0,0] * self.yS1bar[0,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yS1[0,0] * self.yS1bar[0,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yS1[0,0] * self.yS1bar[0,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yS1[0,1] * self.yS1bar[0,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yS1[0,1] * self.yS1bar[0,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yS1[0,1] * self.yS1bar[0,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yS1[0,2] * self.yS1bar[0,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yS1[0,2] * self.yS1bar[0,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yS1[0,2] * self.yS1bar[0,2] + 1/16 * self.lambdaHatS1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yS1[0,mif1] * self.yS1bar[0,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yS1[1,0] * self.yS1bar[1,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yS1[1,0] * self.yS1bar[1,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yS1[1,0] * self.yS1bar[1,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yS1[1,1] * self.yS1bar[1,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yS1[1,1] * self.yS1bar[1,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yS1[1,1] * self.yS1bar[1,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yS1[1,2] * self.yS1bar[1,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yS1[1,2] * self.yS1bar[1,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yS1[1,2] * self.yS1bar[1,0] + 1/16 * self.lambdaHatS1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yS1[1,mif1] * self.yS1bar[1,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yS1[1,0] * self.yS1bar[1,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yS1[1,0] * self.yS1bar[1,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yS1[1,0] * self.yS1bar[1,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yS1[1,1] * self.yS1bar[1,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yS1[1,1] * self.yS1bar[1,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yS1[1,1] * self.yS1bar[1,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yS1[1,2] * self.yS1bar[1,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yS1[1,2] * self.yS1bar[1,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yS1[1,2] * self.yS1bar[1,1] + 1/16 * self.lambdaHatS1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yS1[1,mif1] * self.yS1bar[1,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yS1[1,0] * self.yS1bar[1,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yS1[1,0] * self.yS1bar[1,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yS1[1,0] * self.yS1bar[1,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yS1[1,1] * self.yS1bar[1,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yS1[1,1] * self.yS1bar[1,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yS1[1,1] * self.yS1bar[1,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yS1[1,2] * self.yS1bar[1,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yS1[1,2] * self.yS1bar[1,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yS1[1,2] * self.yS1bar[1,2] + 1/16 * self.lambdaHatS1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yS1[1,mif1] * self.yS1bar[1,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yS1[2,0] * self.yS1bar[2,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yS1[2,0] * self.yS1bar[2,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yS1[2,0] * self.yS1bar[2,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yS1[2,1] * self.yS1bar[2,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yS1[2,1] * self.yS1bar[2,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yS1[2,1] * self.yS1bar[2,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yS1[2,2] * self.yS1bar[2,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yS1[2,2] * self.yS1bar[2,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yS1[2,2] * self.yS1bar[2,0] + 1/16 * self.lambdaHatS1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yS1[2,mif1] * self.yS1bar[2,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yS1[2,0] * self.yS1bar[2,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yS1[2,0] * self.yS1bar[2,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yS1[2,0] * self.yS1bar[2,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yS1[2,1] * self.yS1bar[2,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yS1[2,1] * self.yS1bar[2,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yS1[2,1] * self.yS1bar[2,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yS1[2,2] * self.yS1bar[2,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yS1[2,2] * self.yS1bar[2,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yS1[2,2] * self.yS1bar[2,1] + 1/16 * self.lambdaHatS1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yS1[2,mif1] * self.yS1bar[2,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yS1[2,0] * self.yS1bar[2,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yS1[2,0] * self.yS1bar[2,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yS1[2,0] * self.yS1bar[2,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yS1[2,1] * self.yS1bar[2,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yS1[2,1] * self.yS1bar[2,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yS1[2,1] * self.yS1bar[2,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yS1[2,2] * self.yS1bar[2,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yS1[2,2] * self.yS1bar[2,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yS1[2,2] * self.yS1bar[2,2] + 1/16 * self.lambdaHatS1 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yS1[2,mif1] * self.yS1bar[2,2])

    def alphaOeu(self, mif1,mif2,mif3,mif4):
        return 1/720 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOeW(self, mif1,mif2):
        return (1/96 * self.g2 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yS1[0,mif1] * self.yS1bar[0,0] + 1/96 * self.g2 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yS1[0,mif1] * self.yS1bar[0,1] + 1/96 * self.g2 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yS1[0,mif1] * self.yS1bar[0,2] + 1/96 * self.g2 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yS1[1,mif1] * self.yS1bar[1,0] + 1/96 * self.g2 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yS1[1,mif1] * self.yS1bar[1,1] + 1/96 * self.g2 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yS1[1,mif1] * self.yS1bar[1,2] + 1/96 * self.g2 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yS1[2,mif1] * self.yS1bar[2,0] + 1/96 * self.g2 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yS1[2,mif1] * self.yS1bar[2,1] + 1/96 * self.g2 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yS1[2,mif1] * self.yS1bar[2,2])

    def alphaOHd(self, mif1,mif2):
        return 1/2880 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2)

    def alphaOHe(self, mif1,mif2):
        return (1/960 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[0,mif1] * self.yS1[0,0] * self.yS1bar[0,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[1,mif1] * self.yS1[0,1] * self.yS1bar[0,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[2,mif1] * self.yS1[0,2] * self.yS1bar[0,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[0,mif1] * self.yS1[0,0] * self.yS1bar[0,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[1,mif1] * self.yS1[0,1] * self.yS1bar[0,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[2,mif1] * self.yS1[0,2] * self.yS1bar[0,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[0,mif1] * self.yS1[0,0] * self.yS1bar[0,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[1,mif1] * self.yS1[0,1] * self.yS1bar[0,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[2,mif1] * self.yS1[0,2] * self.yS1bar[0,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[0,mif1] * self.yS1[1,0] * self.yS1bar[1,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[1,mif1] * self.yS1[1,1] * self.yS1bar[1,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[2,mif1] * self.yS1[1,2] * self.yS1bar[1,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[0,mif1] * self.yS1[1,0] * self.yS1bar[1,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[1,mif1] * self.yS1[1,1] * self.yS1bar[1,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[2,mif1] * self.yS1[1,2] * self.yS1bar[1,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[0,mif1] * self.yS1[1,0] * self.yS1bar[1,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[1,mif1] * self.yS1[1,1] * self.yS1bar[1,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[2,mif1] * self.yS1[1,2] * self.yS1bar[1,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[0,mif1] * self.yS1[2,0] * self.yS1bar[2,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[1,mif1] * self.yS1[2,1] * self.yS1bar[2,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[2,mif1] * self.yS1[2,2] * self.yS1bar[2,0] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[0,mif1] * self.yS1[2,0] * self.yS1bar[2,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[1,mif1] * self.yS1[2,1] * self.yS1bar[2,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[2,mif1] * self.yS1[2,2] * self.yS1bar[2,1] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[0,mif1] * self.yS1[2,0] * self.yS1bar[2,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[1,mif1] * self.yS1[2,1] * self.yS1bar[2,2] + 1/48 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[2,mif1] * self.yS1[2,2] * self.yS1bar[2,2])

    def alphaOHl1(self, mif1,mif2):
        return (1/1920 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -5/144 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/48 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + -5/144 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/48 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + -5/144 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/48 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/48 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[mif1,0] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[0,0] * self.yS1[mif1,0] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[0,1] * self.yS1[mif1,0] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[0,2] * self.yS1[mif1,0] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[1,0] * self.yS1[mif1,1] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[1,1] * self.yS1[mif1,1] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[1,2] * self.yS1[mif1,1] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[2,0] * self.yS1[mif1,2] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[2,1] * self.yS1[mif1,2] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[2,2] * self.yS1[mif1,2] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[0,0] * self.yS1[mif1,0] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[0,1] * self.yS1[mif1,0] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[0,2] * self.yS1[mif1,0] * self.yS1bar[mif2,1] + -1/48 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[mif1,1] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[1,0] * self.yS1[mif1,1] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[1,1] * self.yS1[mif1,1] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[1,2] * self.yS1[mif1,1] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[2,0] * self.yS1[mif1,2] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[2,1] * self.yS1[mif1,2] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[2,2] * self.yS1[mif1,2] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[0,0] * self.yS1[mif1,0] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[0,1] * self.yS1[mif1,0] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[0,2] * self.yS1[mif1,0] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[1,0] * self.yS1[mif1,1] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[1,1] * self.yS1[mif1,1] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[1,2] * self.yS1[mif1,1] * self.yS1bar[mif2,2] + -1/48 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[mif1,2] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[2,0] * self.yS1[mif1,2] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[2,1] * self.yS1[mif1,2] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[2,2] * self.yS1[mif1,2] * self.yS1bar[mif2,2])

    def alphaOHl3(self, mif1,mif2):
        return (-1/36 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + -1/36 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[0,0] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[0,1] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[0,2] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[1,0] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[1,1] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[1,2] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + -1/36 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[2,0] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[2,1] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[2,2] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[mif1,0] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[0,0] * self.yS1[mif1,0] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[0,1] * self.yS1[mif1,0] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[0,2] * self.yS1[mif1,0] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[1,0] * self.yS1[mif1,1] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[1,1] * self.yS1[mif1,1] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[1,2] * self.yS1[mif1,1] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[2,0] * self.yS1[mif1,2] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[2,1] * self.yS1[mif1,2] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[2,2] * self.yS1[mif1,2] * self.yS1bar[mif2,0] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[0,0] * self.yS1[mif1,0] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[0,1] * self.yS1[mif1,0] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[0,2] * self.yS1[mif1,0] * self.yS1bar[mif2,1] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[mif1,1] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[1,0] * self.yS1[mif1,1] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[1,1] * self.yS1[mif1,1] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[1,2] * self.yS1[mif1,1] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[2,0] * self.yS1[mif1,2] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[2,1] * self.yS1[mif1,2] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[2,2] * self.yS1[mif1,2] * self.yS1bar[mif2,1] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[0,0] * self.yS1[mif1,0] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[0,1] * self.yS1[mif1,0] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[0,2] * self.yS1[mif1,0] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[1,0] * self.yS1[mif1,1] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[1,1] * self.yS1[mif1,1] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[1,2] * self.yS1[mif1,1] * self.yS1bar[mif2,2] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[mif1,2] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[2,0] * self.yS1[mif1,2] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[2,1] * self.yS1[mif1,2] * self.yS1bar[mif2,2] + -1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[2,2] * self.yS1[mif1,2] * self.yS1bar[mif2,2])

    def alphaOHq1(self, mif1,mif2):
        return -1/5760 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2)

    def alphaOHq3(self, mif1,mif2):
        return 0

    def alphaOHu(self, mif1,mif2):
        return -1/1440 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2)

    def alphaOHud(self, mif1,mif2):
        return 0

    def alphaOld(self, mif1,mif2,mif3,mif4):
        return (-1/2880 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 5/216 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/72 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 5/216 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/72 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 5/216 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/72 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/72 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,0] * self.yS1bar[mif2,0] + 1/72 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,1] * self.yS1bar[mif2,1] + 1/72 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,2] * self.yS1bar[mif2,2])

    def alphaOle(self, mif1,mif2,mif3,mif4):
        return (-1/960 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 5/72 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/24 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/24 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -3/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[0,mif3] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[0,mif3] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,mif4] * self.ylbar[0,mif3] * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -3/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[1,mif3] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[1,mif3] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,mif4] * self.ylbar[1,mif3] * self.yS1[1,mif1] * self.yS1bar[0,mif2] + -3/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[2,mif3] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[2,mif3] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[0,mif4] * self.ylbar[2,mif3] * self.yS1[2,mif1] * self.yS1bar[0,mif2] + -3/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[0,mif3] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[0,mif3] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,mif4] * self.ylbar[0,mif3] * self.yS1[0,mif1] * self.yS1bar[1,mif2] + 5/72 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/24 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/24 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -3/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[1,mif3] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[1,mif3] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,mif4] * self.ylbar[1,mif3] * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -3/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[2,mif3] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[2,mif3] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[1,mif4] * self.ylbar[2,mif3] * self.yS1[2,mif1] * self.yS1bar[1,mif2] + -3/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[0,mif3] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[0,mif3] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,mif4] * self.ylbar[0,mif3] * self.yS1[0,mif1] * self.yS1bar[2,mif2] + -3/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[1,mif3] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[1,mif3] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,mif4] * self.ylbar[1,mif3] * self.yS1[1,mif1] * self.yS1bar[2,mif2] + 5/72 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/24 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/24 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -3/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[2,mif3] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[2,mif3] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/16 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yl[2,mif4] * self.ylbar[2,mif3] * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[0,mif3] * self.yS1[0,mif1] * self.yS1bar[mif2,0] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[1,mif3] * self.yS1[1,mif1] * self.yS1bar[mif2,0] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[2,mif3] * self.yS1[2,mif1] * self.yS1bar[mif2,0] + 1/24 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,0] * self.yS1bar[mif2,0] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[0,mif3] * self.yS1[mif1,0] * self.yS1bar[mif2,0] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[1,mif3] * self.yS1[mif1,1] * self.yS1bar[mif2,0] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[2,mif3] * self.yS1[mif1,2] * self.yS1bar[mif2,0] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[0,mif3] * self.yS1[0,mif1] * self.yS1bar[mif2,1] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[1,mif3] * self.yS1[1,mif1] * self.yS1bar[mif2,1] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[2,mif3] * self.yS1[2,mif1] * self.yS1bar[mif2,1] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[0,mif3] * self.yS1[mif1,0] * self.yS1bar[mif2,1] + 1/24 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,1] * self.yS1bar[mif2,1] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[1,mif3] * self.yS1[mif1,1] * self.yS1bar[mif2,1] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[2,mif3] * self.yS1[mif1,2] * self.yS1bar[mif2,1] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[0,mif3] * self.yS1[0,mif1] * self.yS1bar[mif2,2] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[1,mif3] * self.yS1[1,mif1] * self.yS1bar[mif2,2] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[2,mif3] * self.yS1[2,mif1] * self.yS1bar[mif2,2] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[0,mif3] * self.yS1[mif1,0] * self.yS1bar[mif2,2] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[1,mif3] * self.yS1[mif1,1] * self.yS1bar[mif2,2] + 1/24 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,2] * self.yS1bar[mif2,2] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[2,mif3] * self.yS1[mif1,2] * self.yS1bar[mif2,2])

    def alphaOledq(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOlequ1(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOlequ3(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOll(self, mif1,mif2,mif3,mif4):
        return (-1/3840 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 5/288 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/72 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/96 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/96 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/96 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/36 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yS1[0,mif3] * self.yS1bar[0,mif2] + -1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yS1[0,mif3] * self.yS1bar[0,mif2] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif3] * self.yS1bar[0,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,0] * self.yS1bar[0,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,0] * self.yS1bar[0,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,0] * self.yS1bar[0,mif2] + -1/36 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yS1[0,mif1] * self.yS1bar[0,mif4] + -1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yS1[0,mif1] * self.yS1bar[0,mif4] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1bar[0,mif4] + 5/288 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[0,mif3] * self.yS1bar[0,mif4] + 1/72 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[0,mif3] * self.yS1bar[0,mif4] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[0,mif3] * self.yS1bar[0,mif4] + 1/96 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[0,mif3] * self.yS1bar[0,mif4] + -1/96 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif3] * self.yS1bar[0,mif4] + -1/96 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif3] * self.yS1bar[0,mif4] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[0,mif3] * self.yS1bar[0,mif2] * self.yS1bar[0,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,0] * self.yS1[mif3,mif1] * self.yS1bar[0,mif2] * self.yS1bar[0,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,0] * self.yS1[mif3,mif1] * self.yS1bar[0,mif2] * self.yS1bar[0,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,0] * self.yS1[mif3,mif1] * self.yS1bar[0,mif2] * self.yS1bar[0,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[1,0] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[1,0] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[1,0] + 5/288 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/72 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/96 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/96 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/96 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/36 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yS1[1,mif3] * self.yS1bar[1,mif2] + -1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yS1[1,mif3] * self.yS1bar[1,mif2] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif3] * self.yS1bar[1,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,1] * self.yS1bar[1,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,1] * self.yS1bar[1,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,1] * self.yS1bar[1,mif2] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif3] * self.yS1[1,mif1] * self.yS1bar[0,mif4] * self.yS1bar[1,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,0] * self.yS1[mif3,mif1] * self.yS1bar[0,mif4] * self.yS1bar[1,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,0] * self.yS1[mif3,mif1] * self.yS1bar[0,mif4] * self.yS1bar[1,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,0] * self.yS1[mif3,mif1] * self.yS1bar[0,mif4] * self.yS1bar[1,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif4] * self.yS1[mif1,mif3] * self.yS1bar[1,1] * self.yS1bar[1,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif4] * self.yS1[mif1,mif3] * self.yS1bar[1,1] * self.yS1bar[1,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif4] * self.yS1[mif1,mif3] * self.yS1bar[1,1] * self.yS1bar[1,mif2] + -1/36 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yS1[1,mif1] * self.yS1bar[1,mif4] + -1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yS1[1,mif1] * self.yS1bar[1,mif4] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1bar[1,mif4] + 5/288 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[1,mif3] * self.yS1bar[1,mif4] + 1/72 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[1,mif3] * self.yS1bar[1,mif4] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[1,mif3] * self.yS1bar[1,mif4] + 1/96 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[1,mif3] * self.yS1bar[1,mif4] + -1/96 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif3] * self.yS1bar[1,mif4] + -1/96 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif3] * self.yS1bar[1,mif4] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[1,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,1] * self.yS1[mif3,mif1] * self.yS1bar[0,mif2] * self.yS1bar[1,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,1] * self.yS1[mif3,mif1] * self.yS1bar[0,mif2] * self.yS1bar[1,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,1] * self.yS1[mif3,mif1] * self.yS1bar[0,mif2] * self.yS1bar[1,mif4] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1[1,mif3] * self.yS1bar[1,mif2] * self.yS1bar[1,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,1] * self.yS1[mif3,mif1] * self.yS1bar[1,mif2] * self.yS1bar[1,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,1] * self.yS1[mif3,mif1] * self.yS1bar[1,mif2] * self.yS1bar[1,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,1] * self.yS1[mif3,mif1] * self.yS1bar[1,mif2] * self.yS1bar[1,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[2,0] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[2,0] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[2,0] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif4] * self.yS1[mif1,mif3] * self.yS1bar[1,mif2] * self.yS1bar[2,1] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif4] * self.yS1[mif1,mif3] * self.yS1bar[1,mif2] * self.yS1bar[2,1] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif4] * self.yS1[mif1,mif3] * self.yS1bar[1,mif2] * self.yS1bar[2,1] + 5/288 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/72 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/96 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/96 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/96 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/36 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yS1[2,mif3] * self.yS1bar[2,mif2] + -1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yS1[2,mif3] * self.yS1bar[2,mif2] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif3] * self.yS1bar[2,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,2] * self.yS1bar[2,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,2] * self.yS1bar[2,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif4] * self.yS1[mif1,mif3] * self.yS1bar[0,2] * self.yS1bar[2,mif2] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif3] * self.yS1[2,mif1] * self.yS1bar[0,mif4] * self.yS1bar[2,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,0] * self.yS1[mif3,mif1] * self.yS1bar[0,mif4] * self.yS1bar[2,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,0] * self.yS1[mif3,mif1] * self.yS1bar[0,mif4] * self.yS1bar[2,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,0] * self.yS1[mif3,mif1] * self.yS1bar[0,mif4] * self.yS1bar[2,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif4] * self.yS1[mif1,mif3] * self.yS1bar[1,2] * self.yS1bar[2,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif4] * self.yS1[mif1,mif3] * self.yS1bar[1,2] * self.yS1bar[2,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif4] * self.yS1[mif1,mif3] * self.yS1bar[1,2] * self.yS1bar[2,mif2] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif3] * self.yS1[2,mif1] * self.yS1bar[1,mif4] * self.yS1bar[2,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,1] * self.yS1[mif3,mif1] * self.yS1bar[1,mif4] * self.yS1bar[2,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,1] * self.yS1[mif3,mif1] * self.yS1bar[1,mif4] * self.yS1bar[2,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,1] * self.yS1[mif3,mif1] * self.yS1bar[1,mif4] * self.yS1bar[2,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif4] * self.yS1[mif1,mif3] * self.yS1bar[2,2] * self.yS1bar[2,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif4] * self.yS1[mif1,mif3] * self.yS1bar[2,2] * self.yS1bar[2,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif4] * self.yS1[mif1,mif3] * self.yS1bar[2,2] * self.yS1bar[2,mif2] + -1/36 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yS1[2,mif1] * self.yS1bar[2,mif4] + -1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yS1[2,mif1] * self.yS1bar[2,mif4] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif1] * self.yS1bar[2,mif4] + 5/288 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[2,mif3] * self.yS1bar[2,mif4] + 1/72 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[2,mif3] * self.yS1bar[2,mif4] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[2,mif3] * self.yS1bar[2,mif4] + 1/96 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[2,mif3] * self.yS1bar[2,mif4] + -1/96 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif3] * self.yS1bar[2,mif4] + -1/96 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif3] * self.yS1bar[2,mif4] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[2,mif3] * self.yS1bar[0,mif2] * self.yS1bar[2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,2] * self.yS1[mif3,mif1] * self.yS1bar[0,mif2] * self.yS1bar[2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,2] * self.yS1[mif3,mif1] * self.yS1bar[0,mif2] * self.yS1bar[2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,2] * self.yS1[mif3,mif1] * self.yS1bar[0,mif2] * self.yS1bar[2,mif4] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1[2,mif3] * self.yS1bar[1,mif2] * self.yS1bar[2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,2] * self.yS1[mif3,mif1] * self.yS1bar[1,mif2] * self.yS1bar[2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,2] * self.yS1[mif3,mif1] * self.yS1bar[1,mif2] * self.yS1bar[2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,2] * self.yS1[mif3,mif1] * self.yS1bar[1,mif2] * self.yS1bar[2,mif4] + -1/8 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif1] * self.yS1[2,mif3] * self.yS1bar[2,mif2] * self.yS1bar[2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,2] * self.yS1[mif3,mif1] * self.yS1bar[2,mif2] * self.yS1bar[2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,2] * self.yS1[mif3,mif1] * self.yS1bar[2,mif2] * self.yS1bar[2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,2] * self.yS1[mif3,mif1] * self.yS1bar[2,mif2] * self.yS1bar[2,mif4] + 1/24 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yS1[mif3,0] * self.yS1bar[mif2,0] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif4] * self.yS1[mif3,mif1] * self.yS1bar[0,0] * self.yS1bar[mif2,0] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif4] * self.yS1[mif3,mif1] * self.yS1bar[0,0] * self.yS1bar[mif2,0] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif4] * self.yS1[mif3,mif1] * self.yS1bar[0,0] * self.yS1bar[mif2,0] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif4] * self.yS1[mif3,mif1] * self.yS1bar[1,0] * self.yS1bar[mif2,0] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif4] * self.yS1[mif3,mif1] * self.yS1bar[1,0] * self.yS1bar[mif2,0] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif4] * self.yS1[mif3,mif1] * self.yS1bar[1,0] * self.yS1bar[mif2,0] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif4] * self.yS1[mif3,mif1] * self.yS1bar[2,0] * self.yS1bar[mif2,0] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif4] * self.yS1[mif3,mif1] * self.yS1bar[2,0] * self.yS1bar[mif2,0] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif4] * self.yS1[mif3,mif1] * self.yS1bar[2,0] * self.yS1bar[mif2,0] + 1/24 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yS1[mif3,1] * self.yS1bar[mif2,1] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif4] * self.yS1[mif3,mif1] * self.yS1bar[0,1] * self.yS1bar[mif2,1] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif4] * self.yS1[mif3,mif1] * self.yS1bar[0,1] * self.yS1bar[mif2,1] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif4] * self.yS1[mif3,mif1] * self.yS1bar[0,1] * self.yS1bar[mif2,1] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif4] * self.yS1[mif3,mif1] * self.yS1bar[1,1] * self.yS1bar[mif2,1] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif4] * self.yS1[mif3,mif1] * self.yS1bar[1,1] * self.yS1bar[mif2,1] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif4] * self.yS1[mif3,mif1] * self.yS1bar[1,1] * self.yS1bar[mif2,1] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif4] * self.yS1[mif3,mif1] * self.yS1bar[2,1] * self.yS1bar[mif2,1] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif4] * self.yS1[mif3,mif1] * self.yS1bar[2,1] * self.yS1bar[mif2,1] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif4] * self.yS1[mif3,mif1] * self.yS1bar[2,1] * self.yS1bar[mif2,1] + 1/24 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yS1[mif3,2] * self.yS1bar[mif2,2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif4] * self.yS1[mif3,mif1] * self.yS1bar[0,2] * self.yS1bar[mif2,2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif4] * self.yS1[mif3,mif1] * self.yS1bar[0,2] * self.yS1bar[mif2,2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif4] * self.yS1[mif3,mif1] * self.yS1bar[0,2] * self.yS1bar[mif2,2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif4] * self.yS1[mif3,mif1] * self.yS1bar[1,2] * self.yS1bar[mif2,2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif4] * self.yS1[mif3,mif1] * self.yS1bar[1,2] * self.yS1bar[mif2,2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif4] * self.yS1[mif3,mif1] * self.yS1bar[1,2] * self.yS1bar[mif2,2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif4] * self.yS1[mif3,mif1] * self.yS1bar[2,2] * self.yS1bar[mif2,2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif4] * self.yS1[mif3,mif1] * self.yS1bar[2,2] * self.yS1bar[mif2,2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif4] * self.yS1[mif3,mif1] * self.yS1bar[2,2] * self.yS1bar[mif2,2] + -1/2 * (self.MS1)**(-2) * self.yS1[mif3,mif1] * self.yS1bar[mif2,mif4] + -1/64 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[mif3,mif1] * self.yS1bar[mif2,mif4] + -3/64 * self.epsilonbar * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[mif3,mif1] * self.yS1bar[mif2,mif4] + -1/32 * self.epsilonbar * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[mif3,mif1] * self.yS1bar[mif2,mif4] + 1/32 * self.epsilonbar * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[mif3,mif1] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[mif3,0] * self.yS1bar[0,0] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[mif3,0] * self.yS1bar[0,0] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1[mif3,0] * self.yS1bar[0,0] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[mif3,1] * self.yS1bar[0,1] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[mif3,1] * self.yS1bar[0,1] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1[mif3,1] * self.yS1bar[0,1] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[mif3,2] * self.yS1bar[0,2] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[mif3,2] * self.yS1bar[0,2] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1[mif3,2] * self.yS1bar[0,2] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,0] * self.yS1[0,mif1] * self.yS1bar[0,mif3] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,0] * self.yS1[0,mif1] * self.yS1bar[0,mif3] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,0] * self.yS1[0,mif1] * self.yS1bar[0,mif3] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,1] * self.yS1[1,mif1] * self.yS1bar[0,mif3] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,1] * self.yS1[1,mif1] * self.yS1bar[0,mif3] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,1] * self.yS1[1,mif1] * self.yS1bar[0,mif3] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,2] * self.yS1[2,mif1] * self.yS1bar[0,mif3] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,2] * self.yS1[2,mif1] * self.yS1bar[0,mif3] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,2] * self.yS1[2,mif1] * self.yS1bar[0,mif3] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1[mif3,0] * self.yS1bar[1,0] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1[mif3,0] * self.yS1bar[1,0] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1[mif3,0] * self.yS1bar[1,0] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1[mif3,1] * self.yS1bar[1,1] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1[mif3,1] * self.yS1bar[1,1] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1[mif3,1] * self.yS1bar[1,1] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1[mif3,2] * self.yS1bar[1,2] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1[mif3,2] * self.yS1bar[1,2] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1[mif3,2] * self.yS1bar[1,2] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[1,0] * self.yS1bar[1,mif3] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[1,0] * self.yS1bar[1,mif3] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1[1,0] * self.yS1bar[1,mif3] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,1] * self.yS1[1,mif1] * self.yS1bar[1,mif3] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,1] * self.yS1[1,mif1] * self.yS1bar[1,mif3] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,1] * self.yS1[1,mif1] * self.yS1bar[1,mif3] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,2] * self.yS1[2,mif1] * self.yS1bar[1,mif3] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,2] * self.yS1[2,mif1] * self.yS1bar[1,mif3] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,2] * self.yS1[2,mif1] * self.yS1bar[1,mif3] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif1] * self.yS1[mif3,0] * self.yS1bar[2,0] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif1] * self.yS1[mif3,0] * self.yS1bar[2,0] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif1] * self.yS1[mif3,0] * self.yS1bar[2,0] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif1] * self.yS1[mif3,1] * self.yS1bar[2,1] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif1] * self.yS1[mif3,1] * self.yS1bar[2,1] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif1] * self.yS1[mif3,1] * self.yS1bar[2,1] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif1] * self.yS1[mif3,2] * self.yS1bar[2,2] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif1] * self.yS1[mif3,2] * self.yS1bar[2,2] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif1] * self.yS1[mif3,2] * self.yS1bar[2,2] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[2,0] * self.yS1bar[2,mif3] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[2,0] * self.yS1bar[2,mif3] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1[2,0] * self.yS1bar[2,mif3] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1[2,1] * self.yS1bar[2,mif3] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1[2,1] * self.yS1bar[2,mif3] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1[2,1] * self.yS1bar[2,mif3] * self.yS1bar[mif2,mif4] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,2] * self.yS1[2,mif1] * self.yS1bar[2,mif3] * self.yS1bar[mif2,mif4] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,2] * self.yS1[2,mif1] * self.yS1bar[2,mif3] * self.yS1bar[mif2,mif4] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,2] * self.yS1[2,mif1] * self.yS1bar[2,mif3] * self.yS1bar[mif2,mif4] + 1/48 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[mif3,0] * self.yS1bar[mif4,0] + -1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[mif3,0] * self.yS1bar[mif4,0] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,0] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[mif4,0] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,0] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[mif4,0] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,0] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[mif4,0] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,0] * self.yS1[mif1,mif3] * self.yS1bar[1,mif2] * self.yS1bar[mif4,0] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,0] * self.yS1[mif1,mif3] * self.yS1bar[1,mif2] * self.yS1bar[mif4,0] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,0] * self.yS1[mif1,mif3] * self.yS1bar[1,mif2] * self.yS1bar[mif4,0] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,0] * self.yS1[mif1,mif3] * self.yS1bar[2,mif2] * self.yS1bar[mif4,0] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,0] * self.yS1[mif1,mif3] * self.yS1bar[2,mif2] * self.yS1bar[mif4,0] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,0] * self.yS1[mif1,mif3] * self.yS1bar[2,mif2] * self.yS1bar[mif4,0] + 1/48 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[mif3,1] * self.yS1bar[mif4,1] + -1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[mif3,1] * self.yS1bar[mif4,1] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,1] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[mif4,1] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,1] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[mif4,1] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,1] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[mif4,1] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,1] * self.yS1[mif1,mif3] * self.yS1bar[1,mif2] * self.yS1bar[mif4,1] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,1] * self.yS1[mif1,mif3] * self.yS1bar[1,mif2] * self.yS1bar[mif4,1] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,1] * self.yS1[mif1,mif3] * self.yS1bar[1,mif2] * self.yS1bar[mif4,1] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,1] * self.yS1[mif1,mif3] * self.yS1bar[2,mif2] * self.yS1bar[mif4,1] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,1] * self.yS1[mif1,mif3] * self.yS1bar[2,mif2] * self.yS1bar[mif4,1] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,1] * self.yS1[mif1,mif3] * self.yS1bar[2,mif2] * self.yS1bar[mif4,1] + 1/48 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[mif3,2] * self.yS1bar[mif4,2] + -1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yS1[mif3,2] * self.yS1bar[mif4,2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,2] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[mif4,2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,2] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[mif4,2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,2] * self.yS1[mif1,mif3] * self.yS1bar[0,mif2] * self.yS1bar[mif4,2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,2] * self.yS1[mif1,mif3] * self.yS1bar[1,mif2] * self.yS1bar[mif4,2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,2] * self.yS1[mif1,mif3] * self.yS1bar[1,mif2] * self.yS1bar[mif4,2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,2] * self.yS1[mif1,mif3] * self.yS1bar[1,mif2] * self.yS1bar[mif4,2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,2] * self.yS1[mif1,mif3] * self.yS1bar[2,mif2] * self.yS1bar[mif4,2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,2] * self.yS1[mif1,mif3] * self.yS1bar[2,mif2] * self.yS1bar[mif4,2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,2] * self.yS1[mif1,mif3] * self.yS1bar[2,mif2] * self.yS1bar[mif4,2] + -1/2 * (self.MS1)**(-2) * self.yS1[mif1,mif3] * self.yS1bar[mif4,mif2] + -3/32 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[mif1,mif3] * self.yS1bar[mif4,mif2] + 5/64 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[mif1,mif3] * self.yS1bar[mif4,mif2] + -3/64 * self.epsilonbar * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[mif1,mif3] * self.yS1bar[mif4,mif2] + -1/32 * self.epsilonbar * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[mif1,mif3] * self.yS1bar[mif4,mif2] + 1/32 * self.epsilonbar * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[mif1,mif3] * self.yS1bar[mif4,mif2] + -3/16 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[mif3,mif1] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[0,mif3] * self.yS1bar[0,0] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[0,mif3] * self.yS1bar[0,0] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1[0,mif3] * self.yS1bar[0,0] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[1,mif3] * self.yS1bar[0,1] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[1,mif3] * self.yS1bar[0,1] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1[1,mif3] * self.yS1bar[0,1] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[2,mif3] * self.yS1bar[0,2] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif1] * self.yS1[2,mif3] * self.yS1bar[0,2] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1[2,mif3] * self.yS1bar[0,2] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,0] * self.yS1[mif1,0] * self.yS1bar[0,mif3] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,0] * self.yS1[mif1,0] * self.yS1bar[0,mif3] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,0] * self.yS1[mif1,0] * self.yS1bar[0,mif3] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,1] * self.yS1[mif1,1] * self.yS1bar[0,mif3] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,1] * self.yS1[mif1,1] * self.yS1bar[0,mif3] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,1] * self.yS1[mif1,1] * self.yS1bar[0,mif3] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,2] * self.yS1[mif1,2] * self.yS1bar[0,mif3] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,2] * self.yS1[mif1,2] * self.yS1bar[0,mif3] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,2] * self.yS1[mif1,2] * self.yS1bar[0,mif3] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif3] * self.yS1[1,mif1] * self.yS1bar[1,0] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif3] * self.yS1[1,mif1] * self.yS1bar[1,0] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif3] * self.yS1[1,mif1] * self.yS1bar[1,0] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1[1,mif3] * self.yS1bar[1,1] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1[1,mif3] * self.yS1bar[1,1] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1[1,mif3] * self.yS1bar[1,1] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1[2,mif3] * self.yS1bar[1,2] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif1] * self.yS1[2,mif3] * self.yS1bar[1,2] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1[2,mif3] * self.yS1bar[1,2] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,0] * self.yS1[mif1,0] * self.yS1bar[1,mif3] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,0] * self.yS1[mif1,0] * self.yS1bar[1,mif3] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,0] * self.yS1[mif1,0] * self.yS1bar[1,mif3] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,1] * self.yS1[mif1,1] * self.yS1bar[1,mif3] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,1] * self.yS1[mif1,1] * self.yS1bar[1,mif3] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,1] * self.yS1[mif1,1] * self.yS1bar[1,mif3] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,2] * self.yS1[mif1,2] * self.yS1bar[1,mif3] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,2] * self.yS1[mif1,2] * self.yS1bar[1,mif3] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,2] * self.yS1[mif1,2] * self.yS1bar[1,mif3] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif3] * self.yS1[2,mif1] * self.yS1bar[2,0] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[0,mif3] * self.yS1[2,mif1] * self.yS1bar[2,0] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif3] * self.yS1[2,mif1] * self.yS1bar[2,0] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif3] * self.yS1[2,mif1] * self.yS1bar[2,1] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[1,mif3] * self.yS1[2,mif1] * self.yS1bar[2,1] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif3] * self.yS1[2,mif1] * self.yS1bar[2,1] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif1] * self.yS1[2,mif3] * self.yS1bar[2,2] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,mif1] * self.yS1[2,mif3] * self.yS1bar[2,2] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif1] * self.yS1[2,mif3] * self.yS1bar[2,2] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,0] * self.yS1[mif1,0] * self.yS1bar[2,mif3] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,0] * self.yS1[mif1,0] * self.yS1bar[2,mif3] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,0] * self.yS1[mif1,0] * self.yS1bar[2,mif3] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,1] * self.yS1[mif1,1] * self.yS1bar[2,mif3] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,1] * self.yS1[mif1,1] * self.yS1bar[2,mif3] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,1] * self.yS1[mif1,1] * self.yS1bar[2,mif3] * self.yS1bar[mif4,mif2] + 1/64 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,2] * self.yS1[mif1,2] * self.yS1bar[2,mif3] * self.yS1bar[mif4,mif2] + 1/32 * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yS1[2,2] * self.yS1[mif1,2] * self.yS1bar[2,mif3] * self.yS1bar[mif4,mif2] + -1/32 * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,2] * self.yS1[mif1,2] * self.yS1bar[2,mif3] * self.yS1bar[mif4,mif2])

    def alphaOlq1(self, mif1,mif2,mif3,mif4):
        return (1/5760 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -5/432 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/144 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -5/432 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/144 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -5/432 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/144 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/144 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,0] * self.yS1bar[mif2,0] + -1/144 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,1] * self.yS1bar[mif2,1] + -1/144 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,2] * self.yS1bar[mif2,2])

    def alphaOlq3(self, mif1,mif2,mif3,mif4):
        return (-1/36 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/36 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/36 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,0] * self.yS1bar[mif2,0] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,1] * self.yS1bar[mif2,1] + 1/48 * (self.g2)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,2] * self.yS1bar[mif2,2])

    def alphaOlu(self, mif1,mif2,mif3,mif4):
        return (1/1440 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -5/108 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + 1/36 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[0,mif1] * self.yS1bar[0,mif2] + -5/108 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + 1/36 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[1,mif1] * self.yS1bar[1,mif2] + -5/108 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + 1/36 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MS1)**(2) * (self.mu)**(-2)) * self.yS1[2,mif1] * self.yS1bar[2,mif2] + -1/36 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,0] * self.yS1bar[mif2,0] + -1/36 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,1] * self.yS1bar[mif2,1] + -1/36 * (self.g1)**(2) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yS1[mif1,2] * self.yS1bar[mif2,2])

    def alphaOqd1(self, mif1,mif2,mif3,mif4):
        return 1/8640 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOqd8(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOqe(self, mif1,mif2,mif3,mif4):
        return 1/2880 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOqq1(self, mif1,mif2,mif3,mif4):
        return -1/34560 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOqq3(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOqu1(self, mif1,mif2,mif3,mif4):
        return -1/4320 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOqu8(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOquqd1(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOquqd8(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOuB(self, mif1,mif2):
        return 0

    def alphaOud1(self, mif1,mif2,mif3,mif4):
        return 1/2160 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOud8(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOuG(self, mif1,mif2):
        return 0

    def alphaOuH(self, mif1,mif2):
        return 0

    def alphaOuu(self, mif1,mif2,mif3,mif4):
        return -1/2160 * (self.g1)**(4) * (self.MS1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOuW(self, mif1,mif2):
        return 0
