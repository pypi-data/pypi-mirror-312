## Symbols used:
# yXi1bar
# ydbar
# yd
# yl
# MXi1
# ylbar
# g1
# muH
# lambdaXi1P
# lambdaXi1
# kappaXi1
# g2
# epsilonbar
# invepsilonbar
# kappaXi1bar
# yXi1
# mu
# lam
# yubar
# onelooporder
# yu

import sys
import os
import numpy as np

import lsme.numeric.matchingresult as matchingresult

class GranadaXi1MatchingResult(matchingresult.GenericMatchingResult):
    def __init__(self, name='Xi1'):
        super().__init__(name)
        self.MXi1 = 1
        self.lambdaXi1 = 1
        self.lambdaXi1bar = 1
        self.lambdaXi1P = 1
        self.lambdaXi1Pbar = 1
        self.yXi1 = np.ones((3, 3))
        self.yXi1bar = np.ones((3, 3))
        self.kappaXi1 = 1
        self.kappaXi1bar = 1
        self.nonvanishing = ['alphaO3W', 'alphaOH', 'alphaOHB', 'alphaOHBox', 'alphaOHD', 'alphaOHW', 'alphaOHWB', 'alphaWeinberg', 'alphaOdd', 'alphaOdH', 'alphaOeB', 'alphaOed', 'alphaOee', 'alphaOeH', 'alphaOeu', 'alphaOeW', 'alphaOHd', 'alphaOHe', 'alphaOHl1', 'alphaOHl3', 'alphaOHq1', 'alphaOHq3', 'alphaOHu', 'alphaOld', 'alphaOle', 'alphaOledq', 'alphaOlequ1', 'alphaOll', 'alphaOlq1', 'alphaOlq3', 'alphaOlu', 'alphaOqd1', 'alphaOqd8', 'alphaOqe', 'alphaOqq1', 'alphaOqq3', 'alphaOqu1', 'alphaOqu8', 'alphaOquqd1', 'alphaOud1', 'alphaOuH', 'alphaOuu']

    def alphaO3G(self, ):
        return 0

    def alphaO3Gt(self, ):
        return 0

    def alphaO3W(self, ):
        return 1/1440 * (self.g2)**(3) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaO3Wt(self, ):
        return 0

    def alphaOH(self, ):
        return (-16 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) + 8 * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) + self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) + -1 * (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) + 240 * (self.kappaXi1)**(3) * (self.kappaXi1bar)**(3) * (self.muH)**(2) * (self.MXi1)**(-10) * self.onelooporder * (np.pi)**(-2) + 128 * self.invepsilonbar * (self.kappaXi1)**(3) * (self.kappaXi1bar)**(3) * (self.muH)**(2) * (self.MXi1)**(-10) * self.onelooporder * (np.pi)**(-2) + 568/3 * (self.kappaXi1)**(3) * (self.kappaXi1bar)**(3) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) + 80 * self.invepsilonbar * (self.kappaXi1)**(3) * (self.kappaXi1bar)**(3) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) + -100 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lam * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) + -64 * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lam * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) + -109/8 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lambdaXi1 * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) + -29/4 * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lambdaXi1 * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) + 109/8 * (2)**(-1/2) * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lambdaXi1P * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) + 33/4 * (2)**(-1/2) * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lambdaXi1P * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) + 5/8 * (self.g1)**(2) * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) + 61/24 * (self.g2)**(2) * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) + 3/4 * (self.g1)**(2) * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) + 43/12 * (self.g2)**(2) * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) + -428/3 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lam * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) + -80 * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lam * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) + -171/8 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lambdaXi1 * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) + -41/4 * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lambdaXi1 * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) + 605/24 * (2)**(-1/2) * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lambdaXi1P * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) + 57/4 * (2)**(-1/2) * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lambdaXi1P * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) + 1/120 * (self.g2)**(4) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -5/16 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -61/48 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -3/8 * (self.g1)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -43/24 * (self.g2)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 45/2 * self.kappaXi1 * self.kappaXi1bar * (self.lam)**(2) * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 15 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.lam)**(2) * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 45/8 * self.kappaXi1 * self.kappaXi1bar * self.lam * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 15/4 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lam * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 13/32 * self.kappaXi1 * self.kappaXi1bar * (self.lambdaXi1)**(2) * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -83/12 * (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lam * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -5 * (2)**(-1/2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lam * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -1 * (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/2 * (2)**(-1/2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 25/96 * self.kappaXi1 * self.kappaXi1bar * (self.lambdaXi1P)**(2) * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 1/8 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.lambdaXi1P)**(2) * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/240 * (self.g2)**(4) * self.lam * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) + 1/256 * (self.lambdaXi1)**(3) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) + 1/96 * self.lam * (self.lambdaXi1P)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) + 1/256 * self.lambdaXi1 * (self.lambdaXi1P)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) + -128 * (self.kappaXi1)**(3) * (self.kappaXi1bar)**(3) * (self.muH)**(2) * (self.MXi1)**(-10) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -80 * (self.kappaXi1)**(3) * (self.kappaXi1bar)**(3) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 64 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lam * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 29/4 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lambdaXi1 * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -33/4 * (2)**(-1/2) * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lambdaXi1P * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -3/4 * (self.g1)**(2) * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -43/12 * (self.g2)**(2) * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 80 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lam * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 41/4 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lambdaXi1 * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -57/4 * (2)**(-1/2) * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * self.lambdaXi1P * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 3/8 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 43/24 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -15 * self.kappaXi1 * self.kappaXi1bar * (self.lam)**(2) * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -15/4 * self.kappaXi1 * self.kappaXi1bar * self.lam * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 5 * (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lam * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 1/2 * (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -1/8 * self.kappaXi1 * self.kappaXi1bar * (self.lambdaXi1P)**(2) * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)))

    def alphaOHB(self, ):
        return (-1/16 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/128 * (self.g1)**(2) * self.lambdaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2))

    def alphaOHBox(self, ):
        return (2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) + -15/2 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) + -3 * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) + -67/12 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) + -2 * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) + 1/48 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -9/32 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/16 * (self.g1)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -7/16 * (self.g2)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 3/2 * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 7/32 * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 1/4 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -25/48 * (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/2 * (2)**(-1/2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/1280 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) + -1/640 * (self.g2)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) + -1/256 * (self.lambdaXi1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) + 1/768 * (self.lambdaXi1P)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) + 3 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 2 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 1/16 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 7/16 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -1 * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -1/4 * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 1/2 * (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)))

    def alphaOHBt(self, ):
        return 0

    def alphaOHD(self, ):
        return (4 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) + -15 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) + -6 * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) + -17/3 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) + -1 * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) + 23/96 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 5/32 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/16 * (self.g1)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 3/16 * (self.g2)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 3/4 * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 1/2 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 1/2 * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 1/2 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -11/12 * (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -1 * (2)**(-1/2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/320 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) + -1/192 * (self.lambdaXi1P)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) + 6 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 1/16 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -3/16 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -1/2 * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -1/2 * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)))

    def alphaOHG(self, ):
        return 0

    def alphaOHGt(self, ):
        return 0

    def alphaOHW(self, ):
        return (-1/48 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/192 * (self.g2)**(2) * self.lambdaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2))

    def alphaOHWB(self, ):
        return (-5/48 * self.g1 * self.g2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) + 1/96 * (2)**(-1/2) * self.g1 * self.g2 * self.lambdaXi1P * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2))

    def alphaOHWBt(self, ):
        return 0

    def alphaOHWt(self, ):
        return 0

    def alphaWeinberg(self, mif1,mif2):
        return (-1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[mif2,0] * self.yXi1bar[0,mif1] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[mif2,0] * self.yXi1bar[0,mif1] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[mif2,0] * self.yXi1bar[0,mif1] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[mif2,1] * self.yXi1bar[0,mif1] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[mif2,1] * self.yXi1bar[0,mif1] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[mif2,1] * self.yXi1bar[0,mif1] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[mif2,2] * self.yXi1bar[0,mif1] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[mif2,2] * self.yXi1bar[0,mif1] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[mif2,2] * self.yXi1bar[0,mif1] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[mif1,0] * self.yXi1bar[0,mif2] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[mif1,0] * self.yXi1bar[0,mif2] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[mif1,0] * self.yXi1bar[0,mif2] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[mif1,1] * self.yXi1bar[0,mif2] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[mif1,1] * self.yXi1bar[0,mif2] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[mif1,1] * self.yXi1bar[0,mif2] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[mif1,2] * self.yXi1bar[0,mif2] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[mif1,2] * self.yXi1bar[0,mif2] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[mif1,2] * self.yXi1bar[0,mif2] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,0] * self.yXi1bar[0,mif1] * self.yXi1bar[0,mif2] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,0] * self.yXi1bar[0,mif1] * self.yXi1bar[0,mif2] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,0] * self.yXi1bar[0,mif1] * self.yXi1bar[0,mif2] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[mif2,0] * self.yXi1bar[1,mif1] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[mif2,0] * self.yXi1bar[1,mif1] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[mif2,0] * self.yXi1bar[1,mif1] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[mif2,1] * self.yXi1bar[1,mif1] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[mif2,1] * self.yXi1bar[1,mif1] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[mif2,1] * self.yXi1bar[1,mif1] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[mif2,2] * self.yXi1bar[1,mif1] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[mif2,2] * self.yXi1bar[1,mif1] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[mif2,2] * self.yXi1bar[1,mif1] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,0] * self.yXi1bar[0,mif2] * self.yXi1bar[1,mif1] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,0] * self.yXi1bar[0,mif2] * self.yXi1bar[1,mif1] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,0] * self.yXi1bar[0,mif2] * self.yXi1bar[1,mif1] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[mif1,0] * self.yXi1bar[1,mif2] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[mif1,0] * self.yXi1bar[1,mif2] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[mif1,0] * self.yXi1bar[1,mif2] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[mif1,1] * self.yXi1bar[1,mif2] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[mif1,1] * self.yXi1bar[1,mif2] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[mif1,1] * self.yXi1bar[1,mif2] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[mif1,2] * self.yXi1bar[1,mif2] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[mif1,2] * self.yXi1bar[1,mif2] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[mif1,2] * self.yXi1bar[1,mif2] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,1] * self.yXi1bar[0,mif1] * self.yXi1bar[1,mif2] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,1] * self.yXi1bar[0,mif1] * self.yXi1bar[1,mif2] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,1] * self.yXi1bar[0,mif1] * self.yXi1bar[1,mif2] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,1] * self.yXi1bar[1,mif1] * self.yXi1bar[1,mif2] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,1] * self.yXi1bar[1,mif1] * self.yXi1bar[1,mif2] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,1] * self.yXi1bar[1,mif1] * self.yXi1bar[1,mif2] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[mif2,0] * self.yXi1bar[2,mif1] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[mif2,0] * self.yXi1bar[2,mif1] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[mif2,0] * self.yXi1bar[2,mif1] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[mif2,1] * self.yXi1bar[2,mif1] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[mif2,1] * self.yXi1bar[2,mif1] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[mif2,1] * self.yXi1bar[2,mif1] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[mif2,2] * self.yXi1bar[2,mif1] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[mif2,2] * self.yXi1bar[2,mif1] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[mif2,2] * self.yXi1bar[2,mif1] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,0] * self.yXi1bar[0,mif2] * self.yXi1bar[2,mif1] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,0] * self.yXi1bar[0,mif2] * self.yXi1bar[2,mif1] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,0] * self.yXi1bar[0,mif2] * self.yXi1bar[2,mif1] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,1] * self.yXi1bar[1,mif2] * self.yXi1bar[2,mif1] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,1] * self.yXi1bar[1,mif2] * self.yXi1bar[2,mif1] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,1] * self.yXi1bar[1,mif2] * self.yXi1bar[2,mif1] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[mif1,0] * self.yXi1bar[2,mif2] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[mif1,0] * self.yXi1bar[2,mif2] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[mif1,0] * self.yXi1bar[2,mif2] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[mif1,1] * self.yXi1bar[2,mif2] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[mif1,1] * self.yXi1bar[2,mif2] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[mif1,1] * self.yXi1bar[2,mif2] + -1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[mif1,2] * self.yXi1bar[2,mif2] + -1/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[mif1,2] * self.yXi1bar[2,mif2] + 1/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[mif1,2] * self.yXi1bar[2,mif2] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,2] * self.yXi1bar[0,mif1] * self.yXi1bar[2,mif2] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,2] * self.yXi1bar[0,mif1] * self.yXi1bar[2,mif2] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,2] * self.yXi1bar[0,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,2] * self.yXi1bar[1,mif1] * self.yXi1bar[2,mif2] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,2] * self.yXi1bar[1,mif1] * self.yXi1bar[2,mif2] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,2] * self.yXi1bar[1,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,2] * self.yXi1bar[2,mif1] * self.yXi1bar[2,mif2] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,2] * self.yXi1bar[2,mif1] * self.yXi1bar[2,mif2] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,2] * self.yXi1bar[2,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,0] * self.yXi1bar[0,mif2] * self.yXi1bar[mif1,0] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,0] * self.yXi1bar[0,mif2] * self.yXi1bar[mif1,0] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,0] * self.yXi1bar[0,mif2] * self.yXi1bar[mif1,0] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,0] * self.yXi1bar[1,mif2] * self.yXi1bar[mif1,0] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,0] * self.yXi1bar[1,mif2] * self.yXi1bar[mif1,0] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,0] * self.yXi1bar[1,mif2] * self.yXi1bar[mif1,0] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,0] * self.yXi1bar[2,mif2] * self.yXi1bar[mif1,0] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,0] * self.yXi1bar[2,mif2] * self.yXi1bar[mif1,0] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,0] * self.yXi1bar[2,mif2] * self.yXi1bar[mif1,0] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,1] * self.yXi1bar[0,mif2] * self.yXi1bar[mif1,1] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,1] * self.yXi1bar[0,mif2] * self.yXi1bar[mif1,1] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,1] * self.yXi1bar[0,mif2] * self.yXi1bar[mif1,1] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,1] * self.yXi1bar[1,mif2] * self.yXi1bar[mif1,1] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,1] * self.yXi1bar[1,mif2] * self.yXi1bar[mif1,1] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,1] * self.yXi1bar[1,mif2] * self.yXi1bar[mif1,1] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,1] * self.yXi1bar[2,mif2] * self.yXi1bar[mif1,1] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,1] * self.yXi1bar[2,mif2] * self.yXi1bar[mif1,1] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,1] * self.yXi1bar[2,mif2] * self.yXi1bar[mif1,1] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,2] * self.yXi1bar[0,mif2] * self.yXi1bar[mif1,2] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,2] * self.yXi1bar[0,mif2] * self.yXi1bar[mif1,2] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,2] * self.yXi1bar[0,mif2] * self.yXi1bar[mif1,2] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,2] * self.yXi1bar[1,mif2] * self.yXi1bar[mif1,2] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,2] * self.yXi1bar[1,mif2] * self.yXi1bar[mif1,2] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,2] * self.yXi1bar[1,mif2] * self.yXi1bar[mif1,2] + -3/16 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,2] * self.yXi1bar[2,mif2] * self.yXi1bar[mif1,2] + -3/8 * self.invepsilonbar * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,2] * self.yXi1bar[2,mif2] * self.yXi1bar[mif1,2] + 3/8 * self.kappaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,2] * self.yXi1bar[2,mif2] * self.yXi1bar[mif1,2] + 2 * self.kappaXi1 * (self.MXi1)**(-2) * self.yXi1bar[mif1,mif2] + -15/4 * (self.kappaXi1)**(2) * self.kappaXi1bar * (self.muH)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yXi1bar[mif1,mif2] + -3/2 * self.invepsilonbar * (self.kappaXi1)**(2) * self.kappaXi1bar * (self.muH)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yXi1bar[mif1,mif2] + -3/4 * (self.kappaXi1)**(2) * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yXi1bar[mif1,mif2] + 1/8 * self.kappaXi1 * self.lambdaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1bar[mif1,mif2] + 1/8 * self.invepsilonbar * self.kappaXi1 * self.lambdaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1bar[mif1,mif2] + -1/4 * (2)**(-1/2) * self.kappaXi1 * self.lambdaXi1P * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1bar[mif1,mif2] + -1/4 * (2)**(-1/2) * self.invepsilonbar * self.kappaXi1 * self.lambdaXi1P * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1bar[mif1,mif2] + 3/2 * (self.kappaXi1)**(2) * self.kappaXi1bar * (self.muH)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1bar[mif1,mif2] + -1/8 * self.kappaXi1 * self.lambdaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1bar[mif1,mif2] + 1/4 * (2)**(-1/2) * self.kappaXi1 * self.lambdaXi1P * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1bar[mif1,mif2])

    def alphaOdB(self, mif1,mif2):
        return 0

    def alphaOdd(self, mif1,mif2,mif3,mif4):
        return -1/2880 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOdG(self, mif1,mif2):
        return 0

    def alphaOdH(self, mif1,mif2):
        return (2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.yd[mif1,mif2] + -75/8 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -15/4 * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -205/24 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -2 * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -5/64 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -61/192 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -3/32 * (self.g1)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -43/96 * (self.g2)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 3 * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 13/32 * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 1/4 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -35/48 * (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -1/2 * (2)**(-1/2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -1/960 * (self.g2)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 1/384 * (self.lambdaXi1P)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 15/4 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 2 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 3/32 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 43/96 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + -1 * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + -1/4 * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 1/2 * (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yu[mif1,2] * self.yubar[2,2])

    def alphaOdW(self, mif1,mif2):
        return 0

    def alphaOeB(self, mif1,mif2):
        return (1/16 * self.g1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,0] + 1/16 * self.g1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,1] + 1/16 * self.g1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,2] + 1/16 * self.g1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,0] + 1/16 * self.g1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,1] + 1/16 * self.g1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,2] + 1/16 * self.g1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,0] + 1/16 * self.g1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,1] + 1/16 * self.g1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,2])

    def alphaOed(self, mif1,mif2,mif3,mif4):
        return -1/480 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOee(self, mif1,mif2,mif3,mif4):
        return -1/320 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOeH(self, mif1,mif2):
        return (2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.yl[mif1,mif2] + -75/8 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -15/4 * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -205/24 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -2 * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -5/64 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -61/192 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -3/32 * (self.g1)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -43/96 * (self.g2)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 3 * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 13/32 * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 1/4 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -35/48 * (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -1/2 * (2)**(-1/2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -1/960 * (self.g2)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 1/384 * (self.lambdaXi1P)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 15/4 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 2 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 3/32 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 43/96 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + -1 * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + -1/4 * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 1/2 * (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yXi1[0,0] * self.yXi1bar[0,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yXi1[0,0] * self.yXi1bar[0,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yXi1[0,0] * self.yXi1bar[0,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yXi1[0,1] * self.yXi1bar[0,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yXi1[0,1] * self.yXi1bar[0,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yXi1[0,1] * self.yXi1bar[0,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yXi1[0,2] * self.yXi1bar[0,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yXi1[0,2] * self.yXi1bar[0,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yXi1[0,2] * self.yXi1bar[0,0] + 7/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,0] + 3/8 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,0] + 3/32 * self.lambdaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,0] + 1/16 * (2)**(-1/2) * self.lambdaXi1P * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,0] + -3/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.yl[0,mif2] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[0,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.yl[0,mif2] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[0,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.yl[0,mif2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[0,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.yl[0,mif2] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[0,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.yl[0,mif2] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[0,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.yl[0,mif2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[0,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.yl[0,mif2] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[0,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.yl[0,mif2] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[0,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.yl[0,mif2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[0,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yXi1[0,0] * self.yXi1bar[0,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yXi1[0,0] * self.yXi1bar[0,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yXi1[0,0] * self.yXi1bar[0,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yXi1[0,1] * self.yXi1bar[0,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yXi1[0,1] * self.yXi1bar[0,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yXi1[0,1] * self.yXi1bar[0,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yXi1[0,2] * self.yXi1bar[0,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yXi1[0,2] * self.yXi1bar[0,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yXi1[0,2] * self.yXi1bar[0,1] + -1/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,1] + -1/8 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,1] + 3/32 * self.lambdaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,1] + 1/16 * (2)**(-1/2) * self.lambdaXi1P * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,1] + 1/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.yl[1,mif2] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[0,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.yl[1,mif2] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[0,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.yl[1,mif2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[0,1] + 1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[1,mif1] * self.yXi1bar[0,1] + 1/2 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[1,mif1] * self.yXi1bar[0,1] + -1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yXi1[1,mif1] * self.yXi1bar[0,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.yl[1,mif2] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[0,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.yl[1,mif2] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[0,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.yl[1,mif2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[0,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.yl[1,mif2] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[0,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.yl[1,mif2] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[0,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.yl[1,mif2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[0,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yXi1[0,0] * self.yXi1bar[0,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yXi1[0,0] * self.yXi1bar[0,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yXi1[0,0] * self.yXi1bar[0,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yXi1[0,1] * self.yXi1bar[0,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yXi1[0,1] * self.yXi1bar[0,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yXi1[0,1] * self.yXi1bar[0,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yXi1[0,2] * self.yXi1bar[0,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yXi1[0,2] * self.yXi1bar[0,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yXi1[0,2] * self.yXi1bar[0,2] + -1/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,2] + -1/8 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,2] + 3/32 * self.lambdaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,2] + 1/16 * (2)**(-1/2) * self.lambdaXi1P * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,2] + 1/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.yl[2,mif2] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[0,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.yl[2,mif2] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[0,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.yl[2,mif2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[0,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.yl[2,mif2] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[0,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.yl[2,mif2] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[0,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.yl[2,mif2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[0,2] + 1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[2,mif1] * self.yXi1bar[0,2] + 1/2 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[2,mif1] * self.yXi1bar[0,2] + -1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yXi1[2,mif1] * self.yXi1bar[0,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.yl[2,mif2] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[0,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.yl[2,mif2] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[0,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.yl[2,mif2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[0,2] + 1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[0,mif1] * self.yXi1bar[1,0] + 1/2 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[0,mif1] * self.yXi1bar[1,0] + -1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yXi1[0,mif1] * self.yXi1bar[1,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[1,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[1,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[1,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[1,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[1,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[1,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yXi1[1,0] * self.yXi1bar[1,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yXi1[1,0] * self.yXi1bar[1,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yXi1[1,0] * self.yXi1bar[1,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yXi1[1,1] * self.yXi1bar[1,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yXi1[1,1] * self.yXi1bar[1,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yXi1[1,1] * self.yXi1bar[1,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yXi1[1,2] * self.yXi1bar[1,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yXi1[1,2] * self.yXi1bar[1,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yXi1[1,2] * self.yXi1bar[1,0] + -1/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,0] + -1/8 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,0] + 3/32 * self.lambdaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,0] + 1/16 * (2)**(-1/2) * self.lambdaXi1P * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,0] + 1/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[1,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[1,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[1,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[1,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[1,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[1,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[1,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[1,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[1,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[1,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[1,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[1,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.yl[1,mif2] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[1,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.yl[1,mif2] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[1,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.yl[1,mif2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[1,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yXi1[1,0] * self.yXi1bar[1,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yXi1[1,0] * self.yXi1bar[1,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yXi1[1,0] * self.yXi1bar[1,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yXi1[1,1] * self.yXi1bar[1,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yXi1[1,1] * self.yXi1bar[1,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yXi1[1,1] * self.yXi1bar[1,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yXi1[1,2] * self.yXi1bar[1,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yXi1[1,2] * self.yXi1bar[1,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yXi1[1,2] * self.yXi1bar[1,1] + 7/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,1] + 3/8 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,1] + 3/32 * self.lambdaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,1] + 1/16 * (2)**(-1/2) * self.lambdaXi1P * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,1] + -3/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.yl[1,mif2] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[1,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.yl[1,mif2] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[1,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.yl[1,mif2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[1,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.yl[1,mif2] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[1,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.yl[1,mif2] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[1,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.yl[1,mif2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[1,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.yl[2,mif2] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[1,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.yl[2,mif2] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[1,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.yl[2,mif2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[1,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yXi1[1,0] * self.yXi1bar[1,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yXi1[1,0] * self.yXi1bar[1,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yXi1[1,0] * self.yXi1bar[1,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yXi1[1,1] * self.yXi1bar[1,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yXi1[1,1] * self.yXi1bar[1,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yXi1[1,1] * self.yXi1bar[1,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yXi1[1,2] * self.yXi1bar[1,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yXi1[1,2] * self.yXi1bar[1,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yXi1[1,2] * self.yXi1bar[1,2] + -1/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,2] + -1/8 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,2] + 3/32 * self.lambdaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,2] + 1/16 * (2)**(-1/2) * self.lambdaXi1P * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,2] + 1/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.yl[2,mif2] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[1,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.yl[2,mif2] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[1,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.yl[2,mif2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[1,2] + 1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[2,mif1] * self.yXi1bar[1,2] + 1/2 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[2,mif1] * self.yXi1bar[1,2] + -1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yXi1[2,mif1] * self.yXi1bar[1,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.yl[2,mif2] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[1,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.yl[2,mif2] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[1,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.yl[2,mif2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[1,2] + 1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[0,mif1] * self.yXi1bar[2,0] + 1/2 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[0,mif1] * self.yXi1bar[2,0] + -1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yXi1[0,mif1] * self.yXi1bar[2,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[2,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[2,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[2,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[2,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[2,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[2,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[2,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[2,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[2,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[2,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[2,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yXi1[2,0] * self.yXi1bar[2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yXi1[2,0] * self.yXi1bar[2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yXi1[2,0] * self.yXi1bar[2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yXi1[2,1] * self.yXi1bar[2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yXi1[2,1] * self.yXi1bar[2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yXi1[2,1] * self.yXi1bar[2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yXi1[2,2] * self.yXi1bar[2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yXi1[2,2] * self.yXi1bar[2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yXi1[2,2] * self.yXi1bar[2,0] + -1/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,0] + -1/8 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,0] + 3/32 * self.lambdaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,0] + 1/16 * (2)**(-1/2) * self.lambdaXi1P * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,0] + 1/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[2,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[2,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[2,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[2,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[2,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[2,0] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[2,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[2,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[2,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[2,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[2,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[2,1] + 1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[1,mif1] * self.yXi1bar[2,1] + 1/2 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[1,mif1] * self.yXi1bar[2,1] + -1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yXi1[1,mif1] * self.yXi1bar[2,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[2,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[2,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[2,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[2,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[2,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yXi1[2,0] * self.yXi1bar[2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yXi1[2,0] * self.yXi1bar[2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yXi1[2,0] * self.yXi1bar[2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yXi1[2,1] * self.yXi1bar[2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yXi1[2,1] * self.yXi1bar[2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yXi1[2,1] * self.yXi1bar[2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yXi1[2,2] * self.yXi1bar[2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yXi1[2,2] * self.yXi1bar[2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yXi1[2,2] * self.yXi1bar[2,1] + -1/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,1] + -1/8 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,1] + 3/32 * self.lambdaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,1] + 1/16 * (2)**(-1/2) * self.lambdaXi1P * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,1] + 1/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[2,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[2,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[2,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[2,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[2,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[2,1] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.yl[2,mif2] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[2,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.yl[2,mif2] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[2,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.yl[2,mif2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[2,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.yl[2,mif2] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[2,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.yl[2,mif2] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[2,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.yl[2,mif2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[0,0] * self.yXi1[2,0] * self.yXi1bar[2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[0,1] * self.yXi1[2,0] * self.yXi1bar[2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[0,2] * self.yXi1[2,0] * self.yXi1bar[2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[1,0] * self.yXi1[2,1] * self.yXi1bar[2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[1,1] * self.yXi1[2,1] * self.yXi1bar[2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[1,2] * self.yXi1[2,1] * self.yXi1bar[2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yXi1[2,2] * self.yXi1bar[2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yXi1[2,2] * self.yXi1bar[2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yXi1[2,2] * self.yXi1bar[2,2] + 7/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,2] + 3/8 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,2] + 3/32 * self.lambdaXi1 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,2] + 1/16 * (2)**(-1/2) * self.lambdaXi1P * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,2] + -3/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.yl[2,mif2] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[2,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.yl[2,mif2] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[2,2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.yl[2,mif2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[2,2])

    def alphaOeu(self, mif1,mif2,mif3,mif4):
        return 1/240 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOeW(self, mif1,mif2):
        return (-1/32 * self.g2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,0] + -1/32 * self.g2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,1] + -1/32 * self.g2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[0,mif1] * self.yXi1bar[0,2] + -1/32 * self.g2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,0] + -1/32 * self.g2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,1] + -1/32 * self.g2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[1,mif1] * self.yXi1bar[1,2] + -1/32 * self.g2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,0] + -1/32 * self.g2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,1] + -1/32 * self.g2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yXi1[2,mif1] * self.yXi1bar[2,2])

    def alphaOHd(self, mif1,mif2):
        return (-19/288 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/48 * (self.g1)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/960 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/48 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 15/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.ydbar[0,mif1] + 3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.ydbar[0,mif1] + -3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.ydbar[0,mif1] + 15/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.ydbar[1,mif1] + 3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.ydbar[1,mif1] + -3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.ydbar[1,mif1] + 15/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.ydbar[2,mif1] + 3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.ydbar[2,mif1] + -3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.ydbar[2,mif1])

    def alphaOHe(self, mif1,mif2):
        return (-19/96 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/16 * (self.g1)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/320 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/16 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + 15/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[0,mif1] + 3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[0,mif1] + -3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.ylbar[0,mif1] + 15/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[1,mif1] + 3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[1,mif1] + -3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.ylbar[1,mif1] + 15/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[2,mif1] + 3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[2,mif1] + -3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.ylbar[2,mif1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[0,mif1] * self.yXi1[0,0] * self.yXi1bar[0,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[1,mif1] * self.yXi1[0,1] * self.yXi1bar[0,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[2,mif1] * self.yXi1[0,2] * self.yXi1bar[0,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[0,mif1] * self.yXi1[0,0] * self.yXi1bar[0,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[1,mif1] * self.yXi1[0,1] * self.yXi1bar[0,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[2,mif1] * self.yXi1[0,2] * self.yXi1bar[0,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[0,mif1] * self.yXi1[0,0] * self.yXi1bar[0,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[1,mif1] * self.yXi1[0,1] * self.yXi1bar[0,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[2,mif1] * self.yXi1[0,2] * self.yXi1bar[0,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[0,mif1] * self.yXi1[1,0] * self.yXi1bar[1,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[1,mif1] * self.yXi1[1,1] * self.yXi1bar[1,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[2,mif1] * self.yXi1[1,2] * self.yXi1bar[1,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[0,mif1] * self.yXi1[1,0] * self.yXi1bar[1,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[1,mif1] * self.yXi1[1,1] * self.yXi1bar[1,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[2,mif1] * self.yXi1[1,2] * self.yXi1bar[1,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[0,mif1] * self.yXi1[1,0] * self.yXi1bar[1,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[1,mif1] * self.yXi1[1,1] * self.yXi1bar[1,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[2,mif1] * self.yXi1[1,2] * self.yXi1bar[1,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[0,mif1] * self.yXi1[2,0] * self.yXi1bar[2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[1,mif1] * self.yXi1[2,1] * self.yXi1bar[2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[2,mif1] * self.yXi1[2,2] * self.yXi1bar[2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[0,mif1] * self.yXi1[2,0] * self.yXi1bar[2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[1,mif1] * self.yXi1[2,1] * self.yXi1bar[2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[2,mif1] * self.yXi1[2,2] * self.yXi1bar[2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[0,mif1] * self.yXi1[2,0] * self.yXi1bar[2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[1,mif1] * self.yXi1[2,1] * self.yXi1bar[2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[2,mif1] * self.yXi1[2,2] * self.yXi1bar[2,2])

    def alphaOHl1(self, mif1,mif2):
        return (-19/192 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/32 * (self.g1)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/640 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/32 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -15/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,0] * self.ylbar[mif2,0] + -3/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,0] * self.ylbar[mif2,0] + 3/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[mif1,0] * self.ylbar[mif2,0] + -15/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,1] * self.ylbar[mif2,1] + -3/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,1] * self.ylbar[mif2,1] + 3/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[mif1,1] * self.ylbar[mif2,1] + -15/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,2] * self.ylbar[mif2,2] + -3/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,2] * self.ylbar[mif2,2] + 3/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[mif1,2] * self.ylbar[mif2,2] + -15/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -3/4 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -5/48 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/16 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 3/4 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/16 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + -15/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -3/4 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -5/48 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/16 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 3/4 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/16 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + -15/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -3/4 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -5/48 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/16 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 3/4 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/16 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/48 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[mif1,0] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[0,0] * self.yXi1[mif1,0] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[0,1] * self.yXi1[mif1,0] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[0,2] * self.yXi1[mif1,0] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[1,0] * self.yXi1[mif1,1] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[1,1] * self.yXi1[mif1,1] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[1,2] * self.yXi1[mif1,1] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[2,0] * self.yXi1[mif1,2] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[2,1] * self.yXi1[mif1,2] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[2,2] * self.yXi1[mif1,2] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[0,0] * self.yXi1[mif1,0] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[0,1] * self.yXi1[mif1,0] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[0,2] * self.yXi1[mif1,0] * self.yXi1bar[mif2,1] + 1/48 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[mif1,1] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[1,0] * self.yXi1[mif1,1] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[1,1] * self.yXi1[mif1,1] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[1,2] * self.yXi1[mif1,1] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[2,0] * self.yXi1[mif1,2] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[2,1] * self.yXi1[mif1,2] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[2,2] * self.yXi1[mif1,2] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[0,0] * self.yXi1[mif1,0] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[0,1] * self.yXi1[mif1,0] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[0,2] * self.yXi1[mif1,0] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[1,0] * self.yXi1[mif1,1] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[1,1] * self.yXi1[mif1,1] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[1,2] * self.yXi1[mif1,1] * self.yXi1bar[mif2,2] + 1/48 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[mif1,2] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[2,0] * self.yXi1[mif1,2] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[2,1] * self.yXi1[mif1,2] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[2,2] * self.yXi1[mif1,2] * self.yXi1bar[mif2,2])

    def alphaOHl3(self, mif1,mif2):
        return (7/192 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/96 * (self.g2)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/960 * (self.g2)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/96 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -5/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,0] * self.ylbar[mif2,0] + -1/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,0] * self.ylbar[mif2,0] + 1/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[mif1,0] * self.ylbar[mif2,0] + -5/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,1] * self.ylbar[mif2,1] + -1/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,1] * self.ylbar[mif2,1] + 1/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[mif1,1] * self.ylbar[mif2,1] + -5/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,2] * self.ylbar[mif2,2] + -1/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,2] * self.ylbar[mif2,2] + 1/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[mif1,2] * self.ylbar[mif2,2] + 5/4 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/2 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + 5/4 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/2 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[0,0] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[0,1] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[0,2] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[1,0] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[1,1] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[1,2] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + 5/4 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/2 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[2,0] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[2,1] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[2,2] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[mif1,0] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[0,0] * self.yXi1[mif1,0] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[0,1] * self.yXi1[mif1,0] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[0,2] * self.yXi1[mif1,0] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[1,0] * self.yXi1[mif1,1] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[1,1] * self.yXi1[mif1,1] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[1,2] * self.yXi1[mif1,1] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,0] * self.ylbar[2,0] * self.yXi1[mif1,2] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,1] * self.ylbar[2,1] * self.yXi1[mif1,2] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,2] * self.ylbar[2,2] * self.yXi1[mif1,2] * self.yXi1bar[mif2,0] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[0,0] * self.yXi1[mif1,0] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[0,1] * self.yXi1[mif1,0] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[0,2] * self.yXi1[mif1,0] * self.yXi1bar[mif2,1] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[mif1,1] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[1,0] * self.yXi1[mif1,1] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[1,1] * self.yXi1[mif1,1] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[1,2] * self.yXi1[mif1,1] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,0] * self.ylbar[2,0] * self.yXi1[mif1,2] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,1] * self.ylbar[2,1] * self.yXi1[mif1,2] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,2] * self.ylbar[2,2] * self.yXi1[mif1,2] * self.yXi1bar[mif2,1] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[0,0] * self.yXi1[mif1,0] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[0,1] * self.yXi1[mif1,0] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[0,2] * self.yXi1[mif1,0] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[1,0] * self.yXi1[mif1,1] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[1,1] * self.yXi1[mif1,1] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[1,2] * self.yXi1[mif1,1] * self.yXi1bar[mif2,2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[mif1,2] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,0] * self.ylbar[2,0] * self.yXi1[mif1,2] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,1] * self.ylbar[2,1] * self.yXi1[mif1,2] * self.yXi1bar[mif2,2] + 1/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,2] * self.ylbar[2,2] * self.yXi1[mif1,2] * self.yXi1bar[mif2,2])

    def alphaOHq1(self, mif1,mif2):
        return (19/576 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/96 * (self.g1)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/1920 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/96 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -15/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] + -3/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] + 3/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[mif2,0] + -15/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] + -3/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] + 3/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[mif2,1] + -15/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] + -3/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] + 3/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[mif2,2] + 15/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,0] * self.yubar[mif2,0] + 3/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,0] * self.yubar[mif2,0] + -3/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[mif1,0] * self.yubar[mif2,0] + 15/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,1] * self.yubar[mif2,1] + 3/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,1] * self.yubar[mif2,1] + -3/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[mif1,1] * self.yubar[mif2,1] + 15/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,2] * self.yubar[mif2,2] + 3/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,2] * self.yubar[mif2,2] + -3/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[mif1,2] * self.yubar[mif2,2])

    def alphaOHq3(self, mif1,mif2):
        return (7/192 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/96 * (self.g2)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/960 * (self.g2)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/96 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -5/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] + -1/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] + 1/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[mif2,0] + -5/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] + -1/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] + 1/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[mif2,1] + -5/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] + -1/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] + 1/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[mif2,2] + -5/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,0] * self.yubar[mif2,0] + -1/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,0] * self.yubar[mif2,0] + 1/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[mif1,0] * self.yubar[mif2,0] + -5/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,1] * self.yubar[mif2,1] + -1/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,1] * self.yubar[mif2,1] + 1/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[mif1,1] * self.yubar[mif2,1] + -5/64 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,2] * self.yubar[mif2,2] + -1/32 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,2] * self.yubar[mif2,2] + 1/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[mif1,2] * self.yubar[mif2,2])

    def alphaOHu(self, mif1,mif2):
        return (19/144 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/24 * (self.g1)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/480 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/24 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) + -15/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yubar[0,mif1] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yubar[0,mif1] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[0,mif2] * self.yubar[0,mif1] + -15/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yubar[1,mif1] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yubar[1,mif1] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[1,mif2] * self.yubar[1,mif1] + -15/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yubar[2,mif1] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yubar[2,mif1] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[2,mif2] * self.yubar[2,mif1])

    def alphaOHud(self, mif1,mif2):
        return 0

    def alphaOld(self, mif1,mif2,mif3,mif4):
        return (-1/960 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 5/72 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/24 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/24 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 5/72 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/24 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/24 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 5/72 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/24 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/24 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/72 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,0] * self.yXi1bar[mif2,0] + -1/72 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,1] * self.yXi1bar[mif2,1] + -1/72 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,2] * self.yXi1bar[mif2,2])

    def alphaOle(self, mif1,mif2,mif3,mif4):
        return (-1/320 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -1/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif4] * self.ylbar[mif2,mif3] + 5/24 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/8 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/8 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -9/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[0,mif3] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[0,mif3] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,mif4] * self.ylbar[0,mif3] * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -9/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[1,mif3] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[1,mif3] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,mif4] * self.ylbar[1,mif3] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] + -9/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[2,mif3] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[2,mif3] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[0,mif4] * self.ylbar[2,mif3] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] + -9/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[0,mif3] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[0,mif3] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,mif4] * self.ylbar[0,mif3] * self.yXi1[0,mif1] * self.yXi1bar[1,mif2] + 5/24 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/8 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/8 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -9/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[1,mif3] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[1,mif3] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,mif4] * self.ylbar[1,mif3] * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -9/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[2,mif3] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[2,mif3] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[1,mif4] * self.ylbar[2,mif3] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] + -9/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[0,mif3] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[0,mif3] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,mif4] * self.ylbar[0,mif3] * self.yXi1[0,mif1] * self.yXi1bar[2,mif2] + -9/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[1,mif3] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[1,mif3] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,mif4] * self.ylbar[1,mif3] * self.yXi1[1,mif1] * self.yXi1bar[2,mif2] + 5/24 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/8 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/8 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -9/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[2,mif3] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -3/16 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[2,mif3] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 3/16 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yl[2,mif4] * self.ylbar[2,mif3] * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[0,mif3] * self.yXi1[0,mif1] * self.yXi1bar[mif2,0] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[1,mif3] * self.yXi1[1,mif1] * self.yXi1bar[mif2,0] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[2,mif3] * self.yXi1[2,mif1] * self.yXi1bar[mif2,0] + -1/24 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,0] * self.yXi1bar[mif2,0] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[0,mif3] * self.yXi1[mif1,0] * self.yXi1bar[mif2,0] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[1,mif3] * self.yXi1[mif1,1] * self.yXi1bar[mif2,0] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif4] * self.ylbar[2,mif3] * self.yXi1[mif1,2] * self.yXi1bar[mif2,0] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[0,mif3] * self.yXi1[0,mif1] * self.yXi1bar[mif2,1] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[1,mif3] * self.yXi1[1,mif1] * self.yXi1bar[mif2,1] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[2,mif3] * self.yXi1[2,mif1] * self.yXi1bar[mif2,1] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[0,mif3] * self.yXi1[mif1,0] * self.yXi1bar[mif2,1] + -1/24 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,1] * self.yXi1bar[mif2,1] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[1,mif3] * self.yXi1[mif1,1] * self.yXi1bar[mif2,1] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif4] * self.ylbar[2,mif3] * self.yXi1[mif1,2] * self.yXi1bar[mif2,1] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[0,mif3] * self.yXi1[0,mif1] * self.yXi1bar[mif2,2] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[1,mif3] * self.yXi1[1,mif1] * self.yXi1bar[mif2,2] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[2,mif3] * self.yXi1[2,mif1] * self.yXi1bar[mif2,2] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[0,mif3] * self.yXi1[mif1,0] * self.yXi1bar[mif2,2] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[1,mif3] * self.yXi1[mif1,1] * self.yXi1bar[mif2,2] + -1/24 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,2] * self.yXi1bar[mif2,2] + 1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif4] * self.ylbar[2,mif3] * self.yXi1[mif1,2] * self.yXi1bar[mif2,2])

    def alphaOledq(self, mif1,mif2,mif3,mif4):
        return 1/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.ydbar[mif4,mif3] * self.yl[mif1,mif2]

    def alphaOlequ1(self, mif1,mif2,mif3,mif4):
        return -1/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] * self.yu[mif3,mif4]

    def alphaOlequ3(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOll(self, mif1,mif2,mif3,mif4):
        return (-1/960 * (self.g2)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + -1/1280 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/1920 * (self.g2)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 5/96 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/32 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/96 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/32 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/96 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yXi1[0,mif3] * self.yXi1bar[0,mif2] + 1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yXi1[0,mif3] * self.yXi1bar[0,mif2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif3] * self.yXi1bar[0,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,0] * self.yXi1bar[0,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,0] * self.yXi1bar[0,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,0] * self.yXi1bar[0,mif2] + 1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yXi1[0,mif1] * self.yXi1bar[0,mif4] + 1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yXi1[0,mif1] * self.yXi1bar[0,mif4] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1bar[0,mif4] + 5/96 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[0,mif3] * self.yXi1bar[0,mif4] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[0,mif3] * self.yXi1bar[0,mif4] + 1/32 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[0,mif3] * self.yXi1bar[0,mif4] + -1/96 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[0,mif3] * self.yXi1bar[0,mif4] + -1/32 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif3] * self.yXi1bar[0,mif4] + 1/96 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif3] * self.yXi1bar[0,mif4] + -5/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[0,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[0,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,0] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif2] * self.yXi1bar[0,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,0] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif2] * self.yXi1bar[0,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,0] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif2] * self.yXi1bar[0,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[1,0] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[1,0] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[1,0] + 5/96 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/32 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/96 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/32 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/96 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yXi1[1,mif3] * self.yXi1bar[1,mif2] + 1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yXi1[1,mif3] * self.yXi1bar[1,mif2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif3] * self.yXi1bar[1,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,1] * self.yXi1bar[1,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,1] * self.yXi1bar[1,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,1] * self.yXi1bar[1,mif2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif3] * self.yXi1[1,mif1] * self.yXi1bar[0,mif4] * self.yXi1bar[1,mif2] + -1/2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[1,mif3] * self.yXi1bar[0,mif4] * self.yXi1bar[1,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,0] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif4] * self.yXi1bar[1,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,0] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif4] * self.yXi1bar[1,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,0] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif4] * self.yXi1bar[1,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[1,1] * self.yXi1bar[1,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[1,1] * self.yXi1bar[1,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[1,1] * self.yXi1bar[1,mif2] + 1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yXi1[1,mif1] * self.yXi1bar[1,mif4] + 1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yXi1[1,mif1] * self.yXi1bar[1,mif4] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1bar[1,mif4] + 5/96 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[1,mif3] * self.yXi1bar[1,mif4] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[1,mif3] * self.yXi1bar[1,mif4] + 1/32 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[1,mif3] * self.yXi1bar[1,mif4] + -1/96 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[1,mif3] * self.yXi1bar[1,mif4] + -1/32 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif3] * self.yXi1bar[1,mif4] + 1/96 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif3] * self.yXi1bar[1,mif4] + -1/2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif3] * self.yXi1[1,mif1] * self.yXi1bar[0,mif2] * self.yXi1bar[1,mif4] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[1,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,1] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif2] * self.yXi1bar[1,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,1] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif2] * self.yXi1bar[1,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,1] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif2] * self.yXi1bar[1,mif4] + -5/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[1,mif3] * self.yXi1bar[1,mif2] * self.yXi1bar[1,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,1] * self.yXi1[mif3,mif1] * self.yXi1bar[1,mif2] * self.yXi1bar[1,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,1] * self.yXi1[mif3,mif1] * self.yXi1bar[1,mif2] * self.yXi1bar[1,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,1] * self.yXi1[mif3,mif1] * self.yXi1bar[1,mif2] * self.yXi1bar[1,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[2,0] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[2,0] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[2,0] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[1,mif2] * self.yXi1bar[2,1] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[1,mif2] * self.yXi1bar[2,1] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[1,mif2] * self.yXi1bar[2,1] + 5/96 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/32 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/96 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/32 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/96 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yXi1[2,mif3] * self.yXi1bar[2,mif2] + 1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yXi1[2,mif3] * self.yXi1bar[2,mif2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif3] * self.yXi1bar[2,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,2] * self.yXi1bar[2,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,2] * self.yXi1bar[2,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[0,2] * self.yXi1bar[2,mif2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif3] * self.yXi1[2,mif1] * self.yXi1bar[0,mif4] * self.yXi1bar[2,mif2] + -1/2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[2,mif3] * self.yXi1bar[0,mif4] * self.yXi1bar[2,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,0] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif4] * self.yXi1bar[2,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,0] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif4] * self.yXi1bar[2,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,0] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif4] * self.yXi1bar[2,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[1,2] * self.yXi1bar[2,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[1,2] * self.yXi1bar[2,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[1,2] * self.yXi1bar[2,mif2] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif3] * self.yXi1[2,mif1] * self.yXi1bar[1,mif4] * self.yXi1bar[2,mif2] + -1/2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[2,mif3] * self.yXi1bar[1,mif4] * self.yXi1bar[2,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,1] * self.yXi1[mif3,mif1] * self.yXi1bar[1,mif4] * self.yXi1bar[2,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,1] * self.yXi1[mif3,mif1] * self.yXi1bar[1,mif4] * self.yXi1bar[2,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,1] * self.yXi1[mif3,mif1] * self.yXi1bar[1,mif4] * self.yXi1bar[2,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[2,2] * self.yXi1bar[2,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[2,2] * self.yXi1bar[2,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif4] * self.yXi1[mif1,mif3] * self.yXi1bar[2,2] * self.yXi1bar[2,mif2] + 1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yXi1[2,mif1] * self.yXi1bar[2,mif4] + 1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yXi1[2,mif1] * self.yXi1bar[2,mif4] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1bar[2,mif4] + 5/96 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[2,mif3] * self.yXi1bar[2,mif4] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[2,mif3] * self.yXi1bar[2,mif4] + 1/32 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[2,mif3] * self.yXi1bar[2,mif4] + -1/96 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[2,mif3] * self.yXi1bar[2,mif4] + -1/32 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif3] * self.yXi1bar[2,mif4] + 1/96 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif3] * self.yXi1bar[2,mif4] + -1/2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif3] * self.yXi1[2,mif1] * self.yXi1bar[0,mif2] * self.yXi1bar[2,mif4] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[2,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,2] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif2] * self.yXi1bar[2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,2] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif2] * self.yXi1bar[2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,2] * self.yXi1[mif3,mif1] * self.yXi1bar[0,mif2] * self.yXi1bar[2,mif4] + -1/2 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif3] * self.yXi1[2,mif1] * self.yXi1bar[1,mif2] * self.yXi1bar[2,mif4] + -1/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[2,mif3] * self.yXi1bar[1,mif2] * self.yXi1bar[2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,2] * self.yXi1[mif3,mif1] * self.yXi1bar[1,mif2] * self.yXi1bar[2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,2] * self.yXi1[mif3,mif1] * self.yXi1bar[1,mif2] * self.yXi1bar[2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,2] * self.yXi1[mif3,mif1] * self.yXi1bar[1,mif2] * self.yXi1bar[2,mif4] + -5/8 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1[2,mif3] * self.yXi1bar[2,mif2] * self.yXi1bar[2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,2] * self.yXi1[mif3,mif1] * self.yXi1bar[2,mif2] * self.yXi1bar[2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,2] * self.yXi1[mif3,mif1] * self.yXi1bar[2,mif2] * self.yXi1bar[2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,2] * self.yXi1[mif3,mif1] * self.yXi1bar[2,mif2] * self.yXi1bar[2,mif4] + -1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yXi1[mif3,0] * self.yXi1bar[mif2,0] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[0,0] * self.yXi1bar[mif2,0] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[0,0] * self.yXi1bar[mif2,0] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[0,0] * self.yXi1bar[mif2,0] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[1,0] * self.yXi1bar[mif2,0] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[1,0] * self.yXi1bar[mif2,0] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[1,0] * self.yXi1bar[mif2,0] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[2,0] * self.yXi1bar[mif2,0] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[2,0] * self.yXi1bar[mif2,0] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[2,0] * self.yXi1bar[mif2,0] + -1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yXi1[mif3,1] * self.yXi1bar[mif2,1] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[0,1] * self.yXi1bar[mif2,1] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[0,1] * self.yXi1bar[mif2,1] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[0,1] * self.yXi1bar[mif2,1] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[1,1] * self.yXi1bar[mif2,1] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[1,1] * self.yXi1bar[mif2,1] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[1,1] * self.yXi1bar[mif2,1] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[2,1] * self.yXi1bar[mif2,1] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[2,1] * self.yXi1bar[mif2,1] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[2,1] * self.yXi1bar[mif2,1] + -1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yXi1[mif3,2] * self.yXi1bar[mif2,2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[0,2] * self.yXi1bar[mif2,2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[0,2] * self.yXi1bar[mif2,2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[0,2] * self.yXi1bar[mif2,2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[1,2] * self.yXi1bar[mif2,2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[1,2] * self.yXi1bar[mif2,2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[1,2] * self.yXi1bar[mif2,2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[2,2] * self.yXi1bar[mif2,2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[2,2] * self.yXi1bar[mif2,2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif4] * self.yXi1[mif3,mif1] * self.yXi1bar[2,2] * self.yXi1bar[mif2,2] + 1/2 * (self.MXi1)**(-2) * self.yXi1[mif3,mif1] * self.yXi1bar[mif2,mif4] + 3/64 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[mif3,mif1] * self.yXi1bar[mif2,mif4] + 9/64 * self.epsilonbar * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[mif3,mif1] * self.yXi1bar[mif2,mif4] + 3/32 * self.epsilonbar * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[mif3,mif1] * self.yXi1bar[mif2,mif4] + -3/32 * self.epsilonbar * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[mif3,mif1] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[mif3,0] * self.yXi1bar[0,0] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[mif3,0] * self.yXi1bar[0,0] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1[mif3,0] * self.yXi1bar[0,0] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[mif3,1] * self.yXi1bar[0,1] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[mif3,1] * self.yXi1bar[0,1] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1[mif3,1] * self.yXi1bar[0,1] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[mif3,2] * self.yXi1bar[0,2] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[mif3,2] * self.yXi1bar[0,2] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1[mif3,2] * self.yXi1bar[0,2] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,0] * self.yXi1[0,mif1] * self.yXi1bar[0,mif3] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,0] * self.yXi1[0,mif1] * self.yXi1bar[0,mif3] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,0] * self.yXi1[0,mif1] * self.yXi1bar[0,mif3] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,1] * self.yXi1[1,mif1] * self.yXi1bar[0,mif3] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,1] * self.yXi1[1,mif1] * self.yXi1bar[0,mif3] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,1] * self.yXi1[1,mif1] * self.yXi1bar[0,mif3] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,2] * self.yXi1[2,mif1] * self.yXi1bar[0,mif3] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,2] * self.yXi1[2,mif1] * self.yXi1bar[0,mif3] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,2] * self.yXi1[2,mif1] * self.yXi1bar[0,mif3] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[mif3,0] * self.yXi1bar[1,0] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[mif3,0] * self.yXi1bar[1,0] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1[mif3,0] * self.yXi1bar[1,0] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[mif3,1] * self.yXi1bar[1,1] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[mif3,1] * self.yXi1bar[1,1] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1[mif3,1] * self.yXi1bar[1,1] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[mif3,2] * self.yXi1bar[1,2] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[mif3,2] * self.yXi1bar[1,2] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1[mif3,2] * self.yXi1bar[1,2] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[1,0] * self.yXi1bar[1,mif3] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[1,0] * self.yXi1bar[1,mif3] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1[1,0] * self.yXi1bar[1,mif3] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,1] * self.yXi1[1,mif1] * self.yXi1bar[1,mif3] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,1] * self.yXi1[1,mif1] * self.yXi1bar[1,mif3] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,1] * self.yXi1[1,mif1] * self.yXi1bar[1,mif3] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,2] * self.yXi1[2,mif1] * self.yXi1bar[1,mif3] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,2] * self.yXi1[2,mif1] * self.yXi1bar[1,mif3] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,2] * self.yXi1[2,mif1] * self.yXi1bar[1,mif3] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1[mif3,0] * self.yXi1bar[2,0] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1[mif3,0] * self.yXi1bar[2,0] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1[mif3,0] * self.yXi1bar[2,0] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1[mif3,1] * self.yXi1bar[2,1] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1[mif3,1] * self.yXi1bar[2,1] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1[mif3,1] * self.yXi1bar[2,1] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1[mif3,2] * self.yXi1bar[2,2] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1[mif3,2] * self.yXi1bar[2,2] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1[mif3,2] * self.yXi1bar[2,2] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[2,0] * self.yXi1bar[2,mif3] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[2,0] * self.yXi1bar[2,mif3] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1[2,0] * self.yXi1bar[2,mif3] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[2,1] * self.yXi1bar[2,mif3] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[2,1] * self.yXi1bar[2,mif3] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1[2,1] * self.yXi1bar[2,mif3] * self.yXi1bar[mif2,mif4] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,2] * self.yXi1[2,mif1] * self.yXi1bar[2,mif3] * self.yXi1bar[mif2,mif4] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,2] * self.yXi1[2,mif1] * self.yXi1bar[2,mif3] * self.yXi1bar[mif2,mif4] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,2] * self.yXi1[2,mif1] * self.yXi1bar[2,mif3] * self.yXi1bar[mif2,mif4] + -1/48 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[mif3,0] * self.yXi1bar[mif4,0] + 1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[mif3,0] * self.yXi1bar[mif4,0] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,0] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[mif4,0] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,0] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[mif4,0] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,0] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[mif4,0] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,0] * self.yXi1[mif1,mif3] * self.yXi1bar[1,mif2] * self.yXi1bar[mif4,0] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,0] * self.yXi1[mif1,mif3] * self.yXi1bar[1,mif2] * self.yXi1bar[mif4,0] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,0] * self.yXi1[mif1,mif3] * self.yXi1bar[1,mif2] * self.yXi1bar[mif4,0] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,0] * self.yXi1[mif1,mif3] * self.yXi1bar[2,mif2] * self.yXi1bar[mif4,0] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,0] * self.yXi1[mif1,mif3] * self.yXi1bar[2,mif2] * self.yXi1bar[mif4,0] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,0] * self.yXi1[mif1,mif3] * self.yXi1bar[2,mif2] * self.yXi1bar[mif4,0] + -1/48 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[mif3,1] * self.yXi1bar[mif4,1] + 1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[mif3,1] * self.yXi1bar[mif4,1] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,1] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[mif4,1] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,1] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[mif4,1] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,1] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[mif4,1] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,1] * self.yXi1[mif1,mif3] * self.yXi1bar[1,mif2] * self.yXi1bar[mif4,1] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,1] * self.yXi1[mif1,mif3] * self.yXi1bar[1,mif2] * self.yXi1bar[mif4,1] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,1] * self.yXi1[mif1,mif3] * self.yXi1bar[1,mif2] * self.yXi1bar[mif4,1] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,1] * self.yXi1[mif1,mif3] * self.yXi1bar[2,mif2] * self.yXi1bar[mif4,1] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,1] * self.yXi1[mif1,mif3] * self.yXi1bar[2,mif2] * self.yXi1bar[mif4,1] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,1] * self.yXi1[mif1,mif3] * self.yXi1bar[2,mif2] * self.yXi1bar[mif4,1] + -1/48 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[mif3,2] * self.yXi1bar[mif4,2] + 1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yXi1[mif3,2] * self.yXi1bar[mif4,2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,2] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[mif4,2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,2] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[mif4,2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,2] * self.yXi1[mif1,mif3] * self.yXi1bar[0,mif2] * self.yXi1bar[mif4,2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,2] * self.yXi1[mif1,mif3] * self.yXi1bar[1,mif2] * self.yXi1bar[mif4,2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,2] * self.yXi1[mif1,mif3] * self.yXi1bar[1,mif2] * self.yXi1bar[mif4,2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,2] * self.yXi1[mif1,mif3] * self.yXi1bar[1,mif2] * self.yXi1bar[mif4,2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,2] * self.yXi1[mif1,mif3] * self.yXi1bar[2,mif2] * self.yXi1bar[mif4,2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,2] * self.yXi1[mif1,mif3] * self.yXi1bar[2,mif2] * self.yXi1bar[mif4,2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,2] * self.yXi1[mif1,mif3] * self.yXi1bar[2,mif2] * self.yXi1bar[mif4,2] + 1/2 * (self.MXi1)**(-2) * self.yXi1[mif1,mif3] * self.yXi1bar[mif4,mif2] + 3/32 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[mif1,mif3] * self.yXi1bar[mif4,mif2] + -3/64 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[mif1,mif3] * self.yXi1bar[mif4,mif2] + 9/64 * self.epsilonbar * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[mif1,mif3] * self.yXi1bar[mif4,mif2] + 3/32 * self.epsilonbar * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[mif1,mif3] * self.yXi1bar[mif4,mif2] + -3/32 * self.epsilonbar * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[mif1,mif3] * self.yXi1bar[mif4,mif2] + 3/16 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[mif3,mif1] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[0,mif3] * self.yXi1bar[0,0] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[0,mif3] * self.yXi1bar[0,0] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1[0,mif3] * self.yXi1bar[0,0] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[1,mif3] * self.yXi1bar[0,1] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[1,mif3] * self.yXi1bar[0,1] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1[1,mif3] * self.yXi1bar[0,1] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[2,mif3] * self.yXi1bar[0,2] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif1] * self.yXi1[2,mif3] * self.yXi1bar[0,2] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1[2,mif3] * self.yXi1bar[0,2] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,0] * self.yXi1[mif1,0] * self.yXi1bar[0,mif3] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,0] * self.yXi1[mif1,0] * self.yXi1bar[0,mif3] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,0] * self.yXi1[mif1,0] * self.yXi1bar[0,mif3] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,1] * self.yXi1[mif1,1] * self.yXi1bar[0,mif3] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,1] * self.yXi1[mif1,1] * self.yXi1bar[0,mif3] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,1] * self.yXi1[mif1,1] * self.yXi1bar[0,mif3] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,2] * self.yXi1[mif1,2] * self.yXi1bar[0,mif3] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,2] * self.yXi1[mif1,2] * self.yXi1bar[0,mif3] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,2] * self.yXi1[mif1,2] * self.yXi1bar[0,mif3] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif3] * self.yXi1[1,mif1] * self.yXi1bar[1,0] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif3] * self.yXi1[1,mif1] * self.yXi1bar[1,0] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif3] * self.yXi1[1,mif1] * self.yXi1bar[1,0] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[1,mif3] * self.yXi1bar[1,1] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[1,mif3] * self.yXi1bar[1,1] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1[1,mif3] * self.yXi1bar[1,1] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[2,mif3] * self.yXi1bar[1,2] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif1] * self.yXi1[2,mif3] * self.yXi1bar[1,2] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1[2,mif3] * self.yXi1bar[1,2] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,0] * self.yXi1[mif1,0] * self.yXi1bar[1,mif3] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,0] * self.yXi1[mif1,0] * self.yXi1bar[1,mif3] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,0] * self.yXi1[mif1,0] * self.yXi1bar[1,mif3] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,1] * self.yXi1[mif1,1] * self.yXi1bar[1,mif3] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,1] * self.yXi1[mif1,1] * self.yXi1bar[1,mif3] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,1] * self.yXi1[mif1,1] * self.yXi1bar[1,mif3] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,2] * self.yXi1[mif1,2] * self.yXi1bar[1,mif3] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,2] * self.yXi1[mif1,2] * self.yXi1bar[1,mif3] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,2] * self.yXi1[mif1,2] * self.yXi1bar[1,mif3] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif3] * self.yXi1[2,mif1] * self.yXi1bar[2,0] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[0,mif3] * self.yXi1[2,mif1] * self.yXi1bar[2,0] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif3] * self.yXi1[2,mif1] * self.yXi1bar[2,0] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif3] * self.yXi1[2,mif1] * self.yXi1bar[2,1] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[1,mif3] * self.yXi1[2,mif1] * self.yXi1bar[2,1] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif3] * self.yXi1[2,mif1] * self.yXi1bar[2,1] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1[2,mif3] * self.yXi1bar[2,2] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,mif1] * self.yXi1[2,mif3] * self.yXi1bar[2,2] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1[2,mif3] * self.yXi1bar[2,2] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,0] * self.yXi1[mif1,0] * self.yXi1bar[2,mif3] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,0] * self.yXi1[mif1,0] * self.yXi1bar[2,mif3] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,0] * self.yXi1[mif1,0] * self.yXi1bar[2,mif3] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,1] * self.yXi1[mif1,1] * self.yXi1bar[2,mif3] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,1] * self.yXi1[mif1,1] * self.yXi1bar[2,mif3] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,1] * self.yXi1[mif1,1] * self.yXi1bar[2,mif3] * self.yXi1bar[mif4,mif2] + -3/64 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,2] * self.yXi1[mif1,2] * self.yXi1bar[2,mif3] * self.yXi1bar[mif4,mif2] + -3/32 * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yXi1[2,2] * self.yXi1[mif1,2] * self.yXi1bar[2,mif3] * self.yXi1bar[mif4,mif2] + 3/32 * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,2] * self.yXi1[mif1,2] * self.yXi1bar[2,mif3] * self.yXi1bar[mif4,mif2])

    def alphaOlq1(self, mif1,mif2,mif3,mif4):
        return (1/1920 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -5/144 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/48 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -5/144 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/48 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -5/144 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/48 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/144 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,0] * self.yXi1bar[mif2,0] + 1/144 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,1] * self.yXi1bar[mif2,1] + 1/144 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,2] * self.yXi1bar[mif2,2])

    def alphaOlq3(self, mif1,mif2,mif3,mif4):
        return (-1/960 * (self.g2)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/24 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/48 * (self.g2)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,0] * self.yXi1bar[mif2,0] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,1] * self.yXi1bar[mif2,1] + -1/48 * (self.g2)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,2] * self.yXi1bar[mif2,2])

    def alphaOlu(self, mif1,mif2,mif3,mif4):
        return (1/480 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -5/36 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -1/12 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + 1/12 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[0,mif1] * self.yXi1bar[0,mif2] + -5/36 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -1/12 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + 1/12 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[1,mif1] * self.yXi1bar[1,mif2] + -5/36 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + -1/12 * (self.g1)**(2) * self.invepsilonbar * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/12 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yXi1[2,mif1] * self.yXi1bar[2,mif2] + 1/36 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,0] * self.yXi1bar[mif2,0] + 1/36 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,1] * self.yXi1bar[mif2,1] + 1/36 * (self.g1)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yXi1[mif1,2] * self.yXi1bar[mif2,2])

    def alphaOqd1(self, mif1,mif2,mif3,mif4):
        return (1/2880 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -1/48 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif4] * self.ydbar[mif2,mif3])

    def alphaOqd8(self, mif1,mif2,mif3,mif4):
        return -1/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif4] * self.ydbar[mif2,mif3]

    def alphaOqe(self, mif1,mif2,mif3,mif4):
        return 1/960 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOqq1(self, mif1,mif2,mif3,mif4):
        return -1/11520 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOqq3(self, mif1,mif2,mif3,mif4):
        return -1/1920 * (self.g2)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOqu1(self, mif1,mif2,mif3,mif4):
        return (-1/1440 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -1/48 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif4] * self.yubar[mif2,mif3])

    def alphaOqu8(self, mif1,mif2,mif3,mif4):
        return -1/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif4] * self.yubar[mif2,mif3]

    def alphaOquqd1(self, mif1,mif2,mif3,mif4):
        return 1/8 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif3,mif4] * self.yu[mif1,mif2]

    def alphaOquqd8(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOuB(self, mif1,mif2):
        return 0

    def alphaOud1(self, mif1,mif2,mif3,mif4):
        return 1/720 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOud8(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOuG(self, mif1,mif2):
        return 0

    def alphaOuH(self, mif1,mif2):
        return (-7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[0,0] * self.yu[0,mif2] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[0,0] * self.yu[0,mif2] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[0,0] * self.yu[0,mif2] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[0,1] * self.yu[0,mif2] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[0,1] * self.yu[0,mif2] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[0,1] * self.yu[0,mif2] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[0,2] * self.yu[0,mif2] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[0,2] * self.yu[0,mif2] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[0,2] * self.yu[0,mif2] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[1,0] * self.yu[1,mif2] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[1,0] * self.yu[1,mif2] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[1,0] * self.yu[1,mif2] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[1,1] * self.yu[1,mif2] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[1,1] * self.yu[1,mif2] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[1,1] * self.yu[1,mif2] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[1,2] * self.yu[1,mif2] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[1,2] * self.yu[1,mif2] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[1,2] * self.yu[1,mif2] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[2,0] * self.yu[2,mif2] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[2,0] * self.yu[2,mif2] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[2,0] * self.yu[2,mif2] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[2,1] * self.yu[2,mif2] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[2,1] * self.yu[2,mif2] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[2,1] * self.yu[2,mif2] + -7/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[2,2] * self.yu[2,mif2] + -3/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[2,2] * self.yu[2,mif2] + 3/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[2,2] * self.yu[2,mif2] + 2 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.yu[mif1,mif2] + -75/8 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -15/4 * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -205/24 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -2 * self.invepsilonbar * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -5/64 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -61/192 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -3/32 * (self.g1)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -43/96 * (self.g2)**(2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 3 * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 13/32 * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 1/4 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -35/48 * (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -1/2 * (2)**(-1/2) * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -1/960 * (self.g2)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 1/384 * (self.lambdaXi1P)**(2) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 15/4 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.muH)**(2) * (self.MXi1)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 2 * (self.kappaXi1)**(2) * (self.kappaXi1bar)**(2) * (self.MXi1)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 3/32 * (self.g1)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 43/96 * (self.g2)**(2) * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + -1 * self.kappaXi1 * self.kappaXi1bar * self.lam * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + -1/4 * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1 * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 1/2 * (2)**(-1/2) * self.kappaXi1 * self.kappaXi1bar * self.lambdaXi1P * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 5/32 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 5/16 * self.invepsilonbar * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + -5/16 * self.kappaXi1 * self.kappaXi1bar * (self.MXi1)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi1)**(2) * (self.mu)**(-2)) * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2])

    def alphaOuu(self, mif1,mif2,mif3,mif4):
        return -1/720 * (self.g1)**(4) * (self.MXi1)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOuW(self, mif1,mif2):
        return 0
