## Symbols used:
# ydbar
# lambdaXi
# yd
# yl
# ylbar
# g1
# muH
# g2
# invepsilonbar
# kappaXi
# MXi
# mu
# lam
# yubar
# onelooporder
# yu

import sys
import os
import numpy as np

import lsme.numeric.matchingresult as matchingresult

class GranadaXiMatchingResult(matchingresult.GenericMatchingResult):
    def __init__(self, name='Xi'):
        super().__init__(name)
        self.MXi = 1
        self.kappaXi = 1
        self.kappaXibar = 1
        self.lambdaXi = 1
        self.lambdaXibar = 1
        self.nonvanishing = ['alphaO3W', 'alphaOH', 'alphaOHB', 'alphaOHBox', 'alphaOHD', 'alphaOHW', 'alphaOdH', 'alphaOeH', 'alphaOHd', 'alphaOHe', 'alphaOHl1', 'alphaOHl3', 'alphaOHq1', 'alphaOHq3', 'alphaOHu', 'alphaOHud', 'alphaOle', 'alphaOledq', 'alphaOlequ1', 'alphaOll', 'alphaOlq3', 'alphaOqd1', 'alphaOqd8', 'alphaOqq3', 'alphaOqu1', 'alphaOqu8', 'alphaOquqd1', 'alphaOuH']

    def alphaO3G(self, ):
        return 0

    def alphaO3Gt(self, ):
        return 0

    def alphaO3W(self, ):
        return 1/2880 * (self.g2)**(3) * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaO3Wt(self, ):
        return 0

    def alphaOH(self, ):
        return (-2 * (self.kappaXi)**(4) * (self.MXi)**(-6) + 4 * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) + (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) + 31/4 * (self.kappaXi)**(6) * (self.muH)**(2) * (self.MXi)**(-10) * self.onelooporder * (np.pi)**(-2) + 4 * self.invepsilonbar * (self.kappaXi)**(6) * (self.muH)**(2) * (self.MXi)**(-10) * self.onelooporder * (np.pi)**(-2) + 31/8 * (self.kappaXi)**(6) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) + 5/4 * self.invepsilonbar * (self.kappaXi)**(6) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) + -25/2 * (self.kappaXi)**(4) * self.lam * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) + -8 * self.invepsilonbar * (self.kappaXi)**(4) * self.lam * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) + -173/32 * (self.kappaXi)**(4) * self.lambdaXi * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) + -49/16 * self.invepsilonbar * (self.kappaXi)**(4) * self.lambdaXi * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) + 5/64 * (self.g1)**(2) * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) + 23/192 * (self.g2)**(2) * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) + 3/32 * (self.g1)**(2) * self.invepsilonbar * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) + 17/96 * (self.g2)**(2) * self.invepsilonbar * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) + -11 * (self.kappaXi)**(4) * self.lam * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) + -6 * self.invepsilonbar * (self.kappaXi)**(4) * self.lam * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) + -225/32 * (self.kappaXi)**(4) * self.lambdaXi * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) + -55/16 * self.invepsilonbar * (self.kappaXi)**(4) * self.lambdaXi * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) + 1/960 * (self.g2)**(4) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -5/32 * (self.g1)**(2) * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -23/96 * (self.g2)**(2) * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -3/16 * (self.g1)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -17/48 * (self.g2)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + 6 * (self.kappaXi)**(2) * (self.lam)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + 4 * self.invepsilonbar * (self.kappaXi)**(2) * (self.lam)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + 53/8 * (self.kappaXi)**(2) * self.lam * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + 19/4 * self.invepsilonbar * (self.kappaXi)**(2) * self.lam * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + 13/8 * (self.kappaXi)**(2) * (self.lambdaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/480 * (self.g2)**(4) * self.lam * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2) + 1/8 * (self.lambdaXi)**(3) * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2) + -4 * (self.kappaXi)**(6) * (self.muH)**(2) * (self.MXi)**(-10) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + -5/4 * (self.kappaXi)**(6) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 8 * (self.kappaXi)**(4) * self.lam * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 49/16 * (self.kappaXi)**(4) * self.lambdaXi * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + -3/32 * (self.g1)**(2) * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + -17/96 * (self.g2)**(2) * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 6 * (self.kappaXi)**(4) * self.lam * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 55/16 * (self.kappaXi)**(4) * self.lambdaXi * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 3/16 * (self.g1)**(2) * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 17/48 * (self.g2)**(2) * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + -4 * (self.kappaXi)**(2) * (self.lam)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + -19/4 * (self.kappaXi)**(2) * self.lam * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)))

    def alphaOHB(self, ):
        return 1/64 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2)

    def alphaOHBox(self, ):
        return (1/2 * (self.kappaXi)**(2) * (self.MXi)**(-4) + -15/32 * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) + -3/16 * self.invepsilonbar * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) + -19/64 * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) + -1/16 * self.invepsilonbar * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) + -31/384 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -9/128 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -5/64 * (self.g1)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -7/64 * (self.g2)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + 3/8 * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + 1/4 * self.invepsilonbar * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + 7/32 * (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + 1/4 * self.invepsilonbar * (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/1280 * (self.g2)**(4) * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2) + -1/32 * (self.lambdaXi)**(2) * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2) + 3/16 * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 1/16 * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 5/64 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 7/64 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + -1/4 * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + -1/4 * (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)))

    def alphaOHBt(self, ):
        return 0

    def alphaOHD(self, ):
        return (-2 * (self.kappaXi)**(2) * (self.MXi)**(-4) + 15/8 * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) + 3/4 * self.invepsilonbar * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) + 5/16 * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) + -1/8 * self.invepsilonbar * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) + -17/192 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -5/64 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/32 * (self.g1)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -3/32 * (self.g2)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -3/8 * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/4 * self.invepsilonbar * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -1 * (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -1 * self.invepsilonbar * (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -3/4 * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 1/8 * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 1/32 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 3/32 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 1/4 * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)))

    def alphaOHG(self, ):
        return 0

    def alphaOHGt(self, ):
        return 0

    def alphaOHW(self, ):
        return (-1/192 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) + -1/96 * (self.g2)**(2) * self.lambdaXi * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2))

    def alphaOHWB(self, ):
        return 0

    def alphaOHWBt(self, ):
        return 0

    def alphaOHWt(self, ):
        return 0

    def alphaWeinberg(self, mif1,mif2):
        return 0

    def alphaOdB(self, mif1,mif2):
        return 0

    def alphaOdd(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOdG(self, mif1,mif2):
        return 0

    def alphaOdH(self, mif1,mif2):
        return ((self.kappaXi)**(2) * (self.MXi)**(-4) * self.yd[mif1,mif2] + -75/64 * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -15/32 * self.invepsilonbar * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -19/32 * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -1/32 * self.invepsilonbar * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -5/128 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -23/384 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -3/64 * (self.g1)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -17/192 * (self.g2)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 27/32 * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 5/16 * self.invepsilonbar * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 21/32 * (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 1/2 * self.invepsilonbar * (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + -1/1920 * (self.g2)**(4) * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 15/32 * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 1/32 * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 3/64 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 17/192 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + -5/16 * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + -1/2 * (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yu[mif1,2] * self.yubar[2,2])

    def alphaOdW(self, mif1,mif2):
        return 0

    def alphaOeB(self, mif1,mif2):
        return 0

    def alphaOed(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOee(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOeH(self, mif1,mif2):
        return ((self.kappaXi)**(2) * (self.MXi)**(-4) * self.yl[mif1,mif2] + -75/64 * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -15/32 * self.invepsilonbar * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -19/32 * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -1/32 * self.invepsilonbar * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -5/128 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -23/384 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -3/64 * (self.g1)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -17/192 * (self.g2)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 27/32 * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 5/16 * self.invepsilonbar * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 21/32 * (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 1/2 * self.invepsilonbar * (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + -1/1920 * (self.g2)**(4) * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 15/32 * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 1/32 * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 3/64 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 17/192 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + -5/16 * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + -1/2 * (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2])

    def alphaOeu(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOeW(self, mif1,mif2):
        return 0

    def alphaOHd(self, mif1,mif2):
        return (17/1152 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/192 * (self.g1)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/192 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + -15/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.ydbar[0,mif1] + -3/64 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.ydbar[0,mif1] + 3/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.ydbar[0,mif1] + -15/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.ydbar[1,mif1] + -3/64 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.ydbar[1,mif1] + 3/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.ydbar[1,mif1] + -15/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.ydbar[2,mif1] + -3/64 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.ydbar[2,mif1] + 3/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.ydbar[2,mif1])

    def alphaOHe(self, mif1,mif2):
        return (17/384 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/64 * (self.g1)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/64 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + -15/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[0,mif1] + -3/64 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[0,mif2] * self.ylbar[0,mif1] + 3/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.ylbar[0,mif1] + -15/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[1,mif1] + -3/64 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[1,mif2] * self.ylbar[1,mif1] + 3/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.ylbar[1,mif1] + -15/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[2,mif1] + -3/64 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[2,mif2] * self.ylbar[2,mif1] + 3/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.ylbar[2,mif1])

    def alphaOHl1(self, mif1,mif2):
        return (17/768 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/128 * (self.g1)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/128 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 15/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,0] * self.ylbar[mif2,0] + 3/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,0] * self.ylbar[mif2,0] + -3/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[mif1,0] * self.ylbar[mif2,0] + 15/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,1] * self.ylbar[mif2,1] + 3/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,1] * self.ylbar[mif2,1] + -3/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[mif1,1] * self.ylbar[mif2,1] + 15/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,2] * self.ylbar[mif2,2] + 3/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,2] * self.ylbar[mif2,2] + -3/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[mif1,2] * self.ylbar[mif2,2])

    def alphaOHl3(self, mif1,mif2):
        return (7/768 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/384 * (self.g2)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/1920 * (self.g2)**(4) * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/384 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + -5/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,0] * self.ylbar[mif2,0] + -1/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,0] * self.ylbar[mif2,0] + 1/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[mif1,0] * self.ylbar[mif2,0] + -5/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,1] * self.ylbar[mif2,1] + -1/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,1] * self.ylbar[mif2,1] + 1/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[mif1,1] * self.ylbar[mif2,1] + -5/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,2] * self.ylbar[mif2,2] + -1/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,2] * self.ylbar[mif2,2] + 1/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yl[mif1,2] * self.ylbar[mif2,2])

    def alphaOHq1(self, mif1,mif2):
        return (-17/2304 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/384 * (self.g1)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/384 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 15/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] + 3/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] + -3/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[mif2,0] + 15/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] + 3/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] + -3/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[mif2,1] + 15/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] + 3/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] + -3/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[mif2,2] + -15/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,0] * self.yubar[mif2,0] + -3/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,0] * self.yubar[mif2,0] + 3/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[mif1,0] * self.yubar[mif2,0] + -15/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,1] * self.yubar[mif2,1] + -3/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,1] * self.yubar[mif2,1] + 3/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[mif1,1] * self.yubar[mif2,1] + -15/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,2] * self.yubar[mif2,2] + -3/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,2] * self.yubar[mif2,2] + 3/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[mif1,2] * self.yubar[mif2,2])

    def alphaOHq3(self, mif1,mif2):
        return (7/768 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/384 * (self.g2)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/1920 * (self.g2)**(4) * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/384 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + -5/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] + -1/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] + 1/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[mif2,0] + -5/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] + -1/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] + 1/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[mif2,1] + -5/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] + -1/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] + 1/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[mif2,2] + -5/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,0] * self.yubar[mif2,0] + -1/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,0] * self.yubar[mif2,0] + 1/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[mif1,0] * self.yubar[mif2,0] + -5/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,1] * self.yubar[mif2,1] + -1/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,1] * self.yubar[mif2,1] + 1/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[mif1,1] * self.yubar[mif2,1] + -5/256 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,2] * self.yubar[mif2,2] + -1/128 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,2] * self.yubar[mif2,2] + 1/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[mif1,2] * self.yubar[mif2,2])

    def alphaOHu(self, mif1,mif2):
        return (-17/576 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/96 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) + 15/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yubar[0,mif1] + 3/64 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yubar[0,mif1] + -3/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[0,mif2] * self.yubar[0,mif1] + 15/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yubar[1,mif1] + 3/64 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yubar[1,mif1] + -3/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[1,mif2] * self.yubar[1,mif1] + 15/128 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yubar[2,mif1] + 3/64 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yubar[2,mif1] + -3/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[2,mif2] * self.yubar[2,mif1])

    def alphaOHud(self, mif1,mif2):
        return (15/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yubar[0,mif1] + 3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yubar[0,mif1] + -3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[0,mif2] * self.yubar[0,mif1] + 15/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yubar[1,mif1] + 3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yubar[1,mif1] + -3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[1,mif2] * self.yubar[1,mif1] + 15/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yubar[2,mif1] + 3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yubar[2,mif1] + -3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[2,mif2] * self.yubar[2,mif1])

    def alphaOld(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOle(self, mif1,mif2,mif3,mif4):
        return -1/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif4] * self.ylbar[mif2,mif3]

    def alphaOledq(self, mif1,mif2,mif3,mif4):
        return 1/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.ydbar[mif4,mif3] * self.yl[mif1,mif2]

    def alphaOlequ1(self, mif1,mif2,mif3,mif4):
        return -1/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] * self.yu[mif3,mif4]

    def alphaOlequ3(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOll(self, mif1,mif2,mif3,mif4):
        return (-1/1920 * (self.g2)**(4) * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + 1/3840 * (self.g2)**(4) * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4))

    def alphaOlq1(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOlq3(self, mif1,mif2,mif3,mif4):
        return -1/1920 * (self.g2)**(4) * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOlu(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOqd1(self, mif1,mif2,mif3,mif4):
        return -1/192 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif4] * self.ydbar[mif2,mif3]

    def alphaOqd8(self, mif1,mif2,mif3,mif4):
        return -1/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif4] * self.ydbar[mif2,mif3]

    def alphaOqe(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOqq1(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOqq3(self, mif1,mif2,mif3,mif4):
        return -1/3840 * (self.g2)**(4) * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOqu1(self, mif1,mif2,mif3,mif4):
        return -1/192 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif4] * self.yubar[mif2,mif3]

    def alphaOqu8(self, mif1,mif2,mif3,mif4):
        return -1/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif4] * self.yubar[mif2,mif3]

    def alphaOquqd1(self, mif1,mif2,mif3,mif4):
        return 1/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif3,mif4] * self.yu[mif1,mif2]

    def alphaOquqd8(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOuB(self, mif1,mif2):
        return 0

    def alphaOud1(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOud8(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOuG(self, mif1,mif2):
        return 0

    def alphaOuH(self, mif1,mif2):
        return (-7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[0,0] * self.yu[0,mif2] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[0,0] * self.yu[0,mif2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[0,0] * self.yu[0,mif2] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[0,1] * self.yu[0,mif2] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[0,1] * self.yu[0,mif2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[0,1] * self.yu[0,mif2] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[0,2] * self.yu[0,mif2] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[0,2] * self.yu[0,mif2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[0,2] * self.yu[0,mif2] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[1,0] * self.yu[1,mif2] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[1,0] * self.yu[1,mif2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[1,0] * self.yu[1,mif2] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[1,1] * self.yu[1,mif2] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[1,1] * self.yu[1,mif2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[1,1] * self.yu[1,mif2] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[1,2] * self.yu[1,mif2] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[1,2] * self.yu[1,mif2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[1,2] * self.yu[1,mif2] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[2,0] * self.yu[2,mif2] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[2,0] * self.yu[2,mif2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[2,0] * self.yu[2,mif2] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[2,1] * self.yu[2,mif2] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[2,1] * self.yu[2,mif2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[2,1] * self.yu[2,mif2] + -7/64 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[2,2] * self.yu[2,mif2] + -3/32 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[2,2] * self.yu[2,mif2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[2,2] * self.yu[2,mif2] + (self.kappaXi)**(2) * (self.MXi)**(-4) * self.yu[mif1,mif2] + -75/64 * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -15/32 * self.invepsilonbar * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -19/32 * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -1/32 * self.invepsilonbar * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -5/128 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -23/384 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -3/64 * (self.g1)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -17/192 * (self.g2)**(2) * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 27/32 * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 5/16 * self.invepsilonbar * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 21/32 * (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 1/2 * self.invepsilonbar * (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + -1/1920 * (self.g2)**(4) * (self.MXi)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 15/32 * (self.kappaXi)**(4) * (self.muH)**(2) * (self.MXi)**(-8) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 1/32 * (self.kappaXi)**(4) * (self.MXi)**(-6) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 3/64 * (self.g1)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 17/192 * (self.g2)**(2) * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + -5/16 * (self.kappaXi)**(2) * self.lam * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + -1/2 * (self.kappaXi)**(2) * self.lambdaXi * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 3/32 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 1/8 * self.invepsilonbar * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + -1/8 * (self.kappaXi)**(2) * (self.MXi)**(-4) * self.onelooporder * (np.pi)**(-2) * np.log((self.MXi)**(2) * (self.mu)**(-2)) * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2])

    def alphaOuu(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOuW(self, mif1,mif2):
        return 0
