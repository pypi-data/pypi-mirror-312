## Symbols used:
# ydbar
# MSigma
# yd
# lambdaSigma
# yl
# ylbar
# muH
# g1
# lambdaSigmabar
# g2
# invepsilonbar
# mu
# lam
# yubar
# onelooporder
# yu

import sys
import os
import numpy as np

import lsme.numeric.matchingresult as matchingresult

class GranadaSigmaMatchingResult(matchingresult.GenericMatchingResult):
    def __init__(self, name='Sigma'):
        super().__init__(name)
        self.MSigma = 1
        self.lambdaSigma = np.ones((3))
        self.lambdaSigmabar = np.ones((3))
        self.nonvanishing = ['alphaO3W', 'alphaOH', 'alphaOHB', 'alphaOHBox', 'alphaOHD', 'alphaOHW', 'alphaOHWB', 'alphaWeinberg', 'alphaOdH', 'alphaOeB', 'alphaOeH', 'alphaOeW', 'alphaOHd', 'alphaOHe', 'alphaOHl1', 'alphaOHl3', 'alphaOHq1', 'alphaOHq3', 'alphaOHu', 'alphaOld', 'alphaOle', 'alphaOledq', 'alphaOlequ1', 'alphaOll', 'alphaOlq1', 'alphaOlq3', 'alphaOlu', 'alphaOqd1', 'alphaOqd8', 'alphaOqq3', 'alphaOqu1', 'alphaOqu8', 'alphaOquqd1', 'alphaOuH']

    def alphaO3G(self, ):
        return 0

    def alphaO3Gt(self, ):
        return 0

    def alphaO3W(self, ):
        return -1/1440 * (self.g2)**(3) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaO3Wt(self, ):
        return 0

    def alphaOH(self, ):
        return (-1/60 * (self.g2)**(4) * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) + 7/192 * (self.g2)**(2) * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 1/96 * (self.g2)**(2) * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 1/16 * (self.lam)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + -13/256 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) + -1/128 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(3) * (self.lambdaSigmabar[0])**(3) + 7/192 * (self.g2)**(2) * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 1/96 * (self.g2)**(2) * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 1/16 * (self.lam)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + -13/128 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] + -1/64 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] + 3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * self.lambdaSigma[1] * (self.lambdaSigmabar[0])**(2) * self.lambdaSigmabar[1] + -13/256 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) + -1/128 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) + 3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * (self.lambdaSigma[1])**(2) * self.lambdaSigmabar[0] * (self.lambdaSigmabar[1])**(2) + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(3) * (self.lambdaSigmabar[1])**(3) + 7/192 * (self.g2)**(2) * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + 1/96 * (self.g2)**(2) * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + 1/16 * (self.lam)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + -13/128 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] + -1/64 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] + 3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * self.lambdaSigma[2] * (self.lambdaSigmabar[0])**(2) * self.lambdaSigmabar[2] + -13/128 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] + -1/64 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] + 3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] + 3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * self.lambdaSigma[2] * (self.lambdaSigmabar[1])**(2) * self.lambdaSigmabar[2] + -13/256 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) + -1/128 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) + 3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * (self.lambdaSigma[2])**(2) * self.lambdaSigmabar[0] * (self.lambdaSigmabar[2])**(2) + 3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * (self.lambdaSigma[2])**(2) * self.lambdaSigmabar[1] * (self.lambdaSigmabar[2])**(2) + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(3) * (self.lambdaSigmabar[2])**(3) + -1/96 * (self.g2)**(2) * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/128 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/96 * (self.g2)**(2) * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/128 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/96 * (self.g2)**(2) * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/128 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.ylbar[0,0] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.ylbar[0,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * self.yl[0,0] * self.ylbar[0,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.ylbar[0,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.ylbar[0,0] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[0,0] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.ylbar[0,0] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.ylbar[0,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * (self.lambdaSigmabar[0])**(2) * self.yl[1,0] * self.ylbar[0,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[1,0] * self.ylbar[0,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[1,0] * self.ylbar[0,0] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[0,0] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.ylbar[0,0] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.ylbar[0,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * (self.lambdaSigmabar[0])**(2) * self.yl[2,0] * self.ylbar[0,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[2,0] * self.ylbar[0,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[2,0] * self.ylbar[0,0] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[0,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * (self.yl[0,0])**(2) * (self.ylbar[0,0])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * (self.yl[0,0])**(2) * (self.ylbar[0,0])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[0,0])**(2) * (self.ylbar[0,0])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[1,0] * (self.ylbar[0,0])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[1,0] * (self.ylbar[0,0])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,0] * (self.ylbar[0,0])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[2,0] * (self.ylbar[0,0])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[2,0] * (self.ylbar[0,0])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,0] * (self.ylbar[0,0])**(2) + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.ylbar[0,1] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.ylbar[0,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * self.yl[0,1] * self.ylbar[0,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.ylbar[0,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.ylbar[0,1] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[0,1] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.ylbar[0,1] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.ylbar[0,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * (self.lambdaSigmabar[0])**(2) * self.yl[1,1] * self.ylbar[0,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[1,1] * self.ylbar[0,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[1,1] * self.ylbar[0,1] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[0,1] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,1] * self.ylbar[0,1] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,1] * self.ylbar[0,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * (self.lambdaSigmabar[0])**(2) * self.yl[2,1] * self.ylbar[0,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[2,1] * self.ylbar[0,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[2,1] * self.ylbar[0,1] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[0,1] + -1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[0,1] + -1/8 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[0,1] + 1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[0,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[0,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[0,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[0,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,0] * self.ylbar[0,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,0] * self.ylbar[0,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,0] * self.ylbar[0,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[0,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[0,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[0,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,0] * self.ylbar[0,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,0] * self.ylbar[0,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,0] * self.ylbar[0,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * (self.yl[0,1])**(2) * (self.ylbar[0,1])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * (self.yl[0,1])**(2) * (self.ylbar[0,1])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[0,1])**(2) * (self.ylbar[0,1])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[1,1] * (self.ylbar[0,1])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[1,1] * (self.ylbar[0,1])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,1] * (self.ylbar[0,1])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[2,1] * (self.ylbar[0,1])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[2,1] * (self.ylbar[0,1])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,1] * (self.ylbar[0,1])**(2) + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.ylbar[0,2] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.ylbar[0,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * self.yl[0,2] * self.ylbar[0,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.ylbar[0,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.ylbar[0,2] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[0,2] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.ylbar[0,2] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.ylbar[0,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * (self.lambdaSigmabar[0])**(2) * self.yl[1,2] * self.ylbar[0,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[1,2] * self.ylbar[0,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[1,2] * self.ylbar[0,2] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[0,2] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,2] * self.ylbar[0,2] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,2] * self.ylbar[0,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * (self.lambdaSigmabar[0])**(2) * self.yl[2,2] * self.ylbar[0,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[2,2] * self.ylbar[0,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[2,2] * self.ylbar[0,2] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[0,2] + -1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[0,2] + -1/8 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[0,2] + 1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[0,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[0,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[0,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[0,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,0] * self.ylbar[0,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,0] * self.ylbar[0,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,0] * self.ylbar[0,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[0,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[0,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[0,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,0] * self.ylbar[0,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,0] * self.ylbar[0,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,0] * self.ylbar[0,2] + -1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[0,2] + -1/8 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[0,2] + 1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[0,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[0,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[0,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[0,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,1] * self.ylbar[0,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,1] * self.ylbar[0,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,1] * self.ylbar[0,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[0,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[0,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[0,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,1] * self.ylbar[0,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,1] * self.ylbar[0,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,1] * self.ylbar[0,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * (self.yl[0,2])**(2) * (self.ylbar[0,2])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * (self.yl[0,2])**(2) * (self.ylbar[0,2])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[0,2])**(2) * (self.ylbar[0,2])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[1,2] * (self.ylbar[0,2])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[1,2] * (self.ylbar[0,2])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,2] * (self.ylbar[0,2])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[2,2] * (self.ylbar[0,2])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[2,2] * (self.ylbar[0,2])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,2] * (self.ylbar[0,2])**(2) + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.ylbar[1,0] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.ylbar[1,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.ylbar[1,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * (self.lambdaSigmabar[1])**(2) * self.yl[0,0] * self.ylbar[1,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[0,0] * self.ylbar[1,0] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[1,0] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.ylbar[1,0] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.ylbar[1,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[1,0] * self.ylbar[1,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * self.yl[1,0] * self.ylbar[1,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.ylbar[1,0] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[1,0] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.ylbar[1,0] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.ylbar[1,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[2,0] * self.ylbar[1,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * (self.lambdaSigmabar[1])**(2) * self.yl[2,0] * self.ylbar[1,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[2,0] * self.ylbar[1,0] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * (self.yl[0,0])**(2) * self.ylbar[0,0] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * (self.yl[0,0])**(2) * self.ylbar[0,0] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[0,0])**(2) * self.ylbar[0,0] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * (self.yl[1,0])**(2) * self.ylbar[0,0] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * (self.yl[1,0])**(2) * self.ylbar[0,0] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[1,0])**(2) * self.ylbar[0,0] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[2,0] * self.ylbar[0,1] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[2,0] * self.ylbar[0,1] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,0] * self.ylbar[0,1] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,2] * self.yl[2,0] * self.ylbar[0,2] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,2] * self.yl[2,0] * self.ylbar[0,2] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,0] * self.ylbar[0,2] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[1,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[1,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[1,0] * (self.ylbar[1,0])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[1,0] * (self.ylbar[1,0])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,0] * (self.ylbar[1,0])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * (self.yl[1,0])**(2) * (self.ylbar[1,0])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * (self.yl[1,0])**(2) * (self.ylbar[1,0])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[1,0])**(2) * (self.ylbar[1,0])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[2,0] * (self.ylbar[1,0])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[2,0] * (self.ylbar[1,0])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,0] * (self.ylbar[1,0])**(2) + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.ylbar[1,1] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.ylbar[1,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.ylbar[1,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * (self.lambdaSigmabar[1])**(2) * self.yl[0,1] * self.ylbar[1,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[0,1] * self.ylbar[1,1] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[1,1] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.ylbar[1,1] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.ylbar[1,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[1,1] * self.ylbar[1,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * self.yl[1,1] * self.ylbar[1,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.ylbar[1,1] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[1,1] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,1] * self.ylbar[1,1] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,1] * self.ylbar[1,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[2,1] * self.ylbar[1,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * (self.lambdaSigmabar[1])**(2) * self.yl[2,1] * self.ylbar[1,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[2,1] * self.ylbar[1,1] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[1,1] * self.ylbar[0,0] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[1,1] * self.ylbar[0,0] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[1,1] * self.ylbar[0,0] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[2,1] * self.ylbar[0,0] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[2,1] * self.ylbar[0,0] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,1] * self.ylbar[0,0] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * (self.yl[0,1])**(2) * self.ylbar[0,1] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * (self.yl[0,1])**(2) * self.ylbar[0,1] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[0,1])**(2) * self.ylbar[0,1] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * (self.yl[1,1])**(2) * self.ylbar[0,1] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * (self.yl[1,1])**(2) * self.ylbar[0,1] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[1,1])**(2) * self.ylbar[0,1] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,2] * self.yl[2,1] * self.ylbar[0,2] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,2] * self.yl[2,1] * self.ylbar[0,2] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,1] * self.ylbar[0,2] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[1,1] + -1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[1,1] + -1/8 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[1,1] + 1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[2,1] * self.ylbar[1,0] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[2,1] * self.ylbar[1,0] * self.ylbar[1,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,1] * self.ylbar[1,0] * self.ylbar[1,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[1,1] * (self.ylbar[1,1])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[1,1] * (self.ylbar[1,1])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,1] * (self.ylbar[1,1])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * (self.yl[1,1])**(2) * (self.ylbar[1,1])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * (self.yl[1,1])**(2) * (self.ylbar[1,1])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[1,1])**(2) * (self.ylbar[1,1])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[2,1] * (self.ylbar[1,1])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[2,1] * (self.ylbar[1,1])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,1] * (self.ylbar[1,1])**(2) + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.ylbar[1,2] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.ylbar[1,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.ylbar[1,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * (self.lambdaSigmabar[1])**(2) * self.yl[0,2] * self.ylbar[1,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[0,2] * self.ylbar[1,2] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[1,2] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.ylbar[1,2] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.ylbar[1,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[1,2] * self.ylbar[1,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * self.yl[1,2] * self.ylbar[1,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.ylbar[1,2] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[1,2] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,2] * self.ylbar[1,2] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,2] * self.ylbar[1,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[2,2] * self.ylbar[1,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * (self.lambdaSigmabar[1])**(2) * self.yl[2,2] * self.ylbar[1,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[2,2] * self.ylbar[1,2] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[1,2] * self.ylbar[0,0] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[1,2] * self.ylbar[0,0] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[1,2] * self.ylbar[0,0] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[2,2] * self.ylbar[0,0] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[2,2] * self.ylbar[0,0] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,2] * self.ylbar[0,0] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[1,2] * self.ylbar[0,1] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[1,2] * self.ylbar[0,1] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[1,2] * self.ylbar[0,1] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[2,2] * self.ylbar[0,1] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[2,2] * self.ylbar[0,1] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,2] * self.ylbar[0,1] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * (self.yl[0,2])**(2) * self.ylbar[0,2] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * (self.yl[0,2])**(2) * self.ylbar[0,2] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[0,2])**(2) * self.ylbar[0,2] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * (self.yl[1,2])**(2) * self.ylbar[0,2] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * (self.yl[1,2])**(2) * self.ylbar[0,2] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[1,2])**(2) * self.ylbar[0,2] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[1,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[1,2] + -1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[1,2] + -1/8 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[1,2] + 1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,2] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,2] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[2,2] * self.ylbar[1,0] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[2,2] * self.ylbar[1,0] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,2] * self.ylbar[1,0] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[1,2] + -1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[1,2] + -1/8 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[1,2] + 1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,2] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,2] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[2,2] * self.ylbar[1,1] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[2,2] * self.ylbar[1,1] * self.ylbar[1,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,2] * self.ylbar[1,1] * self.ylbar[1,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[1,2] * (self.ylbar[1,2])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[1,2] * (self.ylbar[1,2])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,2] * (self.ylbar[1,2])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * (self.yl[1,2])**(2) * (self.ylbar[1,2])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * (self.yl[1,2])**(2) * (self.ylbar[1,2])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[1,2])**(2) * (self.ylbar[1,2])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,2] * self.yl[2,2] * (self.ylbar[1,2])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[1,2] * self.yl[2,2] * (self.ylbar[1,2])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,2] * (self.ylbar[1,2])**(2) + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.ylbar[2,0] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.ylbar[2,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.ylbar[2,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[0,0] * self.ylbar[2,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * (self.lambdaSigmabar[2])**(2) * self.yl[0,0] * self.ylbar[2,0] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[2,0] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.ylbar[2,0] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.ylbar[2,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[1,0] * self.ylbar[2,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.ylbar[2,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * (self.lambdaSigmabar[2])**(2) * self.yl[1,0] * self.ylbar[2,0] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[2,0] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,0] * self.ylbar[2,0] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,0] * self.ylbar[2,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[2,0] * self.ylbar[2,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[2,0] * self.ylbar[2,0] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * self.yl[2,0] * self.ylbar[2,0] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * (self.yl[0,0])**(2) * self.ylbar[0,0] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * (self.yl[0,0])**(2) * self.ylbar[0,0] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[0,0])**(2) * self.ylbar[0,0] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * (self.yl[2,0])**(2) * self.ylbar[0,0] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * (self.yl[2,0])**(2) * self.ylbar[0,0] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[2,0])**(2) * self.ylbar[0,0] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * (self.yl[1,0])**(2) * self.ylbar[1,0] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * (self.yl[1,0])**(2) * self.ylbar[1,0] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[1,0])**(2) * self.ylbar[1,0] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * (self.yl[2,0])**(2) * self.ylbar[1,0] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * (self.yl[2,0])**(2) * self.ylbar[1,0] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[2,0])**(2) * self.ylbar[1,0] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[1,0] * self.ylbar[1,1] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[1,0] * self.ylbar[1,1] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,0] * self.ylbar[1,1] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[1,0] * self.ylbar[1,2] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[1,0] * self.ylbar[1,2] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,0] * self.ylbar[1,2] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,2] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,2] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,2] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[2,0] * (self.ylbar[2,0])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[2,0] * (self.ylbar[2,0])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,0] * (self.ylbar[2,0])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[2,0] * (self.ylbar[2,0])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[2,0] * (self.ylbar[2,0])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,0] * (self.ylbar[2,0])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * (self.yl[2,0])**(2) * (self.ylbar[2,0])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * (self.yl[2,0])**(2) * (self.ylbar[2,0])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[2,0])**(2) * (self.ylbar[2,0])**(2) + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.ylbar[2,1] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.ylbar[2,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.ylbar[2,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[0,1] * self.ylbar[2,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * (self.lambdaSigmabar[2])**(2) * self.yl[0,1] * self.ylbar[2,1] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[2,1] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.ylbar[2,1] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.ylbar[2,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[1,1] * self.ylbar[2,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.ylbar[2,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * (self.lambdaSigmabar[2])**(2) * self.yl[1,1] * self.ylbar[2,1] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[2,1] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,1] * self.ylbar[2,1] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,1] * self.ylbar[2,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[2,1] * self.ylbar[2,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[2,1] * self.ylbar[2,1] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * self.yl[2,1] * self.ylbar[2,1] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.yl[2,1] * self.ylbar[0,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.yl[2,1] * self.ylbar[0,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.yl[2,1] * self.ylbar[0,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * (self.yl[0,1])**(2) * self.ylbar[0,1] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * (self.yl[0,1])**(2) * self.ylbar[0,1] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[0,1])**(2) * self.ylbar[0,1] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * (self.yl[2,1])**(2) * self.ylbar[0,1] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * (self.yl[2,1])**(2) * self.ylbar[0,1] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[2,1])**(2) * self.ylbar[0,1] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.yl[2,1] * self.ylbar[1,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.yl[2,1] * self.ylbar[1,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.yl[2,1] * self.ylbar[1,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * (self.yl[1,1])**(2) * self.ylbar[1,1] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * (self.yl[1,1])**(2) * self.ylbar[1,1] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[1,1])**(2) * self.ylbar[1,1] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * (self.yl[2,1])**(2) * self.ylbar[1,1] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * (self.yl[2,1])**(2) * self.ylbar[1,1] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[2,1])**(2) * self.ylbar[1,1] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[1,1] * self.ylbar[1,2] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[1,1] * self.ylbar[1,2] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,1] * self.ylbar[1,2] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,2] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,2] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,2] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[2,1] * self.ylbar[2,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[2,1] * self.ylbar[2,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,1] * self.ylbar[2,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[2,1] * self.ylbar[2,0] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[2,1] * self.ylbar[2,0] * self.ylbar[2,1] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,1] * self.ylbar[2,0] * self.ylbar[2,1] + -1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,0] * self.yl[2,1] * self.ylbar[2,0] * self.ylbar[2,1] + -1/8 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,0] * self.yl[2,1] * self.ylbar[2,0] * self.ylbar[2,1] + 1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.yl[2,1] * self.ylbar[2,0] * self.ylbar[2,1] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[2,1] * (self.ylbar[2,1])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[2,1] * (self.ylbar[2,1])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,1] * (self.ylbar[2,1])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[2,1] * (self.ylbar[2,1])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[2,1] * (self.ylbar[2,1])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,1] * (self.ylbar[2,1])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * (self.yl[2,1])**(2) * (self.ylbar[2,1])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * (self.yl[2,1])**(2) * (self.ylbar[2,1])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[2,1])**(2) * (self.ylbar[2,1])**(2) + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.ylbar[2,2] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.ylbar[2,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.ylbar[2,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[0,2] * self.ylbar[2,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * (self.lambdaSigmabar[2])**(2) * self.yl[0,2] * self.ylbar[2,2] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[2,2] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.ylbar[2,2] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.ylbar[2,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[1,2] * self.ylbar[2,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.ylbar[2,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * (self.lambdaSigmabar[2])**(2) * self.yl[1,2] * self.ylbar[2,2] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[2,2] + -7/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,2] * self.ylbar[2,2] + 1/32 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,2] * self.ylbar[2,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[2,2] * self.ylbar[2,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[2,2] * self.ylbar[2,2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * self.yl[2,2] * self.ylbar[2,2] + -1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.yl[2,2] * self.ylbar[0,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.yl[2,2] * self.ylbar[0,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.yl[2,2] * self.ylbar[0,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,1] * self.yl[2,2] * self.ylbar[0,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,1] * self.yl[2,2] * self.ylbar[0,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.yl[2,2] * self.ylbar[0,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * (self.yl[0,2])**(2) * self.ylbar[0,2] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * (self.yl[0,2])**(2) * self.ylbar[0,2] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[0,2])**(2) * self.ylbar[0,2] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * (self.yl[2,2])**(2) * self.ylbar[0,2] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * (self.yl[2,2])**(2) * self.ylbar[0,2] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[2,2])**(2) * self.ylbar[0,2] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,2] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,2] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.yl[2,2] * self.ylbar[1,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.yl[2,2] * self.ylbar[1,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.yl[2,2] * self.ylbar[1,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,2] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,2] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,1] * self.yl[2,2] * self.ylbar[1,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,1] * self.yl[2,2] * self.ylbar[1,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.yl[2,2] * self.ylbar[1,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[1,2] * self.ylbar[1,2] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[1,2] * self.ylbar[1,2] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,2] * self.ylbar[1,2] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * (self.yl[1,2])**(2) * self.ylbar[1,2] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * (self.yl[1,2])**(2) * self.ylbar[1,2] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[1,2])**(2) * self.ylbar[1,2] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,2] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[1,2] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * (self.yl[2,2])**(2) * self.ylbar[1,2] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * (self.yl[2,2])**(2) * self.ylbar[1,2] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[2,2])**(2) * self.ylbar[1,2] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[2,2] * self.ylbar[2,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[2,2] * self.ylbar[2,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,2] * self.ylbar[2,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[2,2] * self.ylbar[2,0] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[2,2] * self.ylbar[2,0] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,2] * self.ylbar[2,0] * self.ylbar[2,2] + -1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,0] * self.yl[2,2] * self.ylbar[2,0] * self.ylbar[2,2] + -1/8 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,0] * self.yl[2,2] * self.ylbar[2,0] * self.ylbar[2,2] + 1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.yl[2,2] * self.ylbar[2,0] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[2,1] * self.ylbar[2,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[2,1] * self.ylbar[2,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,1] * self.ylbar[2,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.yl[2,1] * self.ylbar[2,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.yl[2,1] * self.ylbar[2,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,1] * self.ylbar[2,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[2,2] * self.ylbar[2,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[2,2] * self.ylbar[2,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,2] * self.ylbar[2,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[2,2] * self.ylbar[2,1] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[2,2] * self.ylbar[2,1] * self.ylbar[2,2] + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,2] * self.ylbar[2,1] * self.ylbar[2,2] + -1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,1] * self.yl[2,2] * self.ylbar[2,1] * self.ylbar[2,2] + -1/8 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,1] * self.yl[2,2] * self.ylbar[2,1] * self.ylbar[2,2] + 1/8 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.yl[2,2] * self.ylbar[2,1] * self.ylbar[2,2] + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[2,2] * (self.ylbar[2,2])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[2,2] * (self.ylbar[2,2])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,2] * (self.ylbar[2,2])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.yl[2,2] * (self.ylbar[2,2])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.yl[2,2] * (self.ylbar[2,2])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,2] * (self.ylbar[2,2])**(2) + -1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * (self.yl[2,2])**(2) * (self.ylbar[2,2])**(2) + -1/16 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * (self.yl[2,2])**(2) * (self.ylbar[2,2])**(2) + 1/16 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * (self.yl[2,2])**(2) * (self.ylbar[2,2])**(2))

    def alphaOHB(self, ):
        return (1/512 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 1/512 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 1/512 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2])

    def alphaOHBox(self, ):
        return (-1/160 * (self.g2)**(4) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) + -5/1536 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 7/512 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + -1/256 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 1/256 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + -11/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) + -5/1536 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 7/512 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + -1/256 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 1/256 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + -11/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] + -11/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) + -5/1536 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + 7/512 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + -1/256 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + 1/256 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + -11/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] + -11/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] + -11/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) + 1/256 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/256 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/256 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/256 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/256 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/256 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.ylbar[0,0] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.ylbar[0,0] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[0,0] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.ylbar[0,0] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.ylbar[0,0] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[0,0] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.ylbar[0,0] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.ylbar[0,0] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[0,0] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.ylbar[0,1] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.ylbar[0,1] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[0,1] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.ylbar[0,1] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.ylbar[0,1] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[0,1] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,1] * self.ylbar[0,1] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,1] * self.ylbar[0,1] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[0,1] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.ylbar[0,2] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.ylbar[0,2] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[0,2] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.ylbar[0,2] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.ylbar[0,2] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[0,2] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,2] * self.ylbar[0,2] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,2] * self.ylbar[0,2] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[0,2] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.ylbar[1,0] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.ylbar[1,0] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[1,0] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.ylbar[1,0] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.ylbar[1,0] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[1,0] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.ylbar[1,0] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.ylbar[1,0] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[1,0] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.ylbar[1,1] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.ylbar[1,1] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[1,1] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.ylbar[1,1] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.ylbar[1,1] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[1,1] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,1] * self.ylbar[1,1] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,1] * self.ylbar[1,1] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[1,1] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.ylbar[1,2] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.ylbar[1,2] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[1,2] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.ylbar[1,2] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.ylbar[1,2] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[1,2] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,2] * self.ylbar[1,2] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,2] * self.ylbar[1,2] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[1,2] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.ylbar[2,0] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.ylbar[2,0] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[2,0] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.ylbar[2,0] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.ylbar[2,0] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[2,0] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,0] * self.ylbar[2,0] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,0] * self.ylbar[2,0] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[2,0] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.ylbar[2,1] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.ylbar[2,1] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[2,1] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.ylbar[2,1] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.ylbar[2,1] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[2,1] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,1] * self.ylbar[2,1] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,1] * self.ylbar[2,1] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[2,1] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.ylbar[2,2] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.ylbar[2,2] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[2,2] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.ylbar[2,2] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.ylbar[2,2] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[2,2] + -11/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,2] * self.ylbar[2,2] + -3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,2] * self.ylbar[2,2] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[2,2])

    def alphaOHBt(self, ):
        return 0

    def alphaOHD(self, ):
        return (-5/384 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + -1/64 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + -9/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) + -5/384 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + -1/64 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + -9/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] + -1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] + -9/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) + -5/384 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + -1/64 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + -9/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] + -1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] + -9/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] + -1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] + -9/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) + 1/64 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/64 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/64 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.ylbar[0,0] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.ylbar[0,0] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[0,0] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.ylbar[0,0] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.ylbar[0,0] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[0,0] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.ylbar[0,0] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.ylbar[0,0] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[0,0] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.ylbar[0,1] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.ylbar[0,1] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[0,1] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.ylbar[0,1] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.ylbar[0,1] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[0,1] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,1] * self.ylbar[0,1] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,1] * self.ylbar[0,1] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[0,1] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.ylbar[0,2] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.ylbar[0,2] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[0,2] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.ylbar[0,2] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.ylbar[0,2] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[0,2] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,2] * self.ylbar[0,2] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,2] * self.ylbar[0,2] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[0,2] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.ylbar[1,0] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.ylbar[1,0] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[1,0] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.ylbar[1,0] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.ylbar[1,0] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[1,0] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.ylbar[1,0] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.ylbar[1,0] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[1,0] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.ylbar[1,1] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.ylbar[1,1] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[1,1] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.ylbar[1,1] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.ylbar[1,1] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[1,1] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,1] * self.ylbar[1,1] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,1] * self.ylbar[1,1] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[1,1] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.ylbar[1,2] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.ylbar[1,2] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[1,2] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.ylbar[1,2] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.ylbar[1,2] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[1,2] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,2] * self.ylbar[1,2] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,2] * self.ylbar[1,2] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[1,2] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.ylbar[2,0] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.ylbar[2,0] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[2,0] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.ylbar[2,0] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.ylbar[2,0] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[2,0] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,0] * self.ylbar[2,0] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,0] * self.ylbar[2,0] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[2,0] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.ylbar[2,1] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.ylbar[2,1] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[2,1] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.ylbar[2,1] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.ylbar[2,1] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[2,1] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,1] * self.ylbar[2,1] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,1] * self.ylbar[2,1] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[2,1] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.ylbar[2,2] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.ylbar[2,2] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[2,2] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.ylbar[2,2] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.ylbar[2,2] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[2,2] + -11/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,2] * self.ylbar[2,2] + -3/64 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,2] * self.ylbar[2,2] + 3/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[2,2])

    def alphaOHG(self, ):
        return 0

    def alphaOHGt(self, ):
        return 0

    def alphaOHW(self, ):
        return (7/1536 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 7/1536 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 7/1536 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2])

    def alphaOHWB(self, ):
        return (-1/256 * self.g1 * self.g2 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + -1/256 * self.g1 * self.g2 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + -1/256 * self.g1 * self.g2 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2])

    def alphaOHWBt(self, ):
        return 0

    def alphaOHWt(self, ):
        return 0

    def alphaWeinberg(self, mif1,mif2):
        return (1/8 * (self.MSigma)**(-1) * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] + 1/512 * (self.g1)**(2) * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] + 1/512 * (self.g2)**(2) * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] + 3/512 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] + 3/512 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] + 1/64 * self.lam * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] + 1/64 * self.invepsilonbar * self.lam * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] + -15/2048 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] + -9/1024 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] + -9/1024 * (self.MSigma)**(-3) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] + -3/512 * self.invepsilonbar * (self.MSigma)**(-3) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] + -15/2048 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] + -9/1024 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] + -9/1024 * (self.MSigma)**(-3) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] + -3/512 * self.invepsilonbar * (self.MSigma)**(-3) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] + -15/2048 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] + -9/1024 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] + -9/1024 * (self.MSigma)**(-3) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] + -3/512 * self.invepsilonbar * (self.MSigma)**(-3) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] + -3/512 * (self.g1)**(2) * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -3/512 * (self.g2)**(2) * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/64 * self.lam * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 9/1024 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 3/512 * (self.MSigma)**(-3) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 9/1024 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 3/512 * (self.MSigma)**(-3) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 9/1024 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 3/512 * (self.MSigma)**(-3) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.yl[0,0] * self.ylbar[mif1,0] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.yl[0,0] * self.ylbar[mif1,0] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[mif1,0] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.yl[1,0] * self.ylbar[mif1,0] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.yl[1,0] * self.ylbar[mif1,0] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[mif1,0] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.yl[2,0] * self.ylbar[mif1,0] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.yl[2,0] * self.ylbar[mif1,0] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[mif1,0] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.yl[0,1] * self.ylbar[mif1,1] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.yl[0,1] * self.ylbar[mif1,1] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[mif1,1] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.yl[1,1] * self.ylbar[mif1,1] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.yl[1,1] * self.ylbar[mif1,1] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[mif1,1] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.yl[2,1] * self.ylbar[mif1,1] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.yl[2,1] * self.ylbar[mif1,1] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[mif1,1] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.yl[0,2] * self.ylbar[mif1,2] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.yl[0,2] * self.ylbar[mif1,2] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[mif1,2] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.yl[1,2] * self.ylbar[mif1,2] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.yl[1,2] * self.ylbar[mif1,2] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[mif1,2] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.yl[2,2] * self.ylbar[mif1,2] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.yl[2,2] * self.ylbar[mif1,2] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[mif1,2] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * self.yl[0,0] * self.ylbar[mif2,0] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * self.yl[0,0] * self.ylbar[mif2,0] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[mif2,0] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * self.yl[1,0] * self.ylbar[mif2,0] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * self.yl[1,0] * self.ylbar[mif2,0] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[mif2,0] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * self.yl[2,0] * self.ylbar[mif2,0] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * self.yl[2,0] * self.ylbar[mif2,0] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[mif2,0] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * self.yl[0,1] * self.ylbar[mif2,1] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * self.yl[0,1] * self.ylbar[mif2,1] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[mif2,1] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * self.yl[1,1] * self.ylbar[mif2,1] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * self.yl[1,1] * self.ylbar[mif2,1] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[mif2,1] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * self.yl[2,1] * self.ylbar[mif2,1] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * self.yl[2,1] * self.ylbar[mif2,1] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[mif2,1] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * self.yl[0,2] * self.ylbar[mif2,2] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * self.yl[0,2] * self.ylbar[mif2,2] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[mif2,2] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * self.yl[1,2] * self.ylbar[mif2,2] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * self.yl[1,2] * self.ylbar[mif2,2] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[mif2,2] + -1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * self.yl[2,2] * self.ylbar[mif2,2] + -1/64 * self.invepsilonbar * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * self.yl[2,2] * self.ylbar[mif2,2] + 1/64 * (self.MSigma)**(-1) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[mif2,2])

    def alphaOdB(self, mif1,mif2):
        return 0

    def alphaOdd(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOdG(self, mif1,mif2):
        return 0

    def alphaOdH(self, mif1,mif2):
        return (-1/240 * (self.g2)**(4) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 7/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] + 1/384 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] + 1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] + -13/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * self.yd[mif1,mif2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * self.yd[mif1,mif2] + 7/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] + 1/384 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] + 1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] + -13/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] + -13/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * self.yd[mif1,mif2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * self.yd[mif1,mif2] + 7/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] + 1/384 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] + 1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] + -13/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] + -13/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] + -13/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * self.yd[mif1,mif2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * self.yd[mif1,mif2] + -1/384 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + -1/384 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + -1/384 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[0,0] * self.ylbar[0,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[0,0] * self.ylbar[0,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[0,0] * self.ylbar[0,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[1,0] * self.ylbar[0,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[1,0] * self.ylbar[0,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[1,0] * self.ylbar[0,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[2,0] * self.ylbar[0,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[2,0] * self.ylbar[0,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[2,0] * self.ylbar[0,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[0,1] * self.ylbar[0,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[0,1] * self.ylbar[0,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[0,1] * self.ylbar[0,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[1,1] * self.ylbar[0,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[1,1] * self.ylbar[0,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[1,1] * self.ylbar[0,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[2,1] * self.ylbar[0,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[2,1] * self.ylbar[0,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[2,1] * self.ylbar[0,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[0,2] * self.ylbar[0,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[0,2] * self.ylbar[0,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[0,2] * self.ylbar[0,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[1,2] * self.ylbar[0,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[1,2] * self.ylbar[0,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[1,2] * self.ylbar[0,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[2,2] * self.ylbar[0,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yd[mif1,mif2] * self.yl[2,2] * self.ylbar[0,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[2,2] * self.ylbar[0,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[0,0] * self.ylbar[1,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[0,0] * self.ylbar[1,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[0,0] * self.ylbar[1,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[1,0] * self.ylbar[1,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[1,0] * self.ylbar[1,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[1,0] * self.ylbar[1,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[2,0] * self.ylbar[1,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[2,0] * self.ylbar[1,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[2,0] * self.ylbar[1,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[0,1] * self.ylbar[1,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[0,1] * self.ylbar[1,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[0,1] * self.ylbar[1,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[1,1] * self.ylbar[1,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[1,1] * self.ylbar[1,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[1,1] * self.ylbar[1,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[2,1] * self.ylbar[1,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[2,1] * self.ylbar[1,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[2,1] * self.ylbar[1,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[0,2] * self.ylbar[1,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[0,2] * self.ylbar[1,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[0,2] * self.ylbar[1,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[1,2] * self.ylbar[1,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[1,2] * self.ylbar[1,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[1,2] * self.ylbar[1,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[2,2] * self.ylbar[1,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yd[mif1,mif2] * self.yl[2,2] * self.ylbar[1,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[2,2] * self.ylbar[1,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[0,0] * self.ylbar[2,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[0,0] * self.ylbar[2,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[0,0] * self.ylbar[2,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[1,0] * self.ylbar[2,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[1,0] * self.ylbar[2,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[1,0] * self.ylbar[2,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[2,0] * self.ylbar[2,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[2,0] * self.ylbar[2,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[2,0] * self.ylbar[2,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[0,1] * self.ylbar[2,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[0,1] * self.ylbar[2,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[0,1] * self.ylbar[2,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[1,1] * self.ylbar[2,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[1,1] * self.ylbar[2,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[1,1] * self.ylbar[2,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[2,1] * self.ylbar[2,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[2,1] * self.ylbar[2,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[2,1] * self.ylbar[2,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[0,2] * self.ylbar[2,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[0,2] * self.ylbar[2,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[0,2] * self.ylbar[2,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[1,2] * self.ylbar[2,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[1,2] * self.ylbar[2,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[1,2] * self.ylbar[2,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[2,2] * self.ylbar[2,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yd[mif1,mif2] * self.yl[2,2] * self.ylbar[2,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif1,mif2] * self.yl[2,2] * self.ylbar[2,2])

    def alphaOdW(self, mif1,mif2):
        return 0

    def alphaOeB(self, mif1,mif2):
        return (1/512 * self.g1 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + 1/512 * self.g1 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + 1/512 * self.g1 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif2])

    def alphaOed(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOee(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOeH(self, mif1,mif2):
        return (1/4 * (self.MSigma)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -1/64 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -1/32 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -3/64 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -3/32 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + 41/128 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + 15/64 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -7/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -1/32 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -39/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -15/512 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -7/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -1/32 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -39/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -15/512 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -7/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -1/32 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -39/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + -15/512 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + 3/64 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] + 3/32 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] + -15/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] + 15/512 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] + 15/512 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] + 15/512 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] + 1/4 * (self.MSigma)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -1/64 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -1/32 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -3/64 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -3/32 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + 41/128 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + 15/64 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -7/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -1/32 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -39/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -15/512 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -7/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -1/32 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -39/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -15/512 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -7/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -1/32 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -39/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + -15/512 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + 3/64 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] + 3/32 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] + -15/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] + 15/512 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] + 15/512 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] + 15/512 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] + 1/4 * (self.MSigma)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -1/64 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -1/32 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -3/64 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -3/32 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + 41/128 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + 15/64 * self.invepsilonbar * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -7/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -1/32 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -39/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -15/512 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -7/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -1/32 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -39/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -15/512 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -7/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -1/32 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -39/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + -15/512 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] + 3/64 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] + 3/32 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] + -15/64 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] + 15/512 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] + 15/512 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] + 1/32 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] + 15/512 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] + -1/240 * (self.g2)**(4) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 7/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[mif1,mif2] + 1/384 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[mif1,mif2] + 1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[mif1,mif2] + -13/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * self.yl[mif1,mif2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * self.yl[mif1,mif2] + 7/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[mif1,mif2] + 1/384 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[mif1,mif2] + 1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[mif1,mif2] + -13/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[mif1,mif2] + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yl[mif1,mif2] + -13/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * self.yl[mif1,mif2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * self.yl[mif1,mif2] + 7/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[mif1,mif2] + 1/384 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[mif1,mif2] + 1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[mif1,mif2] + -13/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[mif1,mif2] + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yl[mif1,mif2] + -13/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[mif1,mif2] + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yl[mif1,mif2] + -13/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * self.yl[mif1,mif2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * self.yl[mif1,mif2] + -1/384 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + -1/384 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + -1/384 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,mif2] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,0] * self.yl[0,mif2] * self.ylbar[0,0] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,0] * self.yl[0,mif2] * self.ylbar[0,0] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[0,mif2] * self.ylbar[0,0] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] * self.yl[1,0] * self.ylbar[0,0] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] * self.yl[1,0] * self.ylbar[0,0] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[1,0] * self.ylbar[0,0] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] * self.yl[2,0] * self.ylbar[0,0] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] * self.yl[2,0] * self.ylbar[0,0] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[2,0] * self.ylbar[0,0] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[mif1,mif2] * self.ylbar[0,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.yl[mif1,mif2] * self.ylbar[0,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[mif1,mif2] * self.ylbar[0,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[mif1,mif2] * self.ylbar[0,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.yl[mif1,mif2] * self.ylbar[0,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[mif1,mif2] * self.ylbar[0,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.yl[mif1,mif2] * self.ylbar[0,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.yl[mif1,mif2] * self.ylbar[0,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.yl[mif1,mif2] * self.ylbar[0,0] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,1] * self.yl[0,mif2] * self.ylbar[0,1] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,1] * self.yl[0,mif2] * self.ylbar[0,1] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[0,mif2] * self.ylbar[0,1] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] * self.yl[1,1] * self.ylbar[0,1] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] * self.yl[1,1] * self.ylbar[0,1] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[1,1] * self.ylbar[0,1] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] * self.yl[2,1] * self.ylbar[0,1] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] * self.yl[2,1] * self.ylbar[0,1] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[2,1] * self.ylbar[0,1] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[mif1,mif2] * self.ylbar[0,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.yl[mif1,mif2] * self.ylbar[0,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[mif1,mif2] * self.ylbar[0,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[mif1,mif2] * self.ylbar[0,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.yl[mif1,mif2] * self.ylbar[0,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[mif1,mif2] * self.ylbar[0,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,1] * self.yl[mif1,mif2] * self.ylbar[0,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,1] * self.yl[mif1,mif2] * self.ylbar[0,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.yl[mif1,mif2] * self.ylbar[0,1] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,2] * self.yl[0,mif2] * self.ylbar[0,2] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,2] * self.yl[0,mif2] * self.ylbar[0,2] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[0,mif2] * self.ylbar[0,2] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] * self.yl[1,2] * self.ylbar[0,2] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] * self.yl[1,2] * self.ylbar[0,2] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[1,2] * self.ylbar[0,2] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] * self.yl[2,2] * self.ylbar[0,2] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] * self.yl[2,2] * self.ylbar[0,2] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[2,2] * self.ylbar[0,2] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[mif1,mif2] * self.ylbar[0,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.yl[mif1,mif2] * self.ylbar[0,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[mif1,mif2] * self.ylbar[0,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.yl[mif1,mif2] * self.ylbar[0,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.yl[mif1,mif2] * self.ylbar[0,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[mif1,mif2] * self.ylbar[0,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,2] * self.yl[mif1,mif2] * self.ylbar[0,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,2] * self.yl[mif1,mif2] * self.ylbar[0,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.yl[mif1,mif2] * self.ylbar[0,2] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,0] * self.yl[1,mif2] * self.ylbar[1,0] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,0] * self.yl[1,mif2] * self.ylbar[1,0] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[1,mif2] * self.ylbar[1,0] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,0] * self.yl[1,mif2] * self.ylbar[1,0] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,0] * self.yl[1,mif2] * self.ylbar[1,0] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[1,mif2] * self.ylbar[1,0] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] * self.yl[2,0] * self.ylbar[1,0] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] * self.yl[2,0] * self.ylbar[1,0] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[2,0] * self.ylbar[1,0] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[mif1,mif2] * self.ylbar[1,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.yl[mif1,mif2] * self.ylbar[1,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[mif1,mif2] * self.ylbar[1,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[mif1,mif2] * self.ylbar[1,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.yl[mif1,mif2] * self.ylbar[1,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[mif1,mif2] * self.ylbar[1,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.yl[mif1,mif2] * self.ylbar[1,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.yl[mif1,mif2] * self.ylbar[1,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.yl[mif1,mif2] * self.ylbar[1,0] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,1] * self.yl[1,mif2] * self.ylbar[1,1] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,1] * self.yl[1,mif2] * self.ylbar[1,1] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[1,mif2] * self.ylbar[1,1] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,1] * self.yl[1,mif2] * self.ylbar[1,1] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,1] * self.yl[1,mif2] * self.ylbar[1,1] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[1,mif2] * self.ylbar[1,1] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] * self.yl[2,1] * self.ylbar[1,1] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] * self.yl[2,1] * self.ylbar[1,1] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[2,1] * self.ylbar[1,1] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[mif1,mif2] * self.ylbar[1,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.yl[mif1,mif2] * self.ylbar[1,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[mif1,mif2] * self.ylbar[1,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[mif1,mif2] * self.ylbar[1,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.yl[mif1,mif2] * self.ylbar[1,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[mif1,mif2] * self.ylbar[1,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,1] * self.yl[mif1,mif2] * self.ylbar[1,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,1] * self.yl[mif1,mif2] * self.ylbar[1,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.yl[mif1,mif2] * self.ylbar[1,1] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,2] * self.yl[1,mif2] * self.ylbar[1,2] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,2] * self.yl[1,mif2] * self.ylbar[1,2] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[1,mif2] * self.ylbar[1,2] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,2] * self.yl[1,mif2] * self.ylbar[1,2] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,2] * self.yl[1,mif2] * self.ylbar[1,2] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[1,mif2] * self.ylbar[1,2] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] * self.yl[2,2] * self.ylbar[1,2] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] * self.yl[2,2] * self.ylbar[1,2] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[2,2] * self.ylbar[1,2] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[mif1,mif2] * self.ylbar[1,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.yl[mif1,mif2] * self.ylbar[1,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[mif1,mif2] * self.ylbar[1,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.yl[mif1,mif2] * self.ylbar[1,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.yl[mif1,mif2] * self.ylbar[1,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[mif1,mif2] * self.ylbar[1,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,2] * self.yl[mif1,mif2] * self.ylbar[1,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,2] * self.yl[mif1,mif2] * self.ylbar[1,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.yl[mif1,mif2] * self.ylbar[1,2] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,0] * self.yl[2,mif2] * self.ylbar[2,0] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,0] * self.yl[2,mif2] * self.ylbar[2,0] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[2,mif2] * self.ylbar[2,0] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,0] * self.yl[2,mif2] * self.ylbar[2,0] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,0] * self.yl[2,mif2] * self.ylbar[2,0] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[2,mif2] * self.ylbar[2,0] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,0] * self.yl[2,mif2] * self.ylbar[2,0] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,0] * self.yl[2,mif2] * self.ylbar[2,0] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.yl[2,mif2] * self.ylbar[2,0] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[mif1,mif2] * self.ylbar[2,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.yl[mif1,mif2] * self.ylbar[2,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.yl[mif1,mif2] * self.ylbar[2,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[mif1,mif2] * self.ylbar[2,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.yl[mif1,mif2] * self.ylbar[2,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.yl[mif1,mif2] * self.ylbar[2,0] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,0] * self.yl[mif1,mif2] * self.ylbar[2,0] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,0] * self.yl[mif1,mif2] * self.ylbar[2,0] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.yl[mif1,mif2] * self.ylbar[2,0] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,1] * self.yl[2,mif2] * self.ylbar[2,1] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,1] * self.yl[2,mif2] * self.ylbar[2,1] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[2,mif2] * self.ylbar[2,1] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,1] * self.yl[2,mif2] * self.ylbar[2,1] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,1] * self.yl[2,mif2] * self.ylbar[2,1] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[2,mif2] * self.ylbar[2,1] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,1] * self.yl[2,mif2] * self.ylbar[2,1] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,1] * self.yl[2,mif2] * self.ylbar[2,1] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.yl[2,mif2] * self.ylbar[2,1] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[mif1,mif2] * self.ylbar[2,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.yl[mif1,mif2] * self.ylbar[2,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.yl[mif1,mif2] * self.ylbar[2,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[mif1,mif2] * self.ylbar[2,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.yl[mif1,mif2] * self.ylbar[2,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.yl[mif1,mif2] * self.ylbar[2,1] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,1] * self.yl[mif1,mif2] * self.ylbar[2,1] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,1] * self.yl[mif1,mif2] * self.ylbar[2,1] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.yl[mif1,mif2] * self.ylbar[2,1] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,2] * self.yl[2,mif2] * self.ylbar[2,2] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,2] * self.yl[2,mif2] * self.ylbar[2,2] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[2,mif2] * self.ylbar[2,2] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,2] * self.yl[2,mif2] * self.ylbar[2,2] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,2] * self.yl[2,mif2] * self.ylbar[2,2] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[2,mif2] * self.ylbar[2,2] + 7/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,2] * self.yl[2,mif2] * self.ylbar[2,2] + 5/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,2] * self.yl[2,mif2] * self.ylbar[2,2] + -5/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.yl[2,mif2] * self.ylbar[2,2] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 17/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 3/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[mif1,mif2] * self.ylbar[2,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.yl[mif1,mif2] * self.ylbar[2,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.yl[mif1,mif2] * self.ylbar[2,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.yl[mif1,mif2] * self.ylbar[2,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.yl[mif1,mif2] * self.ylbar[2,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.yl[mif1,mif2] * self.ylbar[2,2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,2] * self.yl[mif1,mif2] * self.ylbar[2,2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,2] * self.yl[mif1,mif2] * self.ylbar[2,2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.yl[mif1,mif2] * self.ylbar[2,2])

    def alphaOeu(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOeW(self, mif1,mif2):
        return (3/512 * self.g2 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] + 3/512 * self.g2 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] + 3/512 * self.g2 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif2])

    def alphaOHd(self, mif1,mif2):
        return (5/2304 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 1/384 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 5/2304 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 1/384 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 5/2304 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + 1/384 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + -1/384 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/384 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/384 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)))

    def alphaOHe(self, mif1,mif2):
        return (5/768 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 1/128 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 5/768 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 1/128 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 5/768 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + 1/128 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + -1/128 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/128 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/128 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 19/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,mif2] * self.ylbar[0,mif1] + -3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,mif2] * self.ylbar[0,mif1] + 3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.ylbar[0,mif1] + 19/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,mif2] * self.ylbar[0,mif1] + -3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,mif2] * self.ylbar[0,mif1] + 3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.ylbar[0,mif1] + 19/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,mif2] * self.ylbar[0,mif1] + -3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,mif2] * self.ylbar[0,mif1] + 3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.ylbar[0,mif1] + 19/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,mif2] * self.ylbar[1,mif1] + -3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,mif2] * self.ylbar[1,mif1] + 3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.ylbar[1,mif1] + 19/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,mif2] * self.ylbar[1,mif1] + -3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,mif2] * self.ylbar[1,mif1] + 3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.ylbar[1,mif1] + 19/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,mif2] * self.ylbar[1,mif1] + -3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,mif2] * self.ylbar[1,mif1] + 3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.ylbar[1,mif1] + 19/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,mif2] * self.ylbar[2,mif1] + -3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,mif2] * self.ylbar[2,mif1] + 3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif2] * self.ylbar[2,mif1] + 19/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,mif2] * self.ylbar[2,mif1] + -3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,mif2] * self.ylbar[2,mif1] + 3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif2] * self.ylbar[2,mif1] + 19/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,mif2] * self.ylbar[2,mif1] + -3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,mif2] * self.ylbar[2,mif1] + 3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif2] * self.ylbar[2,mif1])

    def alphaOHl1(self, mif1,mif2):
        return (5/1536 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 1/256 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 5/1536 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 1/256 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 5/1536 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + 1/256 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + 3/16 * (self.MSigma)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + 121/6144 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + -21/2048 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + 11/1024 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + -45/1024 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + -81/4096 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] + -27/2048 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] + -27/2048 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] + -9/1024 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] + -81/4096 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] + -27/2048 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] + -27/2048 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] + -9/1024 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] + -81/4096 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] + -27/2048 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] + -27/2048 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] + -9/1024 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] + -1/256 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/256 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/256 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -11/1024 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 45/1024 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 27/2048 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 9/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 27/2048 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 9/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 27/2048 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 9/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.yl[mif1,0] * self.ylbar[0,0] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.yl[mif1,0] * self.ylbar[0,0] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,0] * self.ylbar[0,0] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.yl[mif1,1] * self.ylbar[0,1] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.yl[mif1,1] * self.ylbar[0,1] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,1] * self.ylbar[0,1] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.yl[mif1,2] * self.ylbar[0,2] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.yl[mif1,2] * self.ylbar[0,2] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,2] * self.ylbar[0,2] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.yl[mif1,0] * self.ylbar[1,0] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.yl[mif1,0] * self.ylbar[1,0] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,0] * self.ylbar[1,0] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.yl[mif1,1] * self.ylbar[1,1] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.yl[mif1,1] * self.ylbar[1,1] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,1] * self.ylbar[1,1] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.yl[mif1,2] * self.ylbar[1,2] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.yl[mif1,2] * self.ylbar[1,2] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,2] * self.ylbar[1,2] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.yl[mif1,0] * self.ylbar[2,0] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.yl[mif1,0] * self.ylbar[2,0] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,0] * self.ylbar[2,0] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.yl[mif1,1] * self.ylbar[2,1] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.yl[mif1,1] * self.ylbar[2,1] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,1] * self.ylbar[2,1] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.yl[mif1,2] * self.ylbar[2,2] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.yl[mif1,2] * self.ylbar[2,2] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,2] * self.ylbar[2,2] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,0] * self.ylbar[mif2,0] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,0] * self.ylbar[mif2,0] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[mif2,0] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,0] * self.ylbar[mif2,0] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,0] * self.ylbar[mif2,0] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[mif2,0] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,0] * self.ylbar[mif2,0] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,0] * self.ylbar[mif2,0] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[mif2,0] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,1] * self.ylbar[mif2,1] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,1] * self.ylbar[mif2,1] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[mif2,1] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,1] * self.ylbar[mif2,1] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,1] * self.ylbar[mif2,1] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[mif2,1] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,1] * self.ylbar[mif2,1] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,1] * self.ylbar[mif2,1] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[mif2,1] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,2] * self.ylbar[mif2,2] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,2] * self.ylbar[mif2,2] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[mif2,2] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,2] * self.ylbar[mif2,2] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,2] * self.ylbar[mif2,2] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[mif2,2] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,2] * self.ylbar[mif2,2] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,2] * self.ylbar[mif2,2] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[mif2,2])

    def alphaOHl3(self, mif1,mif2):
        return (-1/240 * (self.g2)**(4) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 7/1536 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 1/768 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 7/1536 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 1/768 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 7/1536 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + 1/768 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + 1/16 * (self.MSigma)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + 11/2048 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + -127/6144 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + 3/1024 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + -79/3072 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + -17/4096 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] + -3/2048 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] + -9/2048 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] + -3/1024 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] + -17/4096 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] + -3/2048 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] + -9/2048 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] + -3/1024 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] + -17/4096 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] + -3/2048 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] + -9/2048 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] + -3/1024 * self.invepsilonbar * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] + -1/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -3/1024 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 79/3072 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 3/2048 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 3/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 3/2048 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 3/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 3/2048 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 3/1024 * (self.MSigma)**(-4) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.yl[mif1,0] * self.ylbar[0,0] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.yl[mif1,0] * self.ylbar[0,0] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,0] * self.ylbar[0,0] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.yl[mif1,1] * self.ylbar[0,1] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.yl[mif1,1] * self.ylbar[0,1] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,1] * self.ylbar[0,1] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.yl[mif1,2] * self.ylbar[0,2] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.yl[mif1,2] * self.ylbar[0,2] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,2] * self.ylbar[0,2] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.yl[mif1,0] * self.ylbar[1,0] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.yl[mif1,0] * self.ylbar[1,0] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,0] * self.ylbar[1,0] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.yl[mif1,1] * self.ylbar[1,1] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.yl[mif1,1] * self.ylbar[1,1] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,1] * self.ylbar[1,1] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.yl[mif1,2] * self.ylbar[1,2] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.yl[mif1,2] * self.ylbar[1,2] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,2] * self.ylbar[1,2] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.yl[mif1,0] * self.ylbar[2,0] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.yl[mif1,0] * self.ylbar[2,0] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,0] * self.ylbar[2,0] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.yl[mif1,1] * self.ylbar[2,1] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.yl[mif1,1] * self.ylbar[2,1] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,1] * self.ylbar[2,1] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.yl[mif1,2] * self.ylbar[2,2] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.yl[mif1,2] * self.ylbar[2,2] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,2] * self.ylbar[2,2] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,0] * self.ylbar[mif2,0] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,0] * self.ylbar[mif2,0] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[mif2,0] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,0] * self.ylbar[mif2,0] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,0] * self.ylbar[mif2,0] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[mif2,0] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,0] * self.ylbar[mif2,0] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,0] * self.ylbar[mif2,0] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[mif2,0] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,1] * self.ylbar[mif2,1] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,1] * self.ylbar[mif2,1] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[mif2,1] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,1] * self.ylbar[mif2,1] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,1] * self.ylbar[mif2,1] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[mif2,1] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,1] * self.ylbar[mif2,1] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,1] * self.ylbar[mif2,1] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[mif2,1] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,2] * self.ylbar[mif2,2] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,2] * self.ylbar[mif2,2] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[mif2,2] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,2] * self.ylbar[mif2,2] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,2] * self.ylbar[mif2,2] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[mif2,2] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,2] * self.ylbar[mif2,2] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,2] * self.ylbar[mif2,2] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[mif2,2])

    def alphaOHq1(self, mif1,mif2):
        return (-5/4608 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + -1/768 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + -5/4608 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + -1/768 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + -5/4608 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + -1/768 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + 1/768 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/768 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/768 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)))

    def alphaOHq3(self, mif1,mif2):
        return (-1/240 * (self.g2)**(4) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 7/1536 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 1/768 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + 7/1536 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 1/768 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + 7/1536 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + 1/768 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + -1/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)))

    def alphaOHu(self, mif1,mif2):
        return (-5/1152 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + -1/192 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] + -5/1152 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + -1/192 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] + -5/1152 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + -1/192 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] + 1/192 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/192 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/192 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)))

    def alphaOHud(self, mif1,mif2):
        return 0

    def alphaOld(self, mif1,mif2,mif3,mif4):
        return (-11/4608 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + -1/768 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + 1/768 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 9/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[0,mif4] * self.ydbar[0,mif3] + 3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[0,mif4] * self.ydbar[0,mif3] + -3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[0,mif4] * self.ydbar[0,mif3] + 9/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[1,mif4] * self.ydbar[1,mif3] + 3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[1,mif4] * self.ydbar[1,mif3] + -3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[1,mif4] * self.ydbar[1,mif3] + 9/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[2,mif4] * self.ydbar[2,mif3] + 3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[2,mif4] * self.ydbar[2,mif3] + -3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[2,mif4] * self.ydbar[2,mif3])

    def alphaOle(self, mif1,mif2,mif3,mif4):
        return (-11/1536 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + -1/256 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + 1/256 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 9/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yl[0,mif4] * self.ylbar[0,mif3] + 3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yl[0,mif4] * self.ylbar[0,mif3] + -3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,mif4] * self.ylbar[0,mif3] + -3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[0] * self.yl[mif1,mif4] * self.ylbar[0,mif3] + 9/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yl[1,mif4] * self.ylbar[1,mif3] + 3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yl[1,mif4] * self.ylbar[1,mif3] + -3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,mif4] * self.ylbar[1,mif3] + -3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[1] * self.yl[mif1,mif4] * self.ylbar[1,mif3] + 9/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yl[2,mif4] * self.ylbar[2,mif3] + 3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yl[2,mif4] * self.ylbar[2,mif3] + -3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,mif4] * self.ylbar[2,mif3] + -3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[2] * self.yl[mif1,mif4] * self.ylbar[2,mif3] + -3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif4] * self.ylbar[mif2,mif3] + -3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif4] * self.ylbar[mif2,mif3] + -3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif4] * self.ylbar[mif2,mif3] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[mif1,mif4] * self.ylbar[mif2,mif3] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[mif1,mif4] * self.ylbar[mif2,mif3] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[mif1,mif4] * self.ylbar[mif2,mif3])

    def alphaOledq(self, mif1,mif2,mif3,mif4):
        return (3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.ydbar[mif4,mif3] * self.yl[0,mif2] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.ydbar[mif4,mif3] * self.yl[1,mif2] + 3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.ydbar[mif4,mif3] * self.yl[2,mif2] + 1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.ydbar[mif4,mif3] * self.yl[mif1,mif2] + 1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.ydbar[mif4,mif3] * self.yl[mif1,mif2] + 1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.ydbar[mif4,mif3] * self.yl[mif1,mif2])

    def alphaOlequ1(self, mif1,mif2,mif3,mif4):
        return (-3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[mif1] * self.yl[0,mif2] * self.yu[mif3,mif4] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[mif1] * self.yl[1,mif2] * self.yu[mif3,mif4] + -3/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[mif1] * self.yl[2,mif2] * self.yu[mif3,mif4] + -1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[mif1,mif2] * self.yu[mif3,mif4] + -1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[mif1,mif2] * self.yu[mif3,mif4] + -1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[mif1,mif2] * self.yu[mif3,mif4])

    def alphaOlequ3(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOll(self, mif1,mif2,mif3,mif4):
        return (-1/240 * (self.g2)**(4) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + 1/480 * (self.g2)**(4) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -11/6144 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + -13/6144 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + -1/1024 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + -1/3072 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + 13/3072 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] + 1/1536 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] + 13/3072 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif3] + 1/1536 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif3] + -11/6144 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] + -13/6144 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] + -1/1024 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] + -1/3072 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] + -9/2048 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] * self.lambdaSigmabar[mif3] + -1/1024 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] * self.lambdaSigmabar[mif3] + 1/1024 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/3072 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/1536 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -1/1536 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif3] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/1024 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/3072 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + 1/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] * self.lambdaSigmabar[mif3] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] * self.yl[mif1,0] * self.ylbar[mif2,0] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] * self.yl[mif1,0] * self.ylbar[mif2,0] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,0] * self.ylbar[mif2,0] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] * self.yl[mif3,0] * self.ylbar[mif2,0] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] * self.yl[mif3,0] * self.ylbar[mif2,0] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif3,0] * self.ylbar[mif2,0] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] * self.yl[mif1,1] * self.ylbar[mif2,1] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] * self.yl[mif1,1] * self.ylbar[mif2,1] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,1] * self.ylbar[mif2,1] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] * self.yl[mif3,1] * self.ylbar[mif2,1] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] * self.yl[mif3,1] * self.ylbar[mif2,1] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif3,1] * self.ylbar[mif2,1] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] * self.yl[mif1,2] * self.ylbar[mif2,2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] * self.yl[mif1,2] * self.ylbar[mif2,2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif3] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,2] * self.ylbar[mif2,2] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] * self.yl[mif3,2] * self.ylbar[mif2,2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] * self.yl[mif3,2] * self.ylbar[mif2,2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif4] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif3,2] * self.ylbar[mif2,2] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif3] * self.yl[mif1,0] * self.ylbar[mif4,0] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif3] * self.yl[mif1,0] * self.ylbar[mif4,0] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif3] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,0] * self.ylbar[mif4,0] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yl[mif3,0] * self.ylbar[mif4,0] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yl[mif3,0] * self.ylbar[mif4,0] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif3,0] * self.ylbar[mif4,0] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif3] * self.yl[mif1,1] * self.ylbar[mif4,1] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif3] * self.yl[mif1,1] * self.ylbar[mif4,1] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif3] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,1] * self.ylbar[mif4,1] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yl[mif3,1] * self.ylbar[mif4,1] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yl[mif3,1] * self.ylbar[mif4,1] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif3,1] * self.ylbar[mif4,1] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif3] * self.yl[mif1,2] * self.ylbar[mif4,2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif3] * self.yl[mif1,2] * self.ylbar[mif4,2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif3] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif1,2] * self.ylbar[mif4,2] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yl[mif3,2] * self.ylbar[mif4,2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yl[mif3,2] * self.ylbar[mif4,2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[mif3,2] * self.ylbar[mif4,2])

    def alphaOlq1(self, mif1,mif2,mif3,mif4):
        return (11/9216 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + 1/1536 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + -1/1536 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[mif3,0] * self.ydbar[mif4,0] + -3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[mif3,0] * self.ydbar[mif4,0] + 3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif3,0] * self.ydbar[mif4,0] + -9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[mif3,1] * self.ydbar[mif4,1] + -3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[mif3,1] * self.ydbar[mif4,1] + 3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif3,1] * self.ydbar[mif4,1] + -9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[mif3,2] * self.ydbar[mif4,2] + -3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[mif3,2] * self.ydbar[mif4,2] + 3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif3,2] * self.ydbar[mif4,2] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[mif3,0] * self.yubar[mif4,0] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[mif3,0] * self.yubar[mif4,0] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif3,0] * self.yubar[mif4,0] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[mif3,1] * self.yubar[mif4,1] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[mif3,1] * self.yubar[mif4,1] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif3,1] * self.yubar[mif4,1] + 9/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[mif3,2] * self.yubar[mif4,2] + 3/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[mif3,2] * self.yubar[mif4,2] + -3/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif3,2] * self.yubar[mif4,2])

    def alphaOlq3(self, mif1,mif2,mif3,mif4):
        return (-1/240 * (self.g2)**(4) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 13/3072 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + 1/1536 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + -1/1536 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[mif3,0] * self.ydbar[mif4,0] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[mif3,0] * self.ydbar[mif4,0] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif3,0] * self.ydbar[mif4,0] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[mif3,1] * self.ydbar[mif4,1] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[mif3,1] * self.ydbar[mif4,1] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif3,1] * self.ydbar[mif4,1] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[mif3,2] * self.ydbar[mif4,2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yd[mif3,2] * self.ydbar[mif4,2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yd[mif3,2] * self.ydbar[mif4,2] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[mif3,0] * self.yubar[mif4,0] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[mif3,0] * self.yubar[mif4,0] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif3,0] * self.yubar[mif4,0] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[mif3,1] * self.yubar[mif4,1] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[mif3,1] * self.yubar[mif4,1] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif3,1] * self.yubar[mif4,1] + -3/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[mif3,2] * self.yubar[mif4,2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[mif3,2] * self.yubar[mif4,2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif3,2] * self.yubar[mif4,2])

    def alphaOlu(self, mif1,mif2,mif3,mif4):
        return (11/2304 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + 1/384 * (self.g1)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] + -1/384 * (self.g1)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) + -9/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[0,mif4] * self.yubar[0,mif3] + -3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[0,mif4] * self.yubar[0,mif3] + 3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[0,mif4] * self.yubar[0,mif3] + -9/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[1,mif4] * self.yubar[1,mif3] + -3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[1,mif4] * self.yubar[1,mif3] + 3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[1,mif4] * self.yubar[1,mif3] + -9/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[2,mif4] * self.yubar[2,mif3] + -3/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * self.yu[2,mif4] * self.yubar[2,mif3] + 3/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[mif2] * self.lambdaSigmabar[mif1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[2,mif4] * self.yubar[2,mif3])

    def alphaOqd1(self, mif1,mif2,mif3,mif4):
        return (-1/384 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yd[mif1,mif4] * self.ydbar[mif2,mif3] + -1/384 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yd[mif1,mif4] * self.ydbar[mif2,mif3] + -1/384 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yd[mif1,mif4] * self.ydbar[mif2,mif3])

    def alphaOqd8(self, mif1,mif2,mif3,mif4):
        return (-1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yd[mif1,mif4] * self.ydbar[mif2,mif3] + -1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yd[mif1,mif4] * self.ydbar[mif2,mif3] + -1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yd[mif1,mif4] * self.ydbar[mif2,mif3])

    def alphaOqe(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOqq1(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOqq3(self, mif1,mif2,mif3,mif4):
        return -1/480 * (self.g2)**(4) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOqu1(self, mif1,mif2,mif3,mif4):
        return (-1/384 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yu[mif1,mif4] * self.yubar[mif2,mif3] + -1/384 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yu[mif1,mif4] * self.yubar[mif2,mif3] + -1/384 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yu[mif1,mif4] * self.yubar[mif2,mif3])

    def alphaOqu8(self, mif1,mif2,mif3,mif4):
        return (-1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yu[mif1,mif4] * self.yubar[mif2,mif3] + -1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yu[mif1,mif4] * self.yubar[mif2,mif3] + -1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yu[mif1,mif4] * self.yubar[mif2,mif3])

    def alphaOquqd1(self, mif1,mif2,mif3,mif4):
        return (1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yd[mif3,mif4] * self.yu[mif1,mif2] + 1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yd[mif3,mif4] * self.yu[mif1,mif2] + 1/64 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yd[mif3,mif4] * self.yu[mif1,mif2])

    def alphaOquqd8(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOuB(self, mif1,mif2):
        return 0

    def alphaOud1(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOud8(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOuG(self, mif1,mif2):
        return 0

    def alphaOuH(self, mif1,mif2):
        return (-1/240 * (self.g2)**(4) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 7/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yu[mif1,mif2] + 1/384 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yu[mif1,mif2] + 1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yu[mif1,mif2] + -13/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * self.yu[mif1,mif2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * self.yu[mif1,mif2] + 7/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yu[mif1,mif2] + 1/384 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yu[mif1,mif2] + 1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yu[mif1,mif2] + -13/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yu[mif1,mif2] + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * self.yu[mif1,mif2] + -13/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * self.yu[mif1,mif2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * self.yu[mif1,mif2] + 7/768 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yu[mif1,mif2] + 1/384 * (self.g2)**(2) * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yu[mif1,mif2] + 1/32 * self.lam * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yu[mif1,mif2] + -13/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yu[mif1,mif2] + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * self.yu[mif1,mif2] + -13/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yu[mif1,mif2] + -1/256 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * self.yu[mif1,mif2] + -13/1024 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * self.yu[mif1,mif2] + -1/512 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * self.yu[mif1,mif2] + -1/384 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[0])**(2) * (self.lambdaSigmabar[0])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + -1/384 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[1])**(2) * (self.lambdaSigmabar[1])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + -1/384 * (self.g2)**(2) * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 1/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + 1/512 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * (self.lambdaSigma[2])**(2) * (self.lambdaSigmabar[2])**(2) * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.ylbar[0,0] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,0] * self.ylbar[0,0] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[0,0] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.ylbar[0,0] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,0] * self.ylbar[0,0] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[0,0] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.ylbar[0,0] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,0] * self.ylbar[0,0] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[0,0] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.ylbar[0,1] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,1] * self.ylbar[0,1] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[0,1] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.ylbar[0,1] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,1] * self.ylbar[0,1] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[0,1] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,1] * self.ylbar[0,1] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,1] * self.ylbar[0,1] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[0,1] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.ylbar[0,2] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * self.yl[0,2] * self.ylbar[0,2] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[0,2] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.ylbar[0,2] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * self.yl[1,2] * self.ylbar[0,2] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[0,2] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,2] * self.ylbar[0,2] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * self.yl[2,2] * self.ylbar[0,2] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[0] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[0,2] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.ylbar[1,0] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,0] * self.ylbar[1,0] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[1,0] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.ylbar[1,0] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,0] * self.ylbar[1,0] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[1,0] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.ylbar[1,0] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,0] * self.ylbar[1,0] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[1,0] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.ylbar[1,1] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,1] * self.ylbar[1,1] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[1,1] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.ylbar[1,1] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,1] * self.ylbar[1,1] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[1,1] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,1] * self.ylbar[1,1] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,1] * self.ylbar[1,1] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[1,1] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.ylbar[1,2] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * self.yl[0,2] * self.ylbar[1,2] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[1,2] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.ylbar[1,2] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * self.yl[1,2] * self.ylbar[1,2] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[1,2] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,2] * self.ylbar[1,2] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * self.yl[2,2] * self.ylbar[1,2] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[1] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[1,2] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.ylbar[2,0] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,0] * self.ylbar[2,0] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,0] * self.ylbar[2,0] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.ylbar[2,0] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,0] * self.ylbar[2,0] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,0] * self.ylbar[2,0] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,0] * self.ylbar[2,0] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,0] * self.ylbar[2,0] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,0] * self.ylbar[2,0] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.ylbar[2,1] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,1] * self.ylbar[2,1] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,1] * self.ylbar[2,1] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.ylbar[2,1] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,1] * self.ylbar[2,1] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,1] * self.ylbar[2,1] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,1] * self.ylbar[2,1] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,1] * self.ylbar[2,1] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,1] * self.ylbar[2,1] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.ylbar[2,2] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * self.yl[0,2] * self.ylbar[2,2] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[0] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[0,2] * self.ylbar[2,2] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.ylbar[2,2] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * self.yl[1,2] * self.ylbar[2,2] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[1] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[1,2] * self.ylbar[2,2] * self.yu[mif1,mif2] + -7/256 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,2] * self.ylbar[2,2] * self.yu[mif1,mif2] + 1/128 * self.invepsilonbar * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * self.yl[2,2] * self.ylbar[2,2] * self.yu[mif1,mif2] + -1/128 * (self.MSigma)**(-2) * self.onelooporder * (np.pi)**(-2) * self.lambdaSigma[2] * self.lambdaSigmabar[2] * np.log((self.MSigma)**(2) * (self.mu)**(-2)) * self.yl[2,2] * self.ylbar[2,2] * self.yu[mif1,mif2])

    def alphaOuu(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOuW(self, mif1,mif2):
        return 0
