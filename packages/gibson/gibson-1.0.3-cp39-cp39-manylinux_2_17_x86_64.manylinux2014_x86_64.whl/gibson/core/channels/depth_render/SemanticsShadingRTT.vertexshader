#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 2) in vec3 vertexNormal_modelspace;
layout(location = 3) in vec2 vertexSemantics;


// Output data ; will be interpolated for each fragment.
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
//flat out vec2 Semantics;
flat out vec3 color;
//flat out int semantic_layer;

// Values that stay constant for the whole mesh.
uniform sampler2DArray myTextureSampler;
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform vec3 LightPosition_worldspace;
uniform int max_layer;

void main(){

    // Output position of the vertex, in clip space : MVP * position
    gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

    // Position of the vertex, in worldspace : M * position
    Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;

    // Vector that goes from the vertex to the camera, in camera space.
    // In camera space, the camera is at the origin (0,0,0).
    // Positive z
    EyeDirection_cameraspace = vec3(0,0,0) - ( V * M * vec4(vertexPosition_modelspace,1)).xyz;

    // (hzyjerry) Cambria workaround to solve the pose mismatch issue
    float eye_z = EyeDirection_cameraspace[2];
    EyeDirection_cameraspace[2] = EyeDirection_cameraspace[1];
    EyeDirection_cameraspace[1] = -eye_z;

    // Vector that goes from the vertex to the light, in camera space
    vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;
    LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;

    // Normal of the the vertex, in camera space
    Normal_cameraspace = ( M * vec4(vertexNormal_modelspace,0)).xyz; // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.

    // Semantic layer of the vertex
    //Semantics = vertexSemantics;
    float layer = vertexSemantics.x;
    color = texture( myTextureSampler, vec3(0, 0, layer)).rgb * 255.0;
    //color = vec3(layer, layer, layer);
    //semantic_layer = int(vertexSemantics.x);
}

