#version 330 core

in vec2 UV;

out vec3 color;

uniform sampler2D renderedTexture;
uniform sampler2D myDepthTex;
uniform float time;

void main(){
    //color = texture( renderedTexture, UV + 0.005*vec2( sin(time+1024.0*UV.x),cos(time+768.0*UV.y)) ).xyz ;
    //float t2 = texture(renderedTexture, UV).x * (1/512.0) * (128.0 / pow(2, 16));
    //float t2 = texture(renderedTexture, UV).x;
    //float t2 = pow(texture(renderedTexture, UV).x, 1);
    //color = vec3(t2, t2, t2);

    float zNear = 0.1f;
    float zFar  = 5000.0f;

    const vec3 bitUnshift3 = vec3(1.0/65536.0, 1.0/256.0, 1.0);
    float z_e_mine = dot(texture2D(renderedTexture, UV).xyz, bitUnshift3);

    //float z_e_mine = texture2D(renderedTexture, UV).x;

    //z_e_mine = mix(zNear, zFar, z_e_mine); // scale from [0, 1] to [zNear, zFar]
    float z_e_ffun = texture2D(renderedTexture, UV).x;

    //color = vec3(1, 1, 1);
    //color = vec3(z_e_ffun, z_e_ffun, z_e_ffun);
    //color = vec3(z_e_mine, z_e_mine, z_e_mine);
    color = vec3(5, 5, 5);


    // Unprojection part (deprecated)
    //color = (z_e_ffun <= 1)? vec3(0, 0, 0): vec3(1, 1, 1);

    z_e_ffun = 2.0 * z_e_ffun - 1.0;
    z_e_ffun = 2.0 * zNear * zFar / (zFar + zNear - z_e_ffun * (zFar - zNear));
    //color = (z_e_ffun <= 3)? vec3(0, 0, 0): vec3(1, 1, 1);
    //color = vec3(z_e_ffun/10, z_e_ffun/10, z_e_ffun/10);
    //color = vec4(vec3(z_e_mine/zFar), 1.0); // divide by zFar to visualize;
    //color = vec3(z_e_ffun/zFar); // divide by zFar to visualize;
}