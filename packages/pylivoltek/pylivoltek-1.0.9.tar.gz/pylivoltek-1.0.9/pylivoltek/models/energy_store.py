# coding: utf-8

"""
    Livoltek API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EnergyStore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'battery_sn': 'object',
        'current_soc': 'object',
        'cycle_count': 'object',
        'battery_type_list': 'object',
        'history_map': 'EnergyStoreHistoryMap',
        'bmscapacity': 'object'
    }

    attribute_map = {
        'battery_sn': 'batterySn',
        'current_soc': 'currentSoc',
        'cycle_count': 'cycleCount',
        'battery_type_list': 'batteryTypeList',
        'history_map': 'historyMap',
        'bmscapacity': 'bmscapacity'
    }

    def __init__(self, battery_sn=None, current_soc=None, cycle_count=None, battery_type_list=None, history_map=None, bmscapacity=None):  # noqa: E501
        """EnergyStore - a model defined in Swagger"""  # noqa: E501
        self._battery_sn = None
        self._current_soc = None
        self._cycle_count = None
        self._battery_type_list = None
        self._history_map = None
        self._bmscapacity = None
        self.discriminator = None
        if battery_sn is not None:
            self.battery_sn = battery_sn
        if current_soc is not None:
            self.current_soc = current_soc
        if cycle_count is not None:
            self.cycle_count = cycle_count
        if battery_type_list is not None:
            self.battery_type_list = battery_type_list
        if history_map is not None:
            self.history_map = history_map
        if bmscapacity is not None:
            self.bmscapacity = bmscapacity

    @property
    def battery_sn(self):
        """Gets the battery_sn of this EnergyStore.  # noqa: E501

        Battery Serial Number  # noqa: E501

        :return: The battery_sn of this EnergyStore.  # noqa: E501
        :rtype: object
        """
        return self._battery_sn

    @battery_sn.setter
    def battery_sn(self, battery_sn):
        """Sets the battery_sn of this EnergyStore.

        Battery Serial Number  # noqa: E501

        :param battery_sn: The battery_sn of this EnergyStore.  # noqa: E501
        :type: object
        """

        self._battery_sn = battery_sn

    @property
    def current_soc(self):
        """Gets the current_soc of this EnergyStore.  # noqa: E501

        Battery State of Charge  # noqa: E501

        :return: The current_soc of this EnergyStore.  # noqa: E501
        :rtype: object
        """
        return self._current_soc

    @current_soc.setter
    def current_soc(self, current_soc):
        """Sets the current_soc of this EnergyStore.

        Battery State of Charge  # noqa: E501

        :param current_soc: The current_soc of this EnergyStore.  # noqa: E501
        :type: object
        """

        self._current_soc = current_soc

    @property
    def cycle_count(self):
        """Gets the cycle_count of this EnergyStore.  # noqa: E501

        Battery Cycle Count  # noqa: E501

        :return: The cycle_count of this EnergyStore.  # noqa: E501
        :rtype: object
        """
        return self._cycle_count

    @cycle_count.setter
    def cycle_count(self, cycle_count):
        """Sets the cycle_count of this EnergyStore.

        Battery Cycle Count  # noqa: E501

        :param cycle_count: The cycle_count of this EnergyStore.  # noqa: E501
        :type: object
        """

        self._cycle_count = cycle_count

    @property
    def battery_type_list(self):
        """Gets the battery_type_list of this EnergyStore.  # noqa: E501


        :return: The battery_type_list of this EnergyStore.  # noqa: E501
        :rtype: object
        """
        return self._battery_type_list

    @battery_type_list.setter
    def battery_type_list(self, battery_type_list):
        """Sets the battery_type_list of this EnergyStore.


        :param battery_type_list: The battery_type_list of this EnergyStore.  # noqa: E501
        :type: object
        """

        self._battery_type_list = battery_type_list

    @property
    def history_map(self):
        """Gets the history_map of this EnergyStore.  # noqa: E501

        History Map of Battery Usage  # noqa: E501

        :return: The history_map of this EnergyStore.  # noqa: E501
        :rtype: EnergyStoreHistoryMap
        """
        return self._history_map

    @history_map.setter
    def history_map(self, history_map):
        """Sets the history_map of this EnergyStore.

        History Map of Battery Usage  # noqa: E501

        :param history_map: The history_map of this EnergyStore.  # noqa: E501
        :type: EnergyStoreHistoryMap
        """

        self._history_map = history_map

    @property
    def bmscapacity(self):
        """Gets the bmscapacity of this EnergyStore.  # noqa: E501

        Battery Management System capacity (Ah)  # noqa: E501

        :return: The bmscapacity of this EnergyStore.  # noqa: E501
        :rtype: object
        """
        return self._bmscapacity

    @bmscapacity.setter
    def bmscapacity(self, bmscapacity):
        """Sets the bmscapacity of this EnergyStore.

        Battery Management System capacity (Ah)  # noqa: E501

        :param bmscapacity: The bmscapacity of this EnergyStore.  # noqa: E501
        :type: object
        """

        self._bmscapacity = bmscapacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnergyStore, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnergyStore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
