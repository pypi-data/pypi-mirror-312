# coding: utf-8

"""
    Livoltek API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'inverter_sn': 'object',
        'collector_sn': 'object',
        'product_type': 'object',
        'firmware_version': 'object',
        'device_manufacturer': 'object',
        'device_type': 'object',
        'running_status': 'object',
        'update_time': 'object'
    }

    attribute_map = {
        'id': 'id',
        'inverter_sn': 'inverterSn',
        'collector_sn': 'collectorSn',
        'product_type': 'productType',
        'firmware_version': 'firmwareVersion',
        'device_manufacturer': 'deviceManufacturer',
        'device_type': 'deviceType',
        'running_status': 'runningStatus',
        'update_time': 'updateTime'
    }

    def __init__(self, id=None, inverter_sn=None, collector_sn=None, product_type=None, firmware_version=None, device_manufacturer=None, device_type=None, running_status=None, update_time=None):  # noqa: E501
        """DeviceDetails - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._inverter_sn = None
        self._collector_sn = None
        self._product_type = None
        self._firmware_version = None
        self._device_manufacturer = None
        self._device_type = None
        self._running_status = None
        self._update_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if inverter_sn is not None:
            self.inverter_sn = inverter_sn
        if collector_sn is not None:
            self.collector_sn = collector_sn
        if product_type is not None:
            self.product_type = product_type
        if firmware_version is not None:
            self.firmware_version = firmware_version
        if device_manufacturer is not None:
            self.device_manufacturer = device_manufacturer
        if device_type is not None:
            self.device_type = device_type
        if running_status is not None:
            self.running_status = running_status
        if update_time is not None:
            self.update_time = update_time

    @property
    def id(self):
        """Gets the id of this DeviceDetails.  # noqa: E501

        Device id  # noqa: E501

        :return: The id of this DeviceDetails.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceDetails.

        Device id  # noqa: E501

        :param id: The id of this DeviceDetails.  # noqa: E501
        :type: object
        """

        self._id = id

    @property
    def inverter_sn(self):
        """Gets the inverter_sn of this DeviceDetails.  # noqa: E501

        Device SN  # noqa: E501

        :return: The inverter_sn of this DeviceDetails.  # noqa: E501
        :rtype: object
        """
        return self._inverter_sn

    @inverter_sn.setter
    def inverter_sn(self, inverter_sn):
        """Sets the inverter_sn of this DeviceDetails.

        Device SN  # noqa: E501

        :param inverter_sn: The inverter_sn of this DeviceDetails.  # noqa: E501
        :type: object
        """

        self._inverter_sn = inverter_sn

    @property
    def collector_sn(self):
        """Gets the collector_sn of this DeviceDetails.  # noqa: E501

        Device datalogger SN  # noqa: E501

        :return: The collector_sn of this DeviceDetails.  # noqa: E501
        :rtype: object
        """
        return self._collector_sn

    @collector_sn.setter
    def collector_sn(self, collector_sn):
        """Sets the collector_sn of this DeviceDetails.

        Device datalogger SN  # noqa: E501

        :param collector_sn: The collector_sn of this DeviceDetails.  # noqa: E501
        :type: object
        """

        self._collector_sn = collector_sn

    @property
    def product_type(self):
        """Gets the product_type of this DeviceDetails.  # noqa: E501

        Device type  # noqa: E501

        :return: The product_type of this DeviceDetails.  # noqa: E501
        :rtype: object
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this DeviceDetails.

        Device type  # noqa: E501

        :param product_type: The product_type of this DeviceDetails.  # noqa: E501
        :type: object
        """

        self._product_type = product_type

    @property
    def firmware_version(self):
        """Gets the firmware_version of this DeviceDetails.  # noqa: E501

        Device Manufacturer  # noqa: E501

        :return: The firmware_version of this DeviceDetails.  # noqa: E501
        :rtype: object
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this DeviceDetails.

        Device Manufacturer  # noqa: E501

        :param firmware_version: The firmware_version of this DeviceDetails.  # noqa: E501
        :type: object
        """

        self._firmware_version = firmware_version

    @property
    def device_manufacturer(self):
        """Gets the device_manufacturer of this DeviceDetails.  # noqa: E501

        Device Manufacturer  # noqa: E501

        :return: The device_manufacturer of this DeviceDetails.  # noqa: E501
        :rtype: object
        """
        return self._device_manufacturer

    @device_manufacturer.setter
    def device_manufacturer(self, device_manufacturer):
        """Sets the device_manufacturer of this DeviceDetails.

        Device Manufacturer  # noqa: E501

        :param device_manufacturer: The device_manufacturer of this DeviceDetails.  # noqa: E501
        :type: object
        """

        self._device_manufacturer = device_manufacturer

    @property
    def device_type(self):
        """Gets the device_type of this DeviceDetails.  # noqa: E501

        Device Type  # noqa: E501

        :return: The device_type of this DeviceDetails.  # noqa: E501
        :rtype: object
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DeviceDetails.

        Device Type  # noqa: E501

        :param device_type: The device_type of this DeviceDetails.  # noqa: E501
        :type: object
        """

        self._device_type = device_type

    @property
    def running_status(self):
        """Gets the running_status of this DeviceDetails.  # noqa: E501

        Device running status  # noqa: E501

        :return: The running_status of this DeviceDetails.  # noqa: E501
        :rtype: object
        """
        return self._running_status

    @running_status.setter
    def running_status(self, running_status):
        """Sets the running_status of this DeviceDetails.

        Device running status  # noqa: E501

        :param running_status: The running_status of this DeviceDetails.  # noqa: E501
        :type: object
        """

        self._running_status = running_status

    @property
    def update_time(self):
        """Gets the update_time of this DeviceDetails.  # noqa: E501

        Latest update time (ms)  # noqa: E501

        :return: The update_time of this DeviceDetails.  # noqa: E501
        :rtype: object
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this DeviceDetails.

        Latest update time (ms)  # noqa: E501

        :param update_time: The update_time of this DeviceDetails.  # noqa: E501
        :type: object
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
