# coding: utf-8

"""
    Livoltek API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Site(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'power_station_id': 'object',
        'power_station_name': 'object',
        'country': 'object',
        'administrative_region': 'object',
        'power_station_type': 'object',
        'power_station_status': 'object',
        'pv_capacity': 'object',
        'registration_time': 'object',
        'update_time': 'object',
        'timezone': 'object'
    }

    attribute_map = {
        'power_station_id': 'powerStationId',
        'power_station_name': 'powerStationName',
        'country': 'country',
        'administrative_region': 'administrativeRegion',
        'power_station_type': 'powerStationType',
        'power_station_status': 'powerStationStatus',
        'pv_capacity': 'pvCapacity',
        'registration_time': 'registrationTime',
        'update_time': 'updateTime',
        'timezone': 'timezone'
    }

    def __init__(self, power_station_id=None, power_station_name=None, country=None, administrative_region=None, power_station_type=None, power_station_status=None, pv_capacity=None, registration_time=None, update_time=None, timezone=None):  # noqa: E501
        """Site - a model defined in Swagger"""  # noqa: E501
        self._power_station_id = None
        self._power_station_name = None
        self._country = None
        self._administrative_region = None
        self._power_station_type = None
        self._power_station_status = None
        self._pv_capacity = None
        self._registration_time = None
        self._update_time = None
        self._timezone = None
        self.discriminator = None
        if power_station_id is not None:
            self.power_station_id = power_station_id
        if power_station_name is not None:
            self.power_station_name = power_station_name
        if country is not None:
            self.country = country
        if administrative_region is not None:
            self.administrative_region = administrative_region
        if power_station_type is not None:
            self.power_station_type = power_station_type
        if power_station_status is not None:
            self.power_station_status = power_station_status
        if pv_capacity is not None:
            self.pv_capacity = pv_capacity
        if registration_time is not None:
            self.registration_time = registration_time
        if update_time is not None:
            self.update_time = update_time
        if timezone is not None:
            self.timezone = timezone

    @property
    def power_station_id(self):
        """Gets the power_station_id of this Site.  # noqa: E501

        Site ID  # noqa: E501

        :return: The power_station_id of this Site.  # noqa: E501
        :rtype: object
        """
        return self._power_station_id

    @power_station_id.setter
    def power_station_id(self, power_station_id):
        """Sets the power_station_id of this Site.

        Site ID  # noqa: E501

        :param power_station_id: The power_station_id of this Site.  # noqa: E501
        :type: object
        """

        self._power_station_id = power_station_id

    @property
    def power_station_name(self):
        """Gets the power_station_name of this Site.  # noqa: E501

        Site Name  # noqa: E501

        :return: The power_station_name of this Site.  # noqa: E501
        :rtype: object
        """
        return self._power_station_name

    @power_station_name.setter
    def power_station_name(self, power_station_name):
        """Sets the power_station_name of this Site.

        Site Name  # noqa: E501

        :param power_station_name: The power_station_name of this Site.  # noqa: E501
        :type: object
        """

        self._power_station_name = power_station_name

    @property
    def country(self):
        """Gets the country of this Site.  # noqa: E501

        Country/Region  # noqa: E501

        :return: The country of this Site.  # noqa: E501
        :rtype: object
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Site.

        Country/Region  # noqa: E501

        :param country: The country of this Site.  # noqa: E501
        :type: object
        """

        self._country = country

    @property
    def administrative_region(self):
        """Gets the administrative_region of this Site.  # noqa: E501

        Administrative Division  # noqa: E501

        :return: The administrative_region of this Site.  # noqa: E501
        :rtype: object
        """
        return self._administrative_region

    @administrative_region.setter
    def administrative_region(self, administrative_region):
        """Sets the administrative_region of this Site.

        Administrative Division  # noqa: E501

        :param administrative_region: The administrative_region of this Site.  # noqa: E501
        :type: object
        """

        self._administrative_region = administrative_region

    @property
    def power_station_type(self):
        """Gets the power_station_type of this Site.  # noqa: E501

        Site Type  # noqa: E501

        :return: The power_station_type of this Site.  # noqa: E501
        :rtype: object
        """
        return self._power_station_type

    @power_station_type.setter
    def power_station_type(self, power_station_type):
        """Sets the power_station_type of this Site.

        Site Type  # noqa: E501

        :param power_station_type: The power_station_type of this Site.  # noqa: E501
        :type: object
        """

        self._power_station_type = power_station_type

    @property
    def power_station_status(self):
        """Gets the power_station_status of this Site.  # noqa: E501

        Site Communication status  # noqa: E501

        :return: The power_station_status of this Site.  # noqa: E501
        :rtype: object
        """
        return self._power_station_status

    @power_station_status.setter
    def power_station_status(self, power_station_status):
        """Sets the power_station_status of this Site.

        Site Communication status  # noqa: E501

        :param power_station_status: The power_station_status of this Site.  # noqa: E501
        :type: object
        """

        self._power_station_status = power_station_status

    @property
    def pv_capacity(self):
        """Gets the pv_capacity of this Site.  # noqa: E501

        PV Capacity  # noqa: E501

        :return: The pv_capacity of this Site.  # noqa: E501
        :rtype: object
        """
        return self._pv_capacity

    @pv_capacity.setter
    def pv_capacity(self, pv_capacity):
        """Sets the pv_capacity of this Site.

        PV Capacity  # noqa: E501

        :param pv_capacity: The pv_capacity of this Site.  # noqa: E501
        :type: object
        """

        self._pv_capacity = pv_capacity

    @property
    def registration_time(self):
        """Gets the registration_time of this Site.  # noqa: E501

        Lifetime generation  # noqa: E501

        :return: The registration_time of this Site.  # noqa: E501
        :rtype: object
        """
        return self._registration_time

    @registration_time.setter
    def registration_time(self, registration_time):
        """Sets the registration_time of this Site.

        Lifetime generation  # noqa: E501

        :param registration_time: The registration_time of this Site.  # noqa: E501
        :type: object
        """

        self._registration_time = registration_time

    @property
    def update_time(self):
        """Gets the update_time of this Site.  # noqa: E501

        Latest data update time  # noqa: E501

        :return: The update_time of this Site.  # noqa: E501
        :rtype: object
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Site.

        Latest data update time  # noqa: E501

        :param update_time: The update_time of this Site.  # noqa: E501
        :type: object
        """

        self._update_time = update_time

    @property
    def timezone(self):
        """Gets the timezone of this Site.  # noqa: E501

        Time Zone  # noqa: E501

        :return: The timezone of this Site.  # noqa: E501
        :rtype: object
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Site.

        Time Zone  # noqa: E501

        :param timezone: The timezone of this Site.  # noqa: E501
        :type: object
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Site, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Site):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
