# coding: utf-8

"""
    Livoltek API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteOverview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'object',
        'online_device': 'object',
        'update_time': 'object',
        'current_power': 'object',
        'eout_daily': 'object',
        'eout_month': 'object',
        'eout_current_year': 'object',
        'e_total_to_grid': 'object'
    }

    attribute_map = {
        'name': 'name',
        'online_device': 'onlineDevice',
        'update_time': 'updateTime',
        'current_power': 'currentPower',
        'eout_daily': 'eoutDaily',
        'eout_month': 'eoutMonth',
        'eout_current_year': 'eoutCurrentYear',
        'e_total_to_grid': 'eTotalToGrid'
    }

    def __init__(self, name=None, online_device=None, update_time=None, current_power=None, eout_daily=None, eout_month=None, eout_current_year=None, e_total_to_grid=None):  # noqa: E501
        """SiteOverview - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._online_device = None
        self._update_time = None
        self._current_power = None
        self._eout_daily = None
        self._eout_month = None
        self._eout_current_year = None
        self._e_total_to_grid = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if online_device is not None:
            self.online_device = online_device
        if update_time is not None:
            self.update_time = update_time
        if current_power is not None:
            self.current_power = current_power
        if eout_daily is not None:
            self.eout_daily = eout_daily
        if eout_month is not None:
            self.eout_month = eout_month
        if eout_current_year is not None:
            self.eout_current_year = eout_current_year
        if e_total_to_grid is not None:
            self.e_total_to_grid = e_total_to_grid

    @property
    def name(self):
        """Gets the name of this SiteOverview.  # noqa: E501

        Site name  # noqa: E501

        :return: The name of this SiteOverview.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SiteOverview.

        Site name  # noqa: E501

        :param name: The name of this SiteOverview.  # noqa: E501
        :type: object
        """

        self._name = name

    @property
    def online_device(self):
        """Gets the online_device of this SiteOverview.  # noqa: E501

        Amount of online equipment  # noqa: E501

        :return: The online_device of this SiteOverview.  # noqa: E501
        :rtype: object
        """
        return self._online_device

    @online_device.setter
    def online_device(self, online_device):
        """Sets the online_device of this SiteOverview.

        Amount of online equipment  # noqa: E501

        :param online_device: The online_device of this SiteOverview.  # noqa: E501
        :type: object
        """

        self._online_device = online_device

    @property
    def update_time(self):
        """Gets the update_time of this SiteOverview.  # noqa: E501

        Latest updated timestamp  # noqa: E501

        :return: The update_time of this SiteOverview.  # noqa: E501
        :rtype: object
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this SiteOverview.

        Latest updated timestamp  # noqa: E501

        :param update_time: The update_time of this SiteOverview.  # noqa: E501
        :type: object
        """

        self._update_time = update_time

    @property
    def current_power(self):
        """Gets the current_power of this SiteOverview.  # noqa: E501

        Real-time power  # noqa: E501

        :return: The current_power of this SiteOverview.  # noqa: E501
        :rtype: object
        """
        return self._current_power

    @current_power.setter
    def current_power(self, current_power):
        """Sets the current_power of this SiteOverview.

        Real-time power  # noqa: E501

        :param current_power: The current_power of this SiteOverview.  # noqa: E501
        :type: object
        """

        self._current_power = current_power

    @property
    def eout_daily(self):
        """Gets the eout_daily of this SiteOverview.  # noqa: E501

        Daily generation  # noqa: E501

        :return: The eout_daily of this SiteOverview.  # noqa: E501
        :rtype: object
        """
        return self._eout_daily

    @eout_daily.setter
    def eout_daily(self, eout_daily):
        """Sets the eout_daily of this SiteOverview.

        Daily generation  # noqa: E501

        :param eout_daily: The eout_daily of this SiteOverview.  # noqa: E501
        :type: object
        """

        self._eout_daily = eout_daily

    @property
    def eout_month(self):
        """Gets the eout_month of this SiteOverview.  # noqa: E501

        Monthly generation  # noqa: E501

        :return: The eout_month of this SiteOverview.  # noqa: E501
        :rtype: object
        """
        return self._eout_month

    @eout_month.setter
    def eout_month(self, eout_month):
        """Sets the eout_month of this SiteOverview.

        Monthly generation  # noqa: E501

        :param eout_month: The eout_month of this SiteOverview.  # noqa: E501
        :type: object
        """

        self._eout_month = eout_month

    @property
    def eout_current_year(self):
        """Gets the eout_current_year of this SiteOverview.  # noqa: E501

        Annual generation  # noqa: E501

        :return: The eout_current_year of this SiteOverview.  # noqa: E501
        :rtype: object
        """
        return self._eout_current_year

    @eout_current_year.setter
    def eout_current_year(self, eout_current_year):
        """Sets the eout_current_year of this SiteOverview.

        Annual generation  # noqa: E501

        :param eout_current_year: The eout_current_year of this SiteOverview.  # noqa: E501
        :type: object
        """

        self._eout_current_year = eout_current_year

    @property
    def e_total_to_grid(self):
        """Gets the e_total_to_grid of this SiteOverview.  # noqa: E501

        Lifetime generation  # noqa: E501

        :return: The e_total_to_grid of this SiteOverview.  # noqa: E501
        :rtype: object
        """
        return self._e_total_to_grid

    @e_total_to_grid.setter
    def e_total_to_grid(self, e_total_to_grid):
        """Sets the e_total_to_grid of this SiteOverview.

        Lifetime generation  # noqa: E501

        :param e_total_to_grid: The e_total_to_grid of this SiteOverview.  # noqa: E501
        :type: object
        """

        self._e_total_to_grid = e_total_to_grid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteOverview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteOverview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
