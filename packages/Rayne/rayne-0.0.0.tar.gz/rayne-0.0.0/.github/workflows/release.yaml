name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: The semantic version of the new release.
        required: true
        type: string
jobs:
  # Run some quick sanity checks such as ensuring the new version doesn't
  # already exist.
  preRelease:
    name: Pre-release Checks
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{github.token}}
    outputs:
      milestone: ${{steps.output.outputs.milestone}}
    steps:
      - name: Validate the new version
        run: |
          if [[ "${{inputs.version}}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "VERSION=${{inputs.version}}" >>${GITHUB_ENV}
          else
            echo "::error title=Version check failed::'${{inputs.version}}'' is not a semantic version."
            exit 1
          fi
      - name: Clone the repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-tags: true
      - name: Check if the tag exists
        run: |
          if git tag v${{inputs.version}}; then
            git tag --delete v${{inputs.version}}
            exit 0
          fi
          echo "::error title=Git tag already exists::The repository already has the tag v${{inputs.version}}"
      - name: Check if the milestone exists
        run: python3 .github/workflows/milestone.py exists "$(gh repo view --json milestones)"
      - name: Check if the milestone is open
        run: |
          STATE=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${GITHUB_REPOSITORY}/milestones/${MILESTONE} \
            --jq ".state")
          if [[ "${STATE}" == "closed" ]]; then
            echo "::error title=Milestone closed::Milestone ${{inputs.version}} is already closed."
            exit 1
          fi
      - name: Check if all planned issues are done
        run: python3 .github/workflows/milestone.py issues "$(gh search issues --milestone 0.1.0 --repo brobeson/Rayne --state open --json number)"
      - name: Set the job output
        id: output
        run: echo "milestone=${MILESTONE}" >>${GITHUB_OUTPUT}

  # Run the full quality control workflow; make sure tests and QA pass.
  qualityControl:
    name: Quality Control
    needs: preRelease
    uses: ./.github/workflows/code_quality.yaml

  # Generate the complete release.
  release:
    name: Release
    needs: [preRelease, qualityControl]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
    env:
      GH_TOKEN: ${{github.token}}
      MILESTONE: ${{needs.preRelease.outputs.milestone}}
    steps:
      - name: Clone the repository
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Install tools
        run: pip3 install build twine
      - name: Update the version
        run: |
          sed --in-place 's/^version = .*$/version = "${{inputs.version}}"/' pyproject.toml
          sed --in-place 's/^Next Release$/v${{inputs.version}}/' docs/release_notes.rst
          UNDERLINE=$(python3 -c 'print("-" * len("v${{inputs.version}}"))')
          sed --in-place "s/^------------$/${UNDERLINE}/" docs/release_notes.rst
          git add pyproject.toml docs/release_notes.rst
          git config --local user.name ${GITHUB_ACTOR}
          git config --local user.email ${GITHUB_ACTOR}@users.noreply.github.com
          git commit --message "Update to version ${{inputs.version}}"
          git push
      - name: Build the package
        run: python3 -m build
      - name: Upload the package
        run: twine upload --verbose --username __token__ --non-interactive dist/*
        env:
          TWINE_PASSWORD: ${{secrets.PYPI}}
      - name: Tag the repository
        run: git tag "v${{inputs.version}}"
      - name: Push the tag
        run: git push --tags
      - name: Write release notes
        run: |
          VERSION=${{inputs.version}}
          {
          echo "[![GitHub milestone details](https://img.shields.io/github/milestones/issues-closed/brobeson/Rayne/${MILESTONE}?logo=github&label=closed%20issues&color=blue)](https://github.com/brobeson/Rayne/milestone/${MILESTONE}?closed=1)"
          echo "[![PyPI - Version](https://img.shields.io/pypi/v/Rayne?logo=python)](https://pypi.org/project/Rayne/${{inputs.version}}/)"
          echo "[![Static Badge](https://img.shields.io/badge/release_notes-gray?logo=readthedocs)](https://rayne.readthedocs.io/en/stable/release_notes.html#v${VERSION//\./-})"
          } >notes.md
      - name: Create a release on GitHub
        run: >
          gh release create
          --repo ${{github.repository}}
          --target main
          --title "${{inputs.version}}"
          --notes-file notes.md
          "v${version}"
      - name: Close the milestone
        run: >
          gh api
          --method PATCH
          -H "Accept: application/vnd.github+json"
          -H "X-GitHub-Api-Version: 2022-11-28"
          /repos/${GITHUB_REPOSITORY}/milestones/${MILESTONE}
          -f "state=closed"
