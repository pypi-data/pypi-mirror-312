cmake_minimum_required(VERSION 3.13)

project(leveldb_mcpe)
find_package(ZLIB REQUIRED)

# C standard can be overridden when this is used as a sub-project.
if(NOT CMAKE_C_STANDARD)
  # This project can use C11, but will gracefully decay down to C89.
  set(CMAKE_C_STANDARD 11)
  set(CMAKE_C_STANDARD_REQUIRED OFF)
  set(CMAKE_C_EXTENSIONS OFF)
endif(NOT CMAKE_C_STANDARD)

# C++ standard can be overridden when this is used as a sub-project.
if(NOT CMAKE_CXX_STANDARD)
  # This project requires C++11.
  set(CMAKE_CXX_STANDARD 11)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
  set(CMAKE_CXX_EXTENSIONS OFF)
endif(NOT CMAKE_CXX_STANDARD)

add_library(leveldb_mcpe SHARED)

if (WIN32)
	# set windows 7 as the minimum version
	add_definitions(-DWIN32)
	add_definitions(-D_WIN32_WINNT=0x0601)
	add_definitions(-DLEVELDB_PLATFORM_WINDOWS)
    target_compile_definitions(leveldb_mcpe PRIVATE "DLLX=__declspec(dllexport)")
elseif(APPLE)
    add_definitions(-DLEVELDB_PLATFORM_POSIX)
    add_definitions(-DOS_MACOSX)
    set(CMAKE_OSX_DEPLOYMENT_TARGET "10.15")
    target_compile_definitions(leveldb_mcpe PRIVATE "DLLX=")
elseif(UNIX)
    add_definitions(-DLEVELDB_PLATFORM_POSIX)
    target_compile_definitions(leveldb_mcpe PRIVATE "DLLX=")
endif()

target_include_directories(leveldb_mcpe PRIVATE ${ZLIB_INCLUDE_DIRS})
target_link_libraries( leveldb_mcpe PRIVATE zlibstatic )

target_include_directories(leveldb_mcpe PRIVATE . PUBLIC include)
target_sources(leveldb_mcpe PRIVATE db/builder.cc)
target_sources(leveldb_mcpe PRIVATE db/c.cc)
target_sources(leveldb_mcpe PRIVATE db/db_impl.cc)
target_sources(leveldb_mcpe PRIVATE db/db_iter.cc)
target_sources(leveldb_mcpe PRIVATE db/dbformat.cc)
target_sources(leveldb_mcpe PRIVATE db/filename.cc)
target_sources(leveldb_mcpe PRIVATE db/log_reader.cc)
target_sources(leveldb_mcpe PRIVATE db/log_writer.cc)
target_sources(leveldb_mcpe PRIVATE db/memtable.cc)
target_sources(leveldb_mcpe PRIVATE db/repair.cc)
target_sources(leveldb_mcpe PRIVATE db/table_cache.cc)
target_sources(leveldb_mcpe PRIVATE db/version_edit.cc)
target_sources(leveldb_mcpe PRIVATE db/version_set.cc)
target_sources(leveldb_mcpe PRIVATE db/write_batch.cc)
target_sources(leveldb_mcpe PRIVATE table/block.cc)
target_sources(leveldb_mcpe PRIVATE table/block_builder.cc)
target_sources(leveldb_mcpe PRIVATE table/filter_block.cc)
target_sources(leveldb_mcpe PRIVATE table/format.cc)
target_sources(leveldb_mcpe PRIVATE table/iterator.cc)
target_sources(leveldb_mcpe PRIVATE table/merger.cc)
target_sources(leveldb_mcpe PRIVATE table/table.cc)
target_sources(leveldb_mcpe PRIVATE table/table_builder.cc)
target_sources(leveldb_mcpe PRIVATE table/two_level_iterator.cc)
target_sources(leveldb_mcpe PRIVATE util/arena.cc)
target_sources(leveldb_mcpe PRIVATE util/bloom.cc)
target_sources(leveldb_mcpe PRIVATE util/cache.cc)
target_sources(leveldb_mcpe PRIVATE util/coding.cc)
target_sources(leveldb_mcpe PRIVATE util/comparator.cc)
target_sources(leveldb_mcpe PRIVATE util/crc32c.cc)
target_sources(leveldb_mcpe PRIVATE util/env.cc)
target_sources(leveldb_mcpe PRIVATE util/filter_policy.cc)
target_sources(leveldb_mcpe PRIVATE util/hash.cc)
target_sources(leveldb_mcpe PRIVATE util/histogram.cc)
target_sources(leveldb_mcpe PRIVATE util/logging.cc)
target_sources(leveldb_mcpe PRIVATE util/options.cc)
target_sources(leveldb_mcpe PRIVATE util/status.cc)
target_sources(leveldb_mcpe PRIVATE db/zlib_compressor.cc)
target_sources(leveldb_mcpe PRIVATE db/zstd_compressor.cc)
target_sources(leveldb_mcpe PRIVATE port/port_posix_sse.cc)

if (UNIX)
    target_sources(leveldb_mcpe PRIVATE port/port_posix.cc)
    target_sources(leveldb_mcpe PRIVATE util/env_posix.cc)
elseif (WIN32)
    target_sources(leveldb_mcpe PRIVATE port/port_win.cc)
    target_sources(leveldb_mcpe PRIVATE util/env_win.cc)
    target_sources(leveldb_mcpe PRIVATE util/win_logger.cc)
endif()
