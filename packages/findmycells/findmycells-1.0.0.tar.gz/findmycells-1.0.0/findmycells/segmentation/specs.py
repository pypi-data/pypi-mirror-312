# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/api/06_segmentation_00_specs.ipynb.

# %% auto 0
__all__ = ['SegmentationStrategy', 'SegmentationObject']

# %% ../../nbs/api/06_segmentation_00_specs.ipynb 2
from abc import abstractmethod
from typing import Dict
import shutil


from ..core import ProcessingObject, ProcessingStrategy
from ..configs import DefaultConfigs

# %% ../../nbs/api/06_segmentation_00_specs.ipynb 4
class SegmentationStrategy(ProcessingStrategy):
    
    """
    Extending the `ProcssingStrategy` base class for segmentation as processing subtype.
    Also adding another property that denotes the type of segmentation (i.e. instance or semantic).
    """
    
    @property
    def processing_type(self):
        return 'segmentation'
    
    @property
    @abstractmethod
    def segmentation_type(self):
        # Either "instance" or "semantic"
        pass

# %% ../../nbs/api/06_segmentation_00_specs.ipynb 5
class SegmentationObject(ProcessingObject):

    """
    Extending the `ProcessingObject` base class for segmentation as processing subtype.
    The clear_all_tmp_data() method allows to clear all chached results that might 
    accumulate for instance while using deepflash2.
    """
    
    @property
    def processing_type(self) -> str:
        return 'segmentation'
    
    @property
    def widget_names(self):
        widget_names = {'batch_size': 'IntSlider',
                        'run_strategies_individually': 'Checkbox',
                        'clear_tmp_data': 'Checkbox',
                        'overwrite': 'Checkbox',
                        'autosave': 'Checkbox',
                        'show_progress': 'Checkbox'}
        return widget_names

    @property
    def descriptions(self):
        descriptions = {'batch_size': 'batch size (choose 0 to process all files at once)',
                        'run_strategies_individually': ('process strategy-wise (checked) or '
                                                        'process file-wise (un-checked)'),
                        'clear_tmp_data': ('delete temp. files as soon as possible (recommended '
                                           'for low memory)'),
                        'overwrite': 'overwrite previously processed files',
                        'autosave': 'autosave progress after each file',
                        'show_progress': 'show progress bar and estimated computation time'}
        return descriptions
    
    @property
    def tooltips(self):
        return {} 
    
    @property
    def default_configs(self) -> DefaultConfigs:
        default_values = {'batch_size': 1,
                          'run_strategies_individually': True,
                          'clear_tmp_data': True,
                          'overwrite': False,
                          'autosave': True,
                          'show_progress': True}
        valid_types = {'batch_size': [int],
                       'run_strategies_individually': [bool],
                       'clear_tmp_data': [bool],
                       'overwrite': [bool],
                       'autosave': [bool],
                       'show_progress': [bool]}
        valid_value_ranges = {'batch_size': (0, 25, 1)}
        default_configs = DefaultConfigs(default_values = default_values,
                                         valid_types = valid_types,
                                         valid_value_ranges = valid_value_ranges)
        return default_configs
    
    
    def _processing_specific_preparations(self) -> None:
        pass    


    def _add_processing_specific_infos_to_updates(self, updates: Dict) -> Dict:
        return updates


    def clear_all_tmp_data_in_seg_tool_dir(self) -> None:
        seg_tool_dir_path = self.database.project_configs.root_dir.joinpath(self.database.segmentation_tool_dir)
        for tmp_subdir_path in seg_tool_dir_path.iterdir():
            if tmp_subdir_path.is_dir() and tmp_subdir_path.name != 'trained_models':
                shutil.rmtree(tmp_subdir_path)
