# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/api/99_utils.ipynb.

# %% auto 0
__all__ = ['list_dir_no_hidden', 'load_zstack_as_array_from_single_planes', 'unpad_x_y_dims_in_3d_array',
           'get_polygon_from_instance_segmentation', 'download_sample_data']

# %% ../nbs/api/99_utils.ipynb 2
from typing import List, Optional, Union
from pathlib import Path, PosixPath, WindowsPath

import numpy as np
from skimage import io
from skimage import measure
from shapely.geometry import Polygon
from shapely.validation import make_valid

import wget
from zipfile import ZipFile
import shutil

# %% ../nbs/api/99_utils.ipynb 4
def list_dir_no_hidden(path: Union[PosixPath, WindowsPath], only_dirs: Optional[bool]=False, only_files: Optional[bool]=False) -> List[Union[PosixPath, WindowsPath]]:
    if only_dirs == True:
        detected_paths = [elem for elem in path.iterdir() if (elem.is_dir() == True) & (elem.name.startswith('.') == False)]
    elif only_files == True:
        detected_paths = [elem for elem in path.iterdir() if (elem.is_dir() == False) & (elem.name.startswith('.') == False)]
    else:
        detected_paths = [elem for elem in path.iterdir() if elem.name.startswith('.') == False]
    return detected_paths

# %% ../nbs/api/99_utils.ipynb 5
def load_zstack_as_array_from_single_planes(path: Union[PosixPath, WindowsPath], file_id: str, 
                                            minx: Optional[int]=None, maxx: Optional[int]=None, 
                                            miny: Optional[int]=None, maxy: Optional[int]=None) -> np.ndarray:
    types = list(set([type(minx), type(maxx), type(miny), type(maxy)]))    
    if any([minx, maxx, miny, maxy]):
        if (len(types) == 1) & (types[0] == int):
            cropping = True
        else:
            raise TypeError("'minx', 'maxx', 'miny', and 'maxy' all have to be integers - or None if no cropping has to be done")
    else:
        cropping = False
    matching_filepaths = [filepath for filepath in list_dir_no_hidden(path) if filepath.name.startswith(file_id)]
    cropped_zstack = []
    for single_plane_filepath in matching_filepaths:
        tmp_image = io.imread(single_plane_filepath)
        if cropping == True:
            tmp_image = tmp_image[minx:maxx, miny:maxy]
        cropped_zstack.append(tmp_image.copy())
        del tmp_image
    return np.asarray(cropped_zstack) 

# %% ../nbs/api/99_utils.ipynb 6
def unpad_x_y_dims_in_3d_array(padded_3d_array: np.ndarray, pad_width: int) -> np.ndarray:
    return padded_3d_array[:, pad_width:padded_3d_array.shape[1]-pad_width, pad_width:padded_3d_array.shape[2]-pad_width]

# %% ../nbs/api/99_utils.ipynb 7
def get_polygon_from_instance_segmentation(single_plane: np.ndarray, label_id: int) -> Polygon:
    x_dim, y_dim = single_plane.shape
    tmp_array = np.zeros((x_dim, y_dim), dtype='uint8')
    tmp_array[np.where(single_plane == label_id)] = 1
    tmp_contours = measure.find_contours(tmp_array, level = 0)[0]
    roi = Polygon(tmp_contours)
    if roi.is_valid == False:
        roi = make_valid(roi)
    return roi

# %% ../nbs/api/99_utils.ipynb 8
def download_sample_data(destination_dir_path: Union[PosixPath, WindowsPath]) -> None:
    """
    Test data for findmycells can be found here: https://zenodo.org/record/7655292#.Y_LI1R-ZNhE
    DOI: 10.5281/zenodo.7655292
    """
    assert_failed_message = ('"destination_dir_path" has to be a pathlib.Path object pointing to '
                             f'an existing directory, not {destination_dir_path}.')
    assert destination_dir_path.is_dir(), assert_failed_message
    wget.download(url = 'https://zenodo.org/record/7655292/files/cfos_ensemble.zip?download=1',
                  out = str(destination_dir_path.joinpath('ensemble.zip')))
    wget.download(url = 'https://zenodo.org/record/7655292/files/cfos_fmc_test_project.zip?download=1',
                  out = str(destination_dir_path.joinpath('test_project.zip')))
    with ZipFile(destination_dir_path.joinpath('ensemble.zip'), 'r') as zObject:
        zObject.extractall(path=destination_dir_path)
    with ZipFile(destination_dir_path.joinpath('test_project.zip'), 'r') as zObject:
        zObject.extractall(path=destination_dir_path)
    target_dir_path = destination_dir_path.joinpath('cfos_fmc_test_project', 'segmentation_tool', 'trained_models')
    for model_filepath in destination_dir_path.joinpath('cfos_ensemble').iterdir():
        shutil.move(model_filepath, target_dir_path)
