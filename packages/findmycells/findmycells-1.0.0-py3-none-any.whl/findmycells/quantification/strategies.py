# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/api/08_quantification_01_strategies.ipynb.

# %% auto 0
__all__ = ['CountFeaturesInWholeAreaROIsStrat', 'RelativeFeatureCountPerROIAreaStrat']

# %% ../../nbs/api/08_quantification_01_strategies.ipynb 2
from typing import Tuple, List, Dict
from pathlib import Path

import cc3d

from .specs import QuantificationObject, QuantificationStrategy
from ..configs import DefaultConfigs
from .. import utils

# %% ../../nbs/api/08_quantification_01_strategies.ipynb 4
class CountFeaturesInWholeAreaROIsStrat(QuantificationStrategy):
    
    """
    The number of unique features is determined in the whole image or per ROI, if provided. 
    This step is based on the application of the connected-component algorithm. 
    """

    @property
    def dropdown_option_value_for_gui(self):
        return 'Count all features in all area ROIs'
    
    @property
    def default_configs(self):
        default_values = {}
        valid_types = {}
        default_configs = DefaultConfigs(default_values = default_values, valid_types = valid_types)
        return default_configs
        
    @property
    def widget_names(self):
        return {}

    @property
    def descriptions(self):
        return {}
    
    @property
    def tooltips(self):
        return {}
    
    
    def run(self, processing_object: QuantificationObject, strategy_configs: Dict) -> QuantificationObject:
        quantification_results = {}
        for area_roi_id in processing_object.segmentations_per_area_roi_id.keys():
            _, feature_count = cc3d.connected_components(processing_object.segmentations_per_area_roi_id[area_roi_id], return_N=True)
            quantification_results[area_roi_id] = feature_count
        processing_object = self._add_quantification_results_to_database(quantification_object = processing_object, results = quantification_results)
        return processing_object


    def _add_strategy_specific_infos_to_updates(self, updates: Dict) -> Dict:
        return updates

# %% ../../nbs/api/08_quantification_01_strategies.ipynb 5
class RelativeFeatureCountPerROIAreaStrat(QuantificationStrategy):
    """
    After running CountFeaturesInWholeAreaROIsStrat this strategy can be applied to calculate the 
    number of cells per ROI area size in square pixels.
    """

    @property
    def dropdown_option_value_for_gui(self):
        return 'Relative Features per ROI area'
    
    @property
    def default_configs(self):
        default_values = {}
        valid_types = {}
        default_configs = DefaultConfigs(default_values = default_values, valid_types = valid_types)
        return default_configs
        
    @property
    def widget_names(self):
        return {}

    @property
    def descriptions(self):
        return {}
    
    @property
    def tooltips(self):
        return {}
    
    
    def run(self, processing_object: QuantificationObject, strategy_configs: Dict) -> QuantificationObject:
        quantification_results = {}
        for roi in processing_object.database.quantification_results["CountFeaturesInWholeAreaROIsStrat"][processing_object.file_id]:
            quantification_results[roi]=processing_object.database.quantification_results["CountFeaturesInWholeAreaROIsStrat"][processing_object.file_id][roi]/processing_object.database.area_rois_for_quantification[processing_object.file_id]["all_planes"][roi].area
        processing_object = self._add_quantification_results_to_database(quantification_object = processing_object, results = quantification_results)
        return processing_object

    def _add_strategy_specific_infos_to_updates(self, updates: Dict) -> Dict:
        return updates

