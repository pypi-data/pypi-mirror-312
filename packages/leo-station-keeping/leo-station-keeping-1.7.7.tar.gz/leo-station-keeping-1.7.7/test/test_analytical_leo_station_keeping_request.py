# coding: utf-8

"""
    LEO Station Keeping API

    This mission allows to estimate the cost of station keeping maneuvers needed  to counter the effects of the atmospheric drag on the semi-major axis of a  spacecraft in low Earth orbit (up to an altitude of 1000 km).   <b>CHANGELOG</b> <ul>   <li><b>1.7.7</b> - 2024-07-11 - Add descriptions, required tags and default values, better handles user input errors</li>   <li><b>1.7.0</b> - 2024-07-11 - Add space weather data source choice to <b>NRLMSISE00AtmosphericModel</b> schema</li>   <li><b>1.6.0</b> - 2024-07-11 - Add <b>Battery</b> schema to inputs of <b>NumericalLeoStationKeepingRequest</b> schema</li>, update SolarArray efficiency description, added SYSTEM output ephemerides type, corrected <b>onBoardAveragePower</b> description</li>   <li><b>1.5.0</b> - 2024-07-08 - Replace custom earth potential data with <b>customEarthPotentialConfiguration</b> in <b>EarthPotentialPerturbation</b> schema</li>   <li><b>1.4.0</b> - 2024-07-08 - Add <b>efficiency</b> to <b>SolarArray</b> schema</li>   <li><b>1.3.0</b> - 2024-07-08 - Replace <b>missionDateTime</b> by <b>initialDate</b> in <b>NumericalLeoStationKeepingRequest</b> schema</li>    <li><b>1.2.0</b> - 2024-07-03 - Add <b>atmosphericModel</b> to <b>DragPerturbation</b> schema</li>   <li><b>1.1.0</b> - 2024-06-27 - Map custom maneuvering strategy</li>   <li><b>1.0.0</b> - 2024-06-07 - First version of the API</li> </ul> 

    The version of the OpenAPI document: 1.7.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from leo_station_keeping.models.analytical_leo_station_keeping_request import AnalyticalLeoStationKeepingRequest

class TestAnalyticalLeoStationKeepingRequest(unittest.TestCase):
    """AnalyticalLeoStationKeepingRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnalyticalLeoStationKeepingRequest:
        """Test AnalyticalLeoStationKeepingRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnalyticalLeoStationKeepingRequest`
        """
        model = AnalyticalLeoStationKeepingRequest()
        if include_optional:
            return AnalyticalLeoStationKeepingRequest(
                mission_date_time = '',
                maximum_duration = 56,
                initial_orbit = leo_station_keeping.models.orbit.Orbit(
                    inclination = 1.337, 
                    sma = 1.337, 
                    eccentricity = 1.337, 
                    parameters = leo_station_keeping.models.orbit_parameters.OrbitParameters(
                        parameters_type = 'CIRCULAR_ALTITUDE', ), 
                    advanced_parameters = leo_station_keeping.models.advanced_orbit_parameters.AdvancedOrbitParameters(
                        orbit_date = '2023-09-11T12:00:00Z', 
                        ascending_node_type = 'RAAN', 
                        raan = 1.337, 
                        mltan = 1.337, 
                        anomaly = 1.337, 
                        anomaly_type = 'TRUE', 
                        orbital_element_type = 'MEAN', 
                        perigee_argument = 1.337, ), ),
                target_orbit = leo_station_keeping.models.orbit.Orbit(
                    inclination = 1.337, 
                    sma = 1.337, 
                    eccentricity = 1.337, 
                    parameters = leo_station_keeping.models.orbit_parameters.OrbitParameters(
                        parameters_type = 'CIRCULAR_ALTITUDE', ), 
                    advanced_parameters = leo_station_keeping.models.advanced_orbit_parameters.AdvancedOrbitParameters(
                        orbit_date = '2023-09-11T12:00:00Z', 
                        ascending_node_type = 'RAAN', 
                        raan = 1.337, 
                        mltan = 1.337, 
                        anomaly = 1.337, 
                        anomaly_type = 'TRUE', 
                        orbital_element_type = 'MEAN', 
                        perigee_argument = 1.337, ), ),
                spacecraft_geometry = leo_station_keeping.models.spacecraft_geometry.SpacecraftGeometry(
                    type = 'SPHERICAL', ),
                platform = leo_station_keeping.models.platform.Platform(
                    mass = 1.337, 
                    on_board_average_power = 1.337, ),
                propulsion_system = leo_station_keeping.models.propulsion_system.PropulsionSystem(
                    type = 'CHEMICAL', 
                    isp = 1.337, 
                    power = 1.337, 
                    thrust = 1.337, 
                    standby_power = 1.337, 
                    warm_up_power = 1.337, 
                    warm_up_duration = 1.337, 
                    propellant_mass = 1.337, 
                    total_mass = 1.337, 
                    total_impulse = 1.337, 
                    maximum_thrust_duration = 1.337, 
                    consumption = 1.337, 
                    propellant_capacity_choice = 'PROPELLANT', ),
                drag_perturbation = leo_station_keeping.models.analytical_leo_station_keeping_request_drag_perturbation.AnalyticalLeoStationKeepingRequest_dragPerturbation(
                    drag_coefficient = 1.337, 
                    lift_ratio = 1.337, 
                    custom_solar_flux = 1.337, ),
                tolerance = leo_station_keeping.models.tolerance.Tolerance(
                    type = 'SMA', )
            )
        else:
            return AnalyticalLeoStationKeepingRequest(
                maximum_duration = 56,
                initial_orbit = leo_station_keeping.models.orbit.Orbit(
                    inclination = 1.337, 
                    sma = 1.337, 
                    eccentricity = 1.337, 
                    parameters = leo_station_keeping.models.orbit_parameters.OrbitParameters(
                        parameters_type = 'CIRCULAR_ALTITUDE', ), 
                    advanced_parameters = leo_station_keeping.models.advanced_orbit_parameters.AdvancedOrbitParameters(
                        orbit_date = '2023-09-11T12:00:00Z', 
                        ascending_node_type = 'RAAN', 
                        raan = 1.337, 
                        mltan = 1.337, 
                        anomaly = 1.337, 
                        anomaly_type = 'TRUE', 
                        orbital_element_type = 'MEAN', 
                        perigee_argument = 1.337, ), ),
                spacecraft_geometry = leo_station_keeping.models.spacecraft_geometry.SpacecraftGeometry(
                    type = 'SPHERICAL', ),
                platform = leo_station_keeping.models.platform.Platform(
                    mass = 1.337, 
                    on_board_average_power = 1.337, ),
                propulsion_system = leo_station_keeping.models.propulsion_system.PropulsionSystem(
                    type = 'CHEMICAL', 
                    isp = 1.337, 
                    power = 1.337, 
                    thrust = 1.337, 
                    standby_power = 1.337, 
                    warm_up_power = 1.337, 
                    warm_up_duration = 1.337, 
                    propellant_mass = 1.337, 
                    total_mass = 1.337, 
                    total_impulse = 1.337, 
                    maximum_thrust_duration = 1.337, 
                    consumption = 1.337, 
                    propellant_capacity_choice = 'PROPELLANT', ),
                drag_perturbation = leo_station_keeping.models.analytical_leo_station_keeping_request_drag_perturbation.AnalyticalLeoStationKeepingRequest_dragPerturbation(
                    drag_coefficient = 1.337, 
                    lift_ratio = 1.337, 
                    custom_solar_flux = 1.337, ),
                tolerance = leo_station_keeping.models.tolerance.Tolerance(
                    type = 'SMA', ),
        )
        """

    def testAnalyticalLeoStationKeepingRequest(self):
        """Test AnalyticalLeoStationKeepingRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
