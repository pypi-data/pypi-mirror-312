# coding: utf-8

"""
    LEO Station Keeping API

    This mission allows to estimate the cost of station keeping maneuvers needed  to counter the effects of the atmospheric drag on the semi-major axis of a  spacecraft in low Earth orbit (up to an altitude of 1000 km).   <b>CHANGELOG</b> <ul>   <li><b>1.7.7</b> - 2024-07-11 - Add descriptions, required tags and default values, better handles user input errors</li>   <li><b>1.7.0</b> - 2024-07-11 - Add space weather data source choice to <b>NRLMSISE00AtmosphericModel</b> schema</li>   <li><b>1.6.0</b> - 2024-07-11 - Add <b>Battery</b> schema to inputs of <b>NumericalLeoStationKeepingRequest</b> schema</li>, update SolarArray efficiency description, added SYSTEM output ephemerides type, corrected <b>onBoardAveragePower</b> description</li>   <li><b>1.5.0</b> - 2024-07-08 - Replace custom earth potential data with <b>customEarthPotentialConfiguration</b> in <b>EarthPotentialPerturbation</b> schema</li>   <li><b>1.4.0</b> - 2024-07-08 - Add <b>efficiency</b> to <b>SolarArray</b> schema</li>   <li><b>1.3.0</b> - 2024-07-08 - Replace <b>missionDateTime</b> by <b>initialDate</b> in <b>NumericalLeoStationKeepingRequest</b> schema</li>    <li><b>1.2.0</b> - 2024-07-03 - Add <b>atmosphericModel</b> to <b>DragPerturbation</b> schema</li>   <li><b>1.1.0</b> - 2024-06-27 - Map custom maneuvering strategy</li>   <li><b>1.0.0</b> - 2024-06-07 - First version of the API</li> </ul> 

    The version of the OpenAPI document: 1.7.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from leo_station_keeping.models.numerical_leo_station_keeping_response import NumericalLeoStationKeepingResponse

class TestNumericalLeoStationKeepingResponse(unittest.TestCase):
    """NumericalLeoStationKeepingResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NumericalLeoStationKeepingResponse:
        """Test NumericalLeoStationKeepingResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NumericalLeoStationKeepingResponse`
        """
        model = NumericalLeoStationKeepingResponse()
        if include_optional:
            return NumericalLeoStationKeepingResponse(
                results = leo_station_keeping.models.numerical_leo_station_keeping_response_results.NumericalLeoStationKeepingResponse_results(
                    number_of_burns = 56, 
                    thrust_duration = 1.337, 
                    used_propellant = 1.337, 
                    delta_v = 1.337, 
                    thruster_mean_duty_cycle = 1.337, 
                    total_warmup_duty_cycle = 1.337, 
                    mean_burn_duration_estimation = 1.337, 
                    mission_duration = 1.337, 
                    number_of_periods = 56, 
                    total_impulse = 1.337, 
                    final_duty_cycle = 1.337, 
                    maneuver_model = '', 
                    final_orbit = leo_station_keeping.models.orbit.Orbit(
                        inclination = 1.337, 
                        sma = 1.337, 
                        eccentricity = 1.337, 
                        parameters = leo_station_keeping.models.orbit_parameters.OrbitParameters(
                            parameters_type = 'CIRCULAR_ALTITUDE', ), 
                        advanced_parameters = leo_station_keeping.models.advanced_orbit_parameters.AdvancedOrbitParameters(
                            orbit_date = '2023-09-11T12:00:00Z', 
                            ascending_node_type = 'RAAN', 
                            raan = 1.337, 
                            mltan = 1.337, 
                            anomaly = 1.337, 
                            anomaly_type = 'TRUE', 
                            orbital_element_type = 'MEAN', 
                            perigee_argument = 1.337, ), ), ),
                spacecraft_states = leo_station_keeping.models.numerical_leo_station_keeping_response_spacecraft_states.NumericalLeoStationKeepingResponse_spacecraftStates(
                    mu = 1.337, 
                    ephemerides_frame = '', 
                    timestamps = [
                        ''
                        ], 
                    thrusting = [
                        leo_station_keeping.models.numerical_leo_station_keeping_response_spacecraft_states_thrusting_inner.NumericalLeoStationKeepingResponse_spacecraftStates_thrusting_inner(
                            begin = '', 
                            end = '', )
                        ], 
                    mass = [
                        1.337
                        ], 
                    mean = leo_station_keeping.models.mean_or_osculating_spacecraft_states.MeanOrOsculatingSpacecraftStates(
                        pv_coordinates = leo_station_keeping.models.mean_or_osculating_spacecraft_states_pv_coordinates.MeanOrOsculatingSpacecraftStates_pvCoordinates(
                            position = [
                                [
                                    1.337
                                    ]
                                ], 
                            velocity = [
                                [
                                    1.337
                                    ]
                                ], 
                            acceleration = [
                                [
                                    1.337
                                    ]
                                ], ), 
                        attitude = leo_station_keeping.models.mean_or_osculating_spacecraft_states_attitude.MeanOrOsculatingSpacecraftStates_attitude(
                            rotation = [
                                [
                                    1.337
                                    ]
                                ], 
                            rotation_rate = [
                                [
                                    1.337
                                    ]
                                ], 
                            rotation_acceleration = [
                                [
                                    1.337
                                    ]
                                ], ), ), 
                    osculating = leo_station_keeping.models.mean_or_osculating_spacecraft_states.MeanOrOsculatingSpacecraftStates(), ),
                ephemerides = [
                    [
                        1.337
                        ]
                    ],
                field_indexes = [
                    leo_station_keeping.models.numerical_leo_station_keeping_response_field_indexes_inner.NumericalLeoStationKeepingResponse_fieldIndexes_inner(
                        key = '', 
                        index = 56, )
                    ],
                orbital_ephemerides = leo_station_keeping.models.numerical_leo_station_keeping_response_orbital_ephemerides.NumericalLeoStationKeepingResponse_orbitalEphemerides(
                    ephemerides_frame = '', 
                    timestamps = [
                        ''
                        ], 
                    mean = leo_station_keeping.models.numerical_leo_station_keeping_response_orbital_ephemerides_mean.NumericalLeoStationKeepingResponse_orbitalEphemerides_mean(
                        keplerian = leo_station_keeping.models.keplerian_ephemerides.KeplerianEphemerides(
                            true_anomaly = [
                                1.337
                                ], 
                            mean_anomaly = [
                                1.337
                                ], 
                            inclination = [
                                1.337
                                ], 
                            eccentric_anomaly = [
                                1.337
                                ], 
                            perigee_altitude = [
                                1.337
                                ], 
                            ltan = [
                                1.337
                                ], 
                            altitude = [
                                1.337
                                ], 
                            semi_major_axis = [
                                1.337
                                ], 
                            eccentricity = [
                                1.337
                                ], 
                            raan = [
                                1.337
                                ], ), 
                        cartesian = leo_station_keeping.models.cartesian_ephemerides.CartesianEphemerides(
                            x = [
                                1.337
                                ], 
                            y = [
                                1.337
                                ], 
                            z = [
                                1.337
                                ], 
                            vx = [
                                1.337
                                ], 
                            vy = [
                                1.337
                                ], 
                            vz = [
                                1.337
                                ], ), ), 
                    osculating = leo_station_keeping.models.numerical_leo_station_keeping_response_orbital_ephemerides_osculating.NumericalLeoStationKeepingResponse_orbitalEphemerides_osculating(), ),
                thrust_ephemerides = leo_station_keeping.models.numerical_leo_station_keeping_response_thrust_ephemerides.NumericalLeoStationKeepingResponse_thrustEphemerides(
                    timestamps = [
                        ''
                        ], 
                    direction_delta = [
                        1.337
                        ], 
                    direction_alpha = [
                        1.337
                        ], 
                    total_consumption = [
                        1.337
                        ], ),
                errors = [
                    ''
                    ],
                warnings = [
                    ''
                    ]
            )
        else:
            return NumericalLeoStationKeepingResponse(
        )
        """

    def testNumericalLeoStationKeepingResponse(self):
        """Test NumericalLeoStationKeepingResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
