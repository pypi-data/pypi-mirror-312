# coding: utf-8

"""
    LEO Station Keeping API

    This mission allows to estimate the cost of station keeping maneuvers needed  to counter the effects of the atmospheric drag on the semi-major axis of a  spacecraft in low Earth orbit (up to an altitude of 1000 km).   <b>CHANGELOG</b> <ul>   <li><b>1.7.7</b> - 2024-07-11 - Add descriptions, required tags and default values, better handles user input errors</li>   <li><b>1.7.0</b> - 2024-07-11 - Add space weather data source choice to <b>NRLMSISE00AtmosphericModel</b> schema</li>   <li><b>1.6.0</b> - 2024-07-11 - Add <b>Battery</b> schema to inputs of <b>NumericalLeoStationKeepingRequest</b> schema</li>, update SolarArray efficiency description, added SYSTEM output ephemerides type, corrected <b>onBoardAveragePower</b> description</li>   <li><b>1.5.0</b> - 2024-07-08 - Replace custom earth potential data with <b>customEarthPotentialConfiguration</b> in <b>EarthPotentialPerturbation</b> schema</li>   <li><b>1.4.0</b> - 2024-07-08 - Add <b>efficiency</b> to <b>SolarArray</b> schema</li>   <li><b>1.3.0</b> - 2024-07-08 - Replace <b>missionDateTime</b> by <b>initialDate</b> in <b>NumericalLeoStationKeepingRequest</b> schema</li>    <li><b>1.2.0</b> - 2024-07-03 - Add <b>atmosphericModel</b> to <b>DragPerturbation</b> schema</li>   <li><b>1.1.0</b> - 2024-06-27 - Map custom maneuvering strategy</li>   <li><b>1.0.0</b> - 2024-06-07 - First version of the API</li> </ul> 

    The version of the OpenAPI document: 1.7.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from leo_station_keeping.models.box_spacecraft_geometry import BoxSpacecraftGeometry

class TestBoxSpacecraftGeometry(unittest.TestCase):
    """BoxSpacecraftGeometry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BoxSpacecraftGeometry:
        """Test BoxSpacecraftGeometry
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BoxSpacecraftGeometry`
        """
        model = BoxSpacecraftGeometry()
        if include_optional:
            return BoxSpacecraftGeometry(
                dimensions = leo_station_keeping.models.spacecraft_geometry_dimension.SpacecraftGeometryDimension(
                    x = 1.337, 
                    y = 1.337, 
                    z = 1.337, ),
                thruster_axis = None,
                solar_array = leo_station_keeping.models.solar_array.SolarArray(
                    type = 'BODY', 
                    efficiency = 0, )
            )
        else:
            return BoxSpacecraftGeometry(
                dimensions = leo_station_keeping.models.spacecraft_geometry_dimension.SpacecraftGeometryDimension(
                    x = 1.337, 
                    y = 1.337, 
                    z = 1.337, ),
        )
        """

    def testBoxSpacecraftGeometry(self):
        """Test BoxSpacecraftGeometry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
