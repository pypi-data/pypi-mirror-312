# coding: utf-8

"""
    LEO Station Keeping API

    This mission allows to estimate the cost of station keeping maneuvers needed  to counter the effects of the atmospheric drag on the semi-major axis of a  spacecraft in low Earth orbit (up to an altitude of 1000 km).   <b>CHANGELOG</b> <ul>   <li><b>1.7.7</b> - 2024-07-11 - Add descriptions, required tags and default values, better handles user input errors</li>   <li><b>1.7.0</b> - 2024-07-11 - Add space weather data source choice to <b>NRLMSISE00AtmosphericModel</b> schema</li>   <li><b>1.6.0</b> - 2024-07-11 - Add <b>Battery</b> schema to inputs of <b>NumericalLeoStationKeepingRequest</b> schema</li>, update SolarArray efficiency description, added SYSTEM output ephemerides type, corrected <b>onBoardAveragePower</b> description</li>   <li><b>1.5.0</b> - 2024-07-08 - Replace custom earth potential data with <b>customEarthPotentialConfiguration</b> in <b>EarthPotentialPerturbation</b> schema</li>   <li><b>1.4.0</b> - 2024-07-08 - Add <b>efficiency</b> to <b>SolarArray</b> schema</li>   <li><b>1.3.0</b> - 2024-07-08 - Replace <b>missionDateTime</b> by <b>initialDate</b> in <b>NumericalLeoStationKeepingRequest</b> schema</li>    <li><b>1.2.0</b> - 2024-07-03 - Add <b>atmosphericModel</b> to <b>DragPerturbation</b> schema</li>   <li><b>1.1.0</b> - 2024-06-27 - Map custom maneuvering strategy</li>   <li><b>1.0.0</b> - 2024-06-07 - First version of the API</li> </ul> 

    The version of the OpenAPI document: 1.7.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PropulsionSystem(BaseModel):
    """
    PropulsionSystem
    """ # noqa: E501
    type: StrictStr = Field(description="The propulsion system type")
    isp: Union[StrictFloat, StrictInt] = Field(description="The propulsion system specific impulse")
    power: Union[StrictFloat, StrictInt] = Field(description="The propulsion system power consumption when firing")
    thrust: Union[StrictFloat, StrictInt] = Field(description="The propulsion system nominal thrust")
    standby_power: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="The propulsion system power consumption when resting (not firing nor in warm-up)", alias="standbyPower")
    warm_up_power: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="The propulsion system power consumption when warming up before firing", alias="warmUpPower")
    warm_up_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=0, description="The duration of warm-up before firing", alias="warmUpDuration")
    propellant_mass: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The propulsion system propellant mass. Is required if `propellantCapacityChoice` is set to `PROPELLANT`", alias="propellantMass")
    total_mass: Union[StrictFloat, StrictInt] = Field(description="The propulsion system total mass (dry mass + propellant mass)", alias="totalMass")
    total_impulse: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The propulsion system total impulse. Is required if `propellantCapacityChoice` is set to `TOTAL_IMPULSE`", alias="totalImpulse")
    maximum_thrust_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The propulsion system maximum thrust duration. Is required if `type` is set to `CHEMICAL`", alias="maximumThrustDuration")
    consumption: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Not used in the computations")
    propellant_capacity_choice: StrictStr = Field(description="The propulsion system propellant capacity choice", alias="propellantCapacityChoice")
    __properties: ClassVar[List[str]] = ["type", "isp", "power", "thrust", "standbyPower", "warmUpPower", "warmUpDuration", "propellantMass", "totalMass", "totalImpulse", "maximumThrustDuration", "consumption", "propellantCapacityChoice"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CHEMICAL', 'ELECTRICAL']):
            raise ValueError("must be one of enum values ('CHEMICAL', 'ELECTRICAL')")
        return value

    @field_validator('propellant_capacity_choice')
    def propellant_capacity_choice_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PROPELLANT', 'TOTAL_IMPULSE']):
            raise ValueError("must be one of enum values ('PROPELLANT', 'TOTAL_IMPULSE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PropulsionSystem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PropulsionSystem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "isp": obj.get("isp"),
            "power": obj.get("power"),
            "thrust": obj.get("thrust"),
            "standbyPower": obj.get("standbyPower") if obj.get("standbyPower") is not None else 0,
            "warmUpPower": obj.get("warmUpPower") if obj.get("warmUpPower") is not None else 0,
            "warmUpDuration": obj.get("warmUpDuration") if obj.get("warmUpDuration") is not None else 0,
            "propellantMass": obj.get("propellantMass"),
            "totalMass": obj.get("totalMass"),
            "totalImpulse": obj.get("totalImpulse"),
            "maximumThrustDuration": obj.get("maximumThrustDuration"),
            "consumption": obj.get("consumption"),
            "propellantCapacityChoice": obj.get("propellantCapacityChoice")
        })
        return _obj


