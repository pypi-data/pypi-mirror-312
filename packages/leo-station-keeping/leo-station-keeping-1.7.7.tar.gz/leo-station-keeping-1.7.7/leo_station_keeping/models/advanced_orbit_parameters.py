# coding: utf-8

"""
    LEO Station Keeping API

    This mission allows to estimate the cost of station keeping maneuvers needed  to counter the effects of the atmospheric drag on the semi-major axis of a  spacecraft in low Earth orbit (up to an altitude of 1000 km).   <b>CHANGELOG</b> <ul>   <li><b>1.7.7</b> - 2024-07-11 - Add descriptions, required tags and default values, better handles user input errors</li>   <li><b>1.7.0</b> - 2024-07-11 - Add space weather data source choice to <b>NRLMSISE00AtmosphericModel</b> schema</li>   <li><b>1.6.0</b> - 2024-07-11 - Add <b>Battery</b> schema to inputs of <b>NumericalLeoStationKeepingRequest</b> schema</li>, update SolarArray efficiency description, added SYSTEM output ephemerides type, corrected <b>onBoardAveragePower</b> description</li>   <li><b>1.5.0</b> - 2024-07-08 - Replace custom earth potential data with <b>customEarthPotentialConfiguration</b> in <b>EarthPotentialPerturbation</b> schema</li>   <li><b>1.4.0</b> - 2024-07-08 - Add <b>efficiency</b> to <b>SolarArray</b> schema</li>   <li><b>1.3.0</b> - 2024-07-08 - Replace <b>missionDateTime</b> by <b>initialDate</b> in <b>NumericalLeoStationKeepingRequest</b> schema</li>    <li><b>1.2.0</b> - 2024-07-03 - Add <b>atmosphericModel</b> to <b>DragPerturbation</b> schema</li>   <li><b>1.1.0</b> - 2024-06-27 - Map custom maneuvering strategy</li>   <li><b>1.0.0</b> - 2024-06-07 - First version of the API</li> </ul> 

    The version of the OpenAPI document: 1.7.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AdvancedOrbitParameters(BaseModel):
    """
    AdvancedOrbitParameters
    """ # noqa: E501
    orbit_date: Optional[StrictStr] = Field(default='2023-09-11T12:00:00Z', description=" The orbit date", alias="orbitDate")
    ascending_node_type: Optional[StrictStr] = Field(default='RAAN', description=" The orbit ascending node type", alias="ascendingNodeType")
    raan: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description=" The orbit right ascension of the ascending node (in radians). Required if the ascending node type is set to `RAAN`")
    mltan: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description=" The orbit mean local time of the ascending node (in radians). Required if the ascending node type is set to `LTAN`")
    anomaly: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="The orbit anomaly (in radians)")
    anomaly_type: Optional[StrictStr] = Field(default='TRUE', description="The orbit anomaly type", alias="anomalyType")
    orbital_element_type: Optional[StrictStr] = Field(default='MEAN', description=" The orbit orbital element type", alias="orbitalElementType")
    perigee_argument: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.0, description="The orbit perigee argument (in radians)", alias="perigeeArgument")
    __properties: ClassVar[List[str]] = ["orbitDate", "ascendingNodeType", "raan", "mltan", "anomaly", "anomalyType", "orbitalElementType", "perigeeArgument"]

    @field_validator('ascending_node_type')
    def ascending_node_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RAAN', 'LTAN', 'NOT_DEFINED']):
            raise ValueError("must be one of enum values ('RAAN', 'LTAN', 'NOT_DEFINED')")
        return value

    @field_validator('anomaly_type')
    def anomaly_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRUE', 'MEAN', 'ECCENTRIC']):
            raise ValueError("must be one of enum values ('TRUE', 'MEAN', 'ECCENTRIC')")
        return value

    @field_validator('orbital_element_type')
    def orbital_element_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MEAN', 'OSC']):
            raise ValueError("must be one of enum values ('MEAN', 'OSC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvancedOrbitParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvancedOrbitParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "orbitDate": obj.get("orbitDate") if obj.get("orbitDate") is not None else '2023-09-11T12:00:00Z',
            "ascendingNodeType": obj.get("ascendingNodeType") if obj.get("ascendingNodeType") is not None else 'RAAN',
            "raan": obj.get("raan") if obj.get("raan") is not None else 0.0,
            "mltan": obj.get("mltan") if obj.get("mltan") is not None else 0.0,
            "anomaly": obj.get("anomaly") if obj.get("anomaly") is not None else 0.0,
            "anomalyType": obj.get("anomalyType") if obj.get("anomalyType") is not None else 'TRUE',
            "orbitalElementType": obj.get("orbitalElementType") if obj.get("orbitalElementType") is not None else 'MEAN',
            "perigeeArgument": obj.get("perigeeArgument") if obj.get("perigeeArgument") is not None else 0.0
        })
        return _obj


